{"ast":null,"code":"export * from \"@tanstack/react-query\";\nimport Ze, { useEffect as ma, useState as fa } from \"react\";\nimport { useContext as to } from \"react\";\nimport Yt from \"react\";\nimport { useQueryClient as eo } from \"@tanstack/react-query\";\nvar H = Yt.createContext({}),\n  Zt = _ref => {\n    let {\n      children: e,\n      isProvided: t,\n      ...r\n    } = _ref;\n    let {\n        replace: o\n      } = q(),\n      s = eo(),\n      a = () => {\n        s.invalidateQueries([\"useAuthenticated\"]), s.invalidateQueries([\"getUserIdentity\"]), s.invalidateQueries([\"usePermissions\"]);\n      },\n      n = async l => {\n        var y;\n        try {\n          let R = await ((y = r.login) == null ? void 0 : y.call(r, l));\n          return a(), Promise.resolve(R);\n        } catch (R) {\n          return Promise.reject(R);\n        }\n      },\n      m = async l => {\n        var y;\n        try {\n          let R = await ((y = r.register) == null ? void 0 : y.call(r, l));\n          return a(), Promise.resolve(R);\n        } catch (R) {\n          return Promise.reject(R);\n        }\n      },\n      C = async l => {\n        var y;\n        try {\n          let R = await ((y = r.logout) == null ? void 0 : y.call(r, l));\n          return a(), Promise.resolve(R);\n        } catch (R) {\n          return Promise.reject(R);\n        }\n      },\n      u = async l => {\n        var y;\n        try {\n          return await ((y = r.checkAuth) == null ? void 0 : y.call(r, l)), Promise.resolve();\n        } catch (R) {\n          return R != null && R.redirectPath && o(R.redirectPath), Promise.reject(R);\n        }\n      };\n    return Yt.createElement(H.Provider, {\n      value: {\n        ...r,\n        login: n,\n        logout: C,\n        checkAuth: u,\n        register: m,\n        isProvided: t\n      }\n    }, e);\n  };\nimport { useQuery as ro } from \"@tanstack/react-query\";\nvar oo = e => {\n  let {\n    getPermissions: t\n  } = to(H);\n  return ro([\"usePermissions\"], t != null ? t : () => Promise.resolve(void 0), {\n    enabled: !!t,\n    ...e\n  });\n};\nimport so from \"react\";\nimport { useQuery as ao } from \"@tanstack/react-query\";\nvar gt = function () {\n  let {\n    queryOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    getUserIdentity: t\n  } = so.useContext(H);\n  return ao([\"getUserIdentity\"], t != null ? t : () => Promise.resolve({}), {\n    enabled: !!t,\n    retry: !1,\n    ...e\n  });\n};\nimport no from \"react\";\nimport { useMutation as io } from \"@tanstack/react-query\";\nvar Ct = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      push: t\n    } = q(),\n    {\n      logout: r\n    } = no.useContext(H),\n    {\n      open: o\n    } = te();\n  return io([\"useLogout\"], r, {\n    onSuccess: (a, n) => {\n      var C;\n      let m = (C = n == null ? void 0 : n.redirectPath) != null ? C : a;\n      if (m !== !1) {\n        if (m) {\n          t(m);\n          return;\n        }\n        t(\"/login\");\n      }\n    },\n    onError: a => {\n      o == null || o({\n        key: \"useLogout-error\",\n        type: \"error\",\n        message: (a == null ? void 0 : a.name) || \"Logout Error\",\n        description: (a == null ? void 0 : a.message) || \"Something went wrong during logout\"\n      });\n    },\n    ...e\n  });\n};\nimport uo from \"react\";\nimport { useMutation as co } from \"@tanstack/react-query\";\nimport po from \"qs\";\nvar $e = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      replace: t\n    } = q(),\n    {\n      login: r\n    } = uo.useContext(H),\n    {\n      useLocation: o\n    } = w(),\n    {\n      search: s\n    } = o(),\n    {\n      close: a,\n      open: n\n    } = te(),\n    {\n      to: m\n    } = po.parse(s, {\n      ignoreQueryPrefix: !0\n    });\n  return co([\"useLogin\"], r, {\n    onSuccess: u => {\n      if (m) return t(m);\n      u !== !1 && t(typeof u == \"string\" ? u : \"/\"), a == null || a(\"login-error\");\n    },\n    onError: u => {\n      n == null || n({\n        message: (u == null ? void 0 : u.name) || \"Login Error\",\n        description: (u == null ? void 0 : u.message) || \"Invalid credentials\",\n        key: \"login-error\",\n        type: \"error\"\n      });\n    },\n    ...e\n  });\n};\nimport lo from \"react\";\nimport { useMutation as mo } from \"@tanstack/react-query\";\nvar xt = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      replace: t\n    } = q(),\n    {\n      register: r\n    } = lo.useContext(H),\n    {\n      close: o,\n      open: s\n    } = te();\n  return mo([\"useRegister\"], r, {\n    onSuccess: n => {\n      n !== !1 && t(n || \"/\"), o == null || o(\"register-error\");\n    },\n    onError: n => {\n      s == null || s({\n        message: (n == null ? void 0 : n.name) || \"Register Error\",\n        description: (n == null ? void 0 : n.message) || \"Error while registering\",\n        key: \"register-error\",\n        type: \"error\"\n      });\n    },\n    ...e\n  });\n};\nimport fo from \"react\";\nimport { useMutation as yo } from \"@tanstack/react-query\";\nvar Rt = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      replace: t\n    } = q(),\n    {\n      forgotPassword: r\n    } = fo.useContext(H),\n    {\n      close: o,\n      open: s\n    } = te();\n  return yo([\"useForgotPassword\"], r, {\n    onSuccess: n => {\n      n !== !1 && n && t(n), o == null || o(\"forgot-password-error\");\n    },\n    onError: n => {\n      s == null || s({\n        message: (n == null ? void 0 : n.name) || \"Forgot Password Error\",\n        description: (n == null ? void 0 : n.message) || \"Error while resetting password\",\n        key: \"forgot-password-error\",\n        type: \"error\"\n      });\n    },\n    ...e\n  });\n};\nimport To from \"react\";\nimport { useMutation as go } from \"@tanstack/react-query\";\nimport Co from \"qs\";\nvar Pt = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      replace: t\n    } = q(),\n    {\n      updatePassword: r\n    } = To.useContext(H),\n    {\n      close: o,\n      open: s\n    } = te(),\n    {\n      useLocation: a\n    } = w(),\n    {\n      search: n\n    } = a(),\n    m = Co.parse(n, {\n      ignoreQueryPrefix: !0\n    });\n  return go([\"useUpdatePassword\"], async u => r == null ? void 0 : r({\n    ...m,\n    ...u\n  }), {\n    onSuccess: u => {\n      u !== !1 && u && t(u), o == null || o(\"update-password-error\");\n    },\n    onError: u => {\n      s == null || s({\n        message: (u == null ? void 0 : u.name) || \"Update Password Error\",\n        description: (u == null ? void 0 : u.message) || \"Error while updating password\",\n        key: \"update-password-error\",\n        type: \"error\"\n      });\n    },\n    ...e\n  });\n};\nimport { useContext as xo } from \"react\";\nimport { useQuery as Ro } from \"@tanstack/react-query\";\nvar bt = e => {\n  let {\n    checkAuth: t\n  } = xo(H);\n  return Ro([\"useAuthenticated\", e], async () => {\n    var o;\n    return (o = await (t == null ? void 0 : t(e))) != null ? o : {};\n  }, {\n    retry: !1\n  });\n};\nimport Po from \"react\";\nimport { useMutation as bo } from \"@tanstack/react-query\";\nvar W = () => {\n  let {\n      checkError: e\n    } = Po.useContext(H),\n    {\n      mutate: t\n    } = Ct();\n  return bo([\"useCheckError\"], e, {\n    onError: o => {\n      t({\n        redirectPath: o\n      });\n    }\n  });\n};\nimport { useContext as Do } from \"react\";\nvar vo = () => {\n  let {\n    isProvided: e\n  } = Do(H);\n  return e || !1;\n};\nimport { useQuery as Ao } from \"@tanstack/react-query\";\nvar Oe = e => e / 1e3;\nimport ho from \"lodash/zip\";\nimport Eo from \"lodash/fromPairs\";\nvar ot = function (e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r => r;\n  let [r, ...o] = e;\n  return o.map(s => Eo(ho(r, s))).map((s, a, n) => t.call(void 0, s, a, n));\n};\nimport rr from \"pluralize\";\nimport Dt from \"qs\";\nimport Jt from \"lodash/unionWith\";\nimport Xt from \"lodash/differenceWith\";\nimport Mo from \"warn-once\";\nvar st = e => {\n    let {\n      current: t,\n      pageSize: r,\n      sorter: o,\n      filters: s\n    } = Dt.parse(e.substring(1));\n    return {\n      parsedCurrent: t && Number(t),\n      parsedPageSize: r && Number(r),\n      parsedSorter: o != null ? o : [],\n      parsedFilters: s != null ? s : []\n    };\n  },\n  Uo = e => {\n    let t = Dt.stringify(e);\n    return st(`/${t}`);\n  },\n  at = e => {\n    let t = {\n        skipNulls: !0,\n        arrayFormat: \"indices\",\n        encode: !1\n      },\n      {\n        pagination: r,\n        sorter: o,\n        filters: s,\n        ...a\n      } = e;\n    return Dt.stringify({\n      ...a,\n      ...(r || {}),\n      sorter: o,\n      filters: s\n    }, t);\n  },\n  er = (e, t) => e.operator !== \"and\" && e.operator !== \"or\" && t.operator !== \"and\" && t.operator !== \"or\" ? (\"field\" in e ? e.field : void 0) == (\"field\" in t ? t.field : void 0) && e.operator == t.operator : (\"key\" in e ? e.key : void 0) == (\"key\" in t ? t.key : void 0) && e.operator == t.operator,\n  tr = (e, t) => e.field == t.field,\n  we = function (e, t) {\n    let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return t.filter(s => (s.operator === \"or\" || s.operator === \"and\") && !s.key).length > 1 && Mo(!0, `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. \nFor more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`), Jt(e, t, r, er).filter(s => s.value !== void 0 && s.value !== null && (s.operator !== \"or\" || s.operator === \"or\" && s.value.length !== 0) && (s.operator !== \"and\" || s.operator === \"and\" && s.value.length !== 0));\n  },\n  nt = (e, t) => Jt(e, t, tr).filter(r => r.order !== void 0 && r.order !== null),\n  it = (e, t) => [...Xt(t, e, er), ...e],\n  ut = (e, t) => [...Xt(t, e, tr), ...e],\n  So = (e, t) => {\n    if (!t) return;\n    let r = t.find(o => o.field === e);\n    if (r) return r.order;\n  },\n  Io = function (e, t) {\n    let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"eq\";\n    let o = t == null ? void 0 : t.find(s => {\n      if (s.operator !== \"or\" && s.operator !== \"and\" && \"field\" in s) {\n        let {\n          operator: a,\n          field: n\n        } = s;\n        return n === e && a === r;\n      }\n    });\n    if (o) return o.value || [];\n  };\nvar Lo = e => new Promise((t, r) => {\n  let o = new FileReader(),\n    s = () => {\n      o.result && (o.removeEventListener(\"load\", s, !1), t(o.result));\n    };\n  o.addEventListener(\"load\", s, !1), o.readAsDataURL(e.originFileObj), o.onerror = a => (o.removeEventListener(\"load\", s, !1), r(a));\n});\nvar Qe = function () {\n  let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let t = arguments.length > 1 ? arguments[1] : undefined;\n  let r = Pe(e);\n  return t === \"singular\" ? rr.singular(r) : rr.plural(r);\n};\nvar or = function () {\n  let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return e != null && e.id ? {\n    ...e,\n    id: decodeURIComponent(e.id)\n  } : e;\n};\nvar F = (e, t, r) => {\n  let o = t || \"default\",\n    s = {\n      all: [o],\n      resourceAll: [o, e || \"\"],\n      list: a => [...s.resourceAll, \"list\", {\n        ...a,\n        ...r\n      }],\n      many: a => [...s.resourceAll, \"getMany\", a && a.map(String), {\n        ...r\n      }].filter(n => n !== void 0),\n      detail: a => [...s.resourceAll, \"detail\", a == null ? void 0 : a.toString(), {\n        ...r\n      }],\n      logList: a => [\"logList\", e, a, r].filter(n => n !== void 0)\n    };\n  return s;\n};\nvar vt = (e, t) => !e || !t ? !1 : !!e.find(r => r === t);\nvar wo = e => t => e.parentName ? t.name === e.parentName : !1,\n  We = (e, t) => {\n    var s, a, n, m, C;\n    let r,\n      o = (a = (s = e.options) == null ? void 0 : s.route) != null ? a : e.name;\n    if (e.parentName) {\n      let u = t.find(wo(e));\n      u != null && u.parentName ? r = `${We(u, t)}/${o}` : e.parentName && (r = `${(C = (m = (n = u == null ? void 0 : u.options) == null ? void 0 : n.route) != null ? m : u == null ? void 0 : u.name) != null ? C : e.parentName}/${o}`);\n    } else r = o;\n    return r;\n  };\nvar ct = e => {\n  var n, m, C;\n  let t = [],\n    r = {},\n    o = {},\n    s,\n    a;\n  for (let u = 0; u < e.length; u++) {\n    s = e[u];\n    let l = (C = (m = s.route) != null ? m : (n = s.options) == null ? void 0 : n.route) != null ? C : \"\";\n    r[l] = s, r[l].children = [], o[s.name] = s, o[s.name].children = [];\n  }\n  for (let u in r) r.hasOwnProperty(u) && (a = r[u], a.parentName && o[a.parentName] ? o[a.parentName].children.push(a) : t.push(a));\n  return t;\n};\nvar Pe = e => (e = e.replace(/([a-z]{1})([A-Z]{1})/g, \"$1-$2\"), e = e.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, \"$1-$2$3\"), e = e.toLowerCase().replace(/[_-]+/g, \" \").replace(/\\s{2,}/g, \" \").trim(), e = e.charAt(0).toUpperCase() + e.slice(1), e);\nimport sr from \"react\";\nimport Qo from \"react\";\nvar ht = _ref2 => {\n  let {\n    children: e\n  } = _ref2;\n  return Qo.createElement(\"div\", null, e);\n};\nvar ge = {\n    mutationMode: \"pessimistic\",\n    syncWithLocation: !1,\n    undoableTimeout: 5e3,\n    warnWhenUnsavedChanges: !1,\n    liveMode: \"off\",\n    redirect: {\n      afterCreate: \"list\",\n      afterClone: \"list\",\n      afterEdit: \"list\"\n    }\n  },\n  ee = sr.createContext({\n    hasDashboard: !1,\n    mutationMode: \"pessimistic\",\n    warnWhenUnsavedChanges: !1,\n    syncWithLocation: !1,\n    undoableTimeout: 5e3,\n    Title: void 0,\n    Sider: void 0,\n    Header: void 0,\n    Footer: void 0,\n    Layout: ht,\n    OffLayoutArea: void 0,\n    liveMode: \"off\",\n    onLiveEvent: void 0,\n    options: ge\n  }),\n  ar = _ref3 => {\n    let {\n      hasDashboard: e,\n      mutationMode: t,\n      warnWhenUnsavedChanges: r,\n      syncWithLocation: o,\n      undoableTimeout: s,\n      children: a,\n      DashboardPage: n,\n      Title: m,\n      Layout: C = ht,\n      Header: u,\n      Sider: l,\n      Footer: y,\n      OffLayoutArea: R,\n      LoginPage: f = Et,\n      catchAll: d,\n      liveMode: p = \"off\",\n      onLiveEvent: c,\n      options: i\n    } = _ref3;\n    return sr.createElement(ee.Provider, {\n      value: {\n        hasDashboard: e,\n        mutationMode: t,\n        warnWhenUnsavedChanges: r,\n        syncWithLocation: o,\n        Title: m,\n        undoableTimeout: s,\n        Layout: C,\n        Header: u,\n        Sider: l,\n        Footer: y,\n        OffLayoutArea: R,\n        DashboardPage: n,\n        LoginPage: f,\n        catchAll: d,\n        liveMode: p,\n        onLiveEvent: c,\n        options: i\n      }\n    }, a);\n  };\nvar Mt = function () {\n  let {\n    options: e,\n    disableTelemetry: t,\n    liveMode: r,\n    mutationMode: o,\n    reactQueryClientConfig: s,\n    reactQueryDevtoolConfig: a,\n    syncWithLocation: n,\n    undoableTimeout: m,\n    warnWhenUnsavedChanges: C\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var R, f, d, p, c, i, g, T, x, P, b, v, D, h, S, V, Q, L, U, A, I, Z, oe, ce;\n  let u = {\n      breadcrumb: e == null ? void 0 : e.breadcrumb,\n      mutationMode: (f = (R = e == null ? void 0 : e.mutationMode) != null ? R : o) != null ? f : ge.mutationMode,\n      undoableTimeout: (p = (d = e == null ? void 0 : e.undoableTimeout) != null ? d : m) != null ? p : ge.undoableTimeout,\n      syncWithLocation: (i = (c = e == null ? void 0 : e.syncWithLocation) != null ? c : n) != null ? i : ge.syncWithLocation,\n      warnWhenUnsavedChanges: (T = (g = e == null ? void 0 : e.warnWhenUnsavedChanges) != null ? g : C) != null ? T : ge.warnWhenUnsavedChanges,\n      liveMode: (P = (x = e == null ? void 0 : e.liveMode) != null ? x : r) != null ? P : ge.liveMode,\n      redirect: {\n        afterCreate: (v = (b = e == null ? void 0 : e.redirect) == null ? void 0 : b.afterCreate) != null ? v : ge.redirect.afterCreate,\n        afterClone: (h = (D = e == null ? void 0 : e.redirect) == null ? void 0 : D.afterClone) != null ? h : ge.redirect.afterClone,\n        afterEdit: (V = (S = e == null ? void 0 : e.redirect) == null ? void 0 : S.afterEdit) != null ? V : ge.redirect.afterEdit\n      }\n    },\n    l = (L = (Q = e == null ? void 0 : e.disableTelemetry) != null ? Q : t) != null ? L : !1,\n    y = {\n      clientConfig: (I = (A = (U = e == null ? void 0 : e.reactQuery) == null ? void 0 : U.clientConfig) != null ? A : s) != null ? I : {},\n      devtoolConfig: (ce = (oe = (Z = e == null ? void 0 : e.reactQuery) == null ? void 0 : Z.devtoolConfig) != null ? oe : a) != null ? ce : {}\n    };\n  return {\n    optionsWithDefaults: u,\n    disableTelemetryWithDefault: l,\n    reactQueryWithDefaults: y\n  };\n};\nvar Ut = _ref4 => {\n  let {\n    redirectFromProps: e,\n    action: t,\n    redirectOptions: r\n  } = _ref4;\n  if (e || e === !1) return e;\n  switch (t) {\n    case \"clone\":\n      return r.afterClone;\n    case \"create\":\n      return r.afterCreate;\n    case \"edit\":\n      return r.afterEdit;\n  }\n};\nvar pt = async (e, t, r) => {\n  let o = [];\n  for (let [s, a] of e.entries()) try {\n    let n = await a();\n    o.push(t(n, s));\n  } catch (n) {\n    o.push(r(n, s));\n  }\n  return o;\n};\nvar E = (e, t, r) => {\n  var s;\n  if (t) return t;\n  let o = r == null ? void 0 : r.find(a => a.name === e);\n  return (s = o == null ? void 0 : o.options) != null && s.dataProviderName ? o.options.dataProviderName : \"default\";\n};\nvar xe = async e => ({\n  data: (await Promise.all(e)).map(t => t.data)\n});\nvar lt = e => {\n    let {\n      pagination: t,\n      cursor: r\n    } = e;\n    if (r != null && r.next) return r.next;\n    let o = (t == null ? void 0 : t.current) || 1,\n      s = (t == null ? void 0 : t.pageSize) || 10,\n      a = Math.ceil((e.total || 0) / s);\n    return o < a ? Number(o) + 1 : void 0;\n  },\n  dt = e => {\n    let {\n      pagination: t,\n      cursor: r\n    } = e;\n    if (r != null && r.prev) return r.prev;\n    let o = (t == null ? void 0 : t.current) || 1;\n    return o === 1 ? void 0 : o - 1;\n  };\nvar Ke = _ref5 => {\n  let {\n    resource: e,\n    config: t,\n    queryOptions: r,\n    successNotification: o,\n    errorNotification: s,\n    metaData: a,\n    liveMode: n,\n    onLiveEvent: m,\n    liveParams: C,\n    dataProviderName: u\n  } = _ref5;\n  let {\n      resources: l\n    } = B(),\n    y = k(),\n    R = F(e, E(e, u, l), a),\n    {\n      getList: f\n    } = y(E(e, u, l)),\n    d = M(),\n    {\n      mutate: p\n    } = W(),\n    c = $(),\n    i = (r == null ? void 0 : r.enabled) === void 0 || (r == null ? void 0 : r.enabled) === !0;\n  return be({\n    resource: e,\n    types: [\"*\"],\n    params: {\n      metaData: a,\n      pagination: t == null ? void 0 : t.pagination,\n      hasPagination: t == null ? void 0 : t.hasPagination,\n      sort: t == null ? void 0 : t.sort,\n      filters: t == null ? void 0 : t.filters,\n      subscriptionType: \"useList\",\n      ...C\n    },\n    channel: `resources/${e}`,\n    enabled: i,\n    liveMode: n,\n    onLiveEvent: m\n  }), Ao(R.list(t), _ref6 => {\n    let {\n      queryKey: T,\n      pageParam: x,\n      signal: P\n    } = _ref6;\n    let {\n      hasPagination: b,\n      ...v\n    } = t || {};\n    return f({\n      resource: e,\n      ...v,\n      hasPagination: b,\n      metaData: {\n        ...a,\n        queryContext: {\n          queryKey: T,\n          pageParam: x,\n          signal: P\n        }\n      }\n    });\n  }, {\n    ...r,\n    onSuccess: T => {\n      var P;\n      (P = r == null ? void 0 : r.onSuccess) == null || P.call(r, T);\n      let x = typeof o == \"function\" ? o(T, {\n        metaData: a,\n        config: t\n      }, e) : o;\n      c(x);\n    },\n    onError: T => {\n      var P;\n      p(T), (P = r == null ? void 0 : r.onError) == null || P.call(r, T);\n      let x = typeof s == \"function\" ? s(T, {\n        metaData: a,\n        config: t\n      }, e) : s;\n      c(x, {\n        key: `${e}-useList-notification`,\n        message: d(\"notifications.error\", {\n          statusCode: T.statusCode\n        }, `Error (status code: ${T.statusCode})`),\n        description: T.message,\n        type: \"error\"\n      });\n    }\n  });\n};\nimport { useQuery as Vo } from \"@tanstack/react-query\";\nvar Ge = _ref7 => {\n  let {\n    resource: e,\n    id: t,\n    queryOptions: r,\n    successNotification: o,\n    errorNotification: s,\n    metaData: a,\n    liveMode: n,\n    onLiveEvent: m,\n    liveParams: C,\n    dataProviderName: u\n  } = _ref7;\n  let {\n      resources: l\n    } = B(),\n    y = k(),\n    R = F(e, E(e, u, l), a),\n    {\n      getOne: f\n    } = y(E(e, u, l)),\n    d = M(),\n    {\n      mutate: p\n    } = W(),\n    c = $();\n  return be({\n    resource: e,\n    types: [\"*\"],\n    channel: `resources/${e}`,\n    params: {\n      ids: t ? [t] : [],\n      id: t,\n      metaData: a,\n      subscriptionType: \"useOne\",\n      ...C\n    },\n    enabled: r == null ? void 0 : r.enabled,\n    liveMode: n,\n    onLiveEvent: m\n  }), Vo(R.detail(t), _ref8 => {\n    let {\n      queryKey: g,\n      pageParam: T,\n      signal: x\n    } = _ref8;\n    return f({\n      resource: e,\n      id: t,\n      metaData: {\n        ...a,\n        queryContext: {\n          queryKey: g,\n          pageParam: T,\n          signal: x\n        }\n      }\n    });\n  }, {\n    ...r,\n    onSuccess: g => {\n      var x;\n      (x = r == null ? void 0 : r.onSuccess) == null || x.call(r, g);\n      let T = typeof o == \"function\" ? o(g, {\n        id: t,\n        metaData: a\n      }, e) : o;\n      c(T);\n    },\n    onError: g => {\n      var x;\n      p(g), (x = r == null ? void 0 : r.onError) == null || x.call(r, g);\n      let T = typeof s == \"function\" ? s(g, {\n        id: t,\n        metaData: a\n      }, e) : s;\n      c(T, {\n        key: `${t}-${e}-getOne-notification`,\n        message: d(\"notifications.error\", {\n          statusCode: g.statusCode\n        }, `Error (status code: ${g.statusCode})`),\n        description: g.message,\n        type: \"error\"\n      });\n    }\n  });\n};\nimport { useQuery as Bo } from \"@tanstack/react-query\";\nvar St = _ref9 => {\n  let {\n    resource: e,\n    ids: t,\n    queryOptions: r,\n    successNotification: o,\n    errorNotification: s,\n    metaData: a,\n    liveMode: n,\n    onLiveEvent: m,\n    liveParams: C,\n    dataProviderName: u\n  } = _ref9;\n  let {\n      resources: l\n    } = B(),\n    y = k(),\n    R = F(e, E(e, u, l), a),\n    {\n      getMany: f,\n      getOne: d\n    } = y(E(e, u, l)),\n    p = M(),\n    {\n      mutate: c\n    } = W(),\n    i = $(),\n    g = (r == null ? void 0 : r.enabled) === void 0 || (r == null ? void 0 : r.enabled) === !0;\n  return be({\n    resource: e,\n    types: [\"*\"],\n    params: {\n      ids: t != null ? t : [],\n      metaData: a,\n      subscriptionType: \"useMany\",\n      ...C\n    },\n    channel: `resources/${e}`,\n    enabled: g,\n    liveMode: n,\n    onLiveEvent: m\n  }), Bo(R.many(t), _ref10 => {\n    let {\n      queryKey: x,\n      pageParam: P,\n      signal: b\n    } = _ref10;\n    return f ? f({\n      resource: e,\n      ids: t,\n      metaData: {\n        ...a,\n        queryContext: {\n          queryKey: x,\n          pageParam: P,\n          signal: b\n        }\n      }\n    }) : xe(t.map(v => d({\n      resource: e,\n      id: v,\n      metaData: {\n        ...a,\n        queryContext: {\n          queryKey: x,\n          pageParam: P,\n          signal: b\n        }\n      }\n    })));\n  }, {\n    ...r,\n    onSuccess: x => {\n      var b;\n      (b = r == null ? void 0 : r.onSuccess) == null || b.call(r, x);\n      let P = typeof o == \"function\" ? o(x, t, e) : o;\n      i(P);\n    },\n    onError: x => {\n      var b;\n      c(x), (b = r == null ? void 0 : r.onError) == null || b.call(r, x);\n      let P = typeof s == \"function\" ? s(x, t, e) : s;\n      i(P, {\n        key: `${t[0]}-${e}-getMany-notification`,\n        message: p(\"notifications.error\", {\n          statusCode: x.statusCode\n        }, `Error (status code: ${x.statusCode})`),\n        description: x.message,\n        type: \"error\"\n      });\n    }\n  });\n};\nimport { useMutation as Fo, useQueryClient as $o } from \"@tanstack/react-query\";\nimport Lt, { useReducer as No } from \"react\";\nimport It from \"lodash-es/isEqual\";\nvar mt = Lt.createContext({\n    notifications: [],\n    notificationDispatch: () => !1\n  }),\n  ko = [],\n  Ho = (e, t) => {\n    switch (t.type) {\n      case \"ADD\":\n        return [...e.filter(o => !(It(o.id, t.payload.id) && o.resource == t.payload.resource)), {\n          ...t.payload,\n          isRunning: !0\n        }];\n      case \"REMOVE\":\n        return e.filter(o => !(It(o.id, t.payload.id) && o.resource == t.payload.resource));\n      case \"DECREASE_NOTIFICATION_SECOND\":\n        return e.map(o => It(o.id, t.payload.id) && o.resource == t.payload.resource ? {\n          ...o,\n          seconds: t.payload.seconds - 1e3\n        } : o);\n      default:\n        return e;\n    }\n  },\n  wt = _ref11 => {\n    let {\n      children: e\n    } = _ref11;\n    let [t, r] = No(Ho, ko),\n      o = {\n        notifications: t,\n        notificationDispatch: r\n      };\n    return Lt.createElement(mt.Provider, {\n      value: o\n    }, e, typeof window < \"u\" && t.map(s => Lt.createElement(nr, {\n      key: `${s.id}-${s.resource}-queue`,\n      notification: s\n    })));\n  };\nimport ir from \"pluralize\";\nvar Qt = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      resources: t\n    } = B(),\n    r = $o(),\n    o = k(),\n    {\n      mutationMode: s,\n      undoableTimeout: a\n    } = le(),\n    n = M(),\n    {\n      mutate: m\n    } = W(),\n    C = ne(),\n    {\n      log: u\n    } = Ve(),\n    {\n      notificationDispatch: l\n    } = Ce(),\n    y = $(),\n    R = ie();\n  return Fo(_ref12 => {\n    let {\n      id: d,\n      values: p,\n      resource: c,\n      mutationMode: i,\n      undoableTimeout: g,\n      onCancel: T,\n      metaData: x,\n      dataProviderName: P\n    } = _ref12;\n    let b = i != null ? i : s,\n      v = g != null ? g : a;\n    return b !== \"undoable\" ? o(E(c, P, t)).update({\n      resource: c,\n      id: d,\n      variables: p,\n      metaData: x\n    }) : new Promise((h, S) => {\n      let V = () => {\n          o(E(c, P, t)).update({\n            resource: c,\n            id: d,\n            variables: p,\n            metaData: x\n          }).then(L => h(L)).catch(L => S(L));\n        },\n        Q = () => {\n          S({\n            message: \"mutationCancelled\"\n          });\n        };\n      T && T(Q), l({\n        type: \"ADD\",\n        payload: {\n          id: d,\n          resource: c,\n          cancelMutation: Q,\n          doMutation: V,\n          seconds: v,\n          isSilent: !!T\n        }\n      });\n    });\n  }, {\n    onMutate: async _ref13 => {\n      let {\n        resource: d,\n        id: p,\n        mutationMode: c,\n        values: i,\n        dataProviderName: g\n      } = _ref13;\n      let T = F(d, E(d, g, t)),\n        x = r.getQueriesData(T.resourceAll),\n        P = c != null ? c : s;\n      return await r.cancelQueries(T.resourceAll, void 0, {\n        silent: !0\n      }), P !== \"pessimistic\" && (r.setQueriesData(T.list(), b => {\n        if (!b) return null;\n        let v = b.data.map(D => {\n          var h;\n          return ((h = D.id) == null ? void 0 : h.toString()) === (p == null ? void 0 : p.toString()) ? {\n            id: p,\n            ...D,\n            ...i\n          } : D;\n        });\n        return {\n          ...b,\n          data: v\n        };\n      }), r.setQueriesData(T.many(), b => {\n        if (!b) return null;\n        let v = b.data.map(D => {\n          var h;\n          return ((h = D.id) == null ? void 0 : h.toString()) === (p == null ? void 0 : p.toString()) && (D = {\n            id: p,\n            ...D,\n            ...i\n          }), D;\n        });\n        return {\n          ...b,\n          data: v\n        };\n      }), r.setQueriesData(T.detail(p), b => b ? {\n        ...b,\n        data: {\n          ...b.data,\n          ...i\n        }\n      } : null)), {\n        previousQueries: x,\n        queryKey: T\n      };\n    },\n    onSettled: (d, p, _ref14) => {\n      let {\n        id: c,\n        resource: i,\n        dataProviderName: g,\n        invalidates: T = [\"list\", \"many\", \"detail\"]\n      } = _ref14;\n      R({\n        resource: i,\n        dataProviderName: E(i, g, t),\n        invalidates: T,\n        id: c\n      }), l({\n        type: \"REMOVE\",\n        payload: {\n          id: c,\n          resource: i\n        }\n      });\n    },\n    onSuccess: (d, _ref15, P) => {\n      let {\n        id: p,\n        resource: c,\n        successNotification: i,\n        dataProviderName: g,\n        values: T,\n        metaData: x\n      } = _ref15;\n      var L;\n      let b = ir.singular(c),\n        v = typeof i == \"function\" ? i(d, {\n          id: p,\n          values: T\n        }, c) : i;\n      y(v, {\n        key: `${p}-${c}-notification`,\n        description: n(\"notifications.success\", \"Successful\"),\n        message: n(\"notifications.editSuccess\", {\n          resource: n(`${c}.${c}`, b)\n        }, `Successfully updated ${b}`),\n        type: \"success\"\n      }), C == null || C({\n        channel: `resources/${c}`,\n        type: \"updated\",\n        payload: {\n          ids: (L = d.data) != null && L.id ? [d.data.id] : void 0\n        },\n        date: new Date()\n      });\n      let D;\n      if (P) {\n        let U = r.getQueryData(P.queryKey.detail(p));\n        D = Object.keys(T).reduce((A, I) => {\n          var Z;\n          return A[I] = (Z = U == null ? void 0 : U.data) == null ? void 0 : Z[I], A;\n        }, {});\n      }\n      let {\n        fields: h,\n        operation: S,\n        variables: V,\n        ...Q\n      } = x || {};\n      u == null || u.mutate({\n        action: \"update\",\n        resource: c,\n        data: T,\n        previousData: D,\n        meta: {\n          id: p,\n          dataProviderName: E(c, g, t),\n          ...Q\n        }\n      });\n    },\n    onError: (d, _ref16, T) => {\n      let {\n        id: p,\n        resource: c,\n        errorNotification: i,\n        values: g\n      } = _ref16;\n      if (T) for (let x of T.previousQueries) r.setQueryData(x[0], x[1]);\n      if (d.message !== \"mutationCancelled\") {\n        m == null || m(d);\n        let x = ir.singular(c),\n          P = typeof i == \"function\" ? i(d, {\n            id: p,\n            values: g\n          }, c) : i;\n        y(P, {\n          key: `${p}-${c}-notification`,\n          message: n(\"notifications.editError\", {\n            resource: n(`${c}.${c}`, x),\n            statusCode: d.statusCode\n          }, `Error when updating ${x} (status code: ${d.statusCode})`),\n          description: d.message,\n          type: \"error\"\n        });\n      }\n    },\n    ...e\n  });\n};\nimport { useMutation as Oo } from \"@tanstack/react-query\";\nimport ur from \"pluralize\";\nvar ze = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      mutate: t\n    } = W(),\n    r = k(),\n    o = ie(),\n    {\n      resources: s\n    } = B(),\n    a = M(),\n    n = ne(),\n    {\n      log: m\n    } = Ve(),\n    C = $();\n  return Oo(_ref17 => {\n    let {\n      resource: l,\n      values: y,\n      metaData: R,\n      dataProviderName: f\n    } = _ref17;\n    return r(E(l, f, s)).create({\n      resource: l,\n      variables: y,\n      metaData: R\n    });\n  }, {\n    onSuccess: (l, _ref18) => {\n      let {\n        resource: y,\n        successNotification: R,\n        dataProviderName: f,\n        invalidates: d = [\"list\", \"many\"],\n        values: p,\n        metaData: c\n      } = _ref18;\n      var v, D, h;\n      let i = ur.singular(y),\n        g = typeof R == \"function\" ? R(l, p, y) : R;\n      C(g, {\n        key: `create-${y}-notification`,\n        message: a(\"notifications.createSuccess\", {\n          resource: a(`${y}.${y}`, i)\n        }, `Successfully created ${i}`),\n        description: a(\"notifications.success\", \"Success\"),\n        type: \"success\"\n      }), o({\n        resource: y,\n        dataProviderName: E(y, f, s),\n        invalidates: d\n      }), n == null || n({\n        channel: `resources/${y}`,\n        type: \"created\",\n        payload: {\n          ids: (v = l == null ? void 0 : l.data) != null && v.id ? [l.data.id] : void 0\n        },\n        date: new Date()\n      });\n      let {\n        fields: T,\n        operation: x,\n        variables: P,\n        ...b\n      } = c || {};\n      m == null || m.mutate({\n        action: \"create\",\n        resource: y,\n        data: p,\n        meta: {\n          dataProviderName: E(y, f, s),\n          id: (h = (D = l == null ? void 0 : l.data) == null ? void 0 : D.id) != null ? h : void 0,\n          ...b\n        }\n      });\n    },\n    onError: (l, _ref19) => {\n      let {\n        resource: y,\n        errorNotification: R,\n        values: f\n      } = _ref19;\n      t(l);\n      let d = ur.singular(y),\n        p = typeof R == \"function\" ? R(l, f, y) : R;\n      C(p, {\n        key: `create-${y}-notification`,\n        description: l.message,\n        message: a(\"notifications.createError\", {\n          resource: a(`${y}.${y}`, d),\n          statusCode: l.statusCode\n        }, `There was an error creating ${d} (status code: ${l.statusCode})`),\n        type: \"error\"\n      });\n    },\n    ...e\n  });\n};\nimport { useQueryClient as Wo, useMutation as Ko } from \"@tanstack/react-query\";\nimport cr from \"pluralize\";\nvar Go = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      mutate: t\n    } = W(),\n    r = k(),\n    {\n      resources: o\n    } = B(),\n    s = Wo(),\n    {\n      mutationMode: a,\n      undoableTimeout: n\n    } = le(),\n    {\n      notificationDispatch: m\n    } = Ce(),\n    C = M(),\n    u = ne(),\n    {\n      log: l\n    } = Ve(),\n    y = $(),\n    R = ie();\n  return Ko(_ref20 => {\n    let {\n      id: d,\n      mutationMode: p,\n      undoableTimeout: c,\n      resource: i,\n      onCancel: g,\n      metaData: T,\n      dataProviderName: x,\n      values: P\n    } = _ref20;\n    let b = p != null ? p : a,\n      v = c != null ? c : n;\n    return b !== \"undoable\" ? r(E(i, x, o)).deleteOne({\n      resource: i,\n      id: d,\n      metaData: T,\n      variables: P\n    }) : new Promise((h, S) => {\n      let V = () => {\n          r(E(i, x, o)).deleteOne({\n            resource: i,\n            id: d,\n            metaData: T,\n            variables: P\n          }).then(L => h(L)).catch(L => S(L));\n        },\n        Q = () => {\n          S({\n            message: \"mutationCancelled\"\n          });\n        };\n      g && g(Q), m({\n        type: \"ADD\",\n        payload: {\n          id: d,\n          resource: i,\n          cancelMutation: Q,\n          doMutation: V,\n          seconds: v,\n          isSilent: !!g\n        }\n      });\n    });\n  }, {\n    onMutate: async _ref21 => {\n      let {\n        id: d,\n        resource: p,\n        mutationMode: c,\n        dataProviderName: i\n      } = _ref21;\n      let g = F(p, E(p, i, o)),\n        T = c != null ? c : a;\n      await s.cancelQueries(g.resourceAll, void 0, {\n        silent: !0\n      });\n      let x = s.getQueriesData(g.resourceAll);\n      return T !== \"pessimistic\" && (s.setQueriesData(g.list(), P => P ? {\n        data: P.data.filter(v => {\n          var D;\n          return ((D = v.id) == null ? void 0 : D.toString()) !== d.toString();\n        }),\n        total: P.total - 1\n      } : null), s.setQueriesData(g.many(), P => {\n        if (!P) return null;\n        let b = P.data.filter(v => {\n          var D;\n          return ((D = v.id) == null ? void 0 : D.toString()) !== (d == null ? void 0 : d.toString());\n        });\n        return {\n          ...P,\n          data: b\n        };\n      })), {\n        previousQueries: x,\n        queryKey: g\n      };\n    },\n    onSettled: (d, p, _ref22) => {\n      let {\n        id: c,\n        resource: i,\n        dataProviderName: g,\n        invalidates: T = [\"list\", \"many\"]\n      } = _ref22;\n      R({\n        resource: i,\n        dataProviderName: E(i, g, o),\n        invalidates: T\n      }), m({\n        type: \"REMOVE\",\n        payload: {\n          id: c,\n          resource: i\n        }\n      });\n    },\n    onSuccess: (d, _ref23, x) => {\n      let {\n        id: p,\n        resource: c,\n        successNotification: i,\n        dataProviderName: g,\n        metaData: T\n      } = _ref23;\n      let P = cr.singular(c != null ? c : \"\");\n      s.removeQueries(x == null ? void 0 : x.queryKey.detail(p));\n      let b = typeof i == \"function\" ? i(d, p, c) : i;\n      y(b, {\n        key: `${p}-${c}-notification`,\n        description: C(\"notifications.success\", \"Success\"),\n        message: C(\"notifications.deleteSuccess\", {\n          resource: C(`${c}.${c}`, P)\n        }, `Successfully deleted a ${P}`),\n        type: \"success\"\n      }), u == null || u({\n        channel: `resources/${c}`,\n        type: \"deleted\",\n        payload: {\n          ids: p ? [p] : []\n        },\n        date: new Date()\n      });\n      let {\n        fields: v,\n        operation: D,\n        variables: h,\n        ...S\n      } = T || {};\n      l == null || l.mutate({\n        action: \"delete\",\n        resource: c,\n        meta: {\n          id: p,\n          dataProviderName: E(c, g, o),\n          ...S\n        }\n      }), s.removeQueries(x == null ? void 0 : x.queryKey.detail(p));\n    },\n    onError: (d, _ref24, g) => {\n      let {\n        id: p,\n        resource: c,\n        errorNotification: i\n      } = _ref24;\n      if (g) for (let T of g.previousQueries) s.setQueryData(T[0], T[1]);\n      if (d.message !== \"mutationCancelled\") {\n        t(d);\n        let T = cr.singular(c != null ? c : \"\"),\n          x = typeof i == \"function\" ? i(d, p, c) : i;\n        y(x, {\n          key: `${p}-${c}-notification`,\n          message: C(\"notifications.deleteError\", {\n            resource: T,\n            statusCode: d.statusCode\n          }, `Error (status code: ${d.statusCode})`),\n          description: d.message,\n          type: \"error\"\n        });\n      }\n    },\n    ...e\n  });\n};\nimport { useMutation as zo } from \"@tanstack/react-query\";\nimport _o from \"pluralize\";\nvar At = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let t = k(),\n    {\n      resources: r\n    } = B(),\n    o = M(),\n    s = ne(),\n    a = $(),\n    n = ie();\n  return zo(_ref25 => {\n    let {\n      resource: C,\n      values: u,\n      metaData: l,\n      dataProviderName: y\n    } = _ref25;\n    let R = t(E(C, y, r));\n    return R.createMany ? R.createMany({\n      resource: C,\n      variables: u,\n      metaData: l\n    }) : xe(u.map(f => R.create({\n      resource: C,\n      variables: f,\n      metaData: l\n    })));\n  }, {\n    onSuccess: (C, _ref26) => {\n      let {\n        resource: u,\n        successNotification: l,\n        dataProviderName: y,\n        invalidates: R = [\"list\", \"many\"],\n        values: f\n      } = _ref26;\n      let d = _o.plural(u),\n        p = typeof l == \"function\" ? l(C, f, u) : l;\n      a(p, {\n        key: `createMany-${u}-notification`,\n        message: o(\"notifications.createSuccess\", {\n          resource: o(`${u}.${u}`, u)\n        }, `Successfully created ${d}`),\n        description: o(\"notifications.success\", \"Success\"),\n        type: \"success\"\n      }), n({\n        resource: u,\n        dataProviderName: E(u, y, r),\n        invalidates: R\n      });\n      let c = C == null ? void 0 : C.data.filter(i => (i == null ? void 0 : i.id) !== void 0).map(i => i.id);\n      s == null || s({\n        channel: `resources/${u}`,\n        type: \"created\",\n        payload: {\n          ids: c\n        },\n        date: new Date()\n      });\n    },\n    onError: (C, _ref27) => {\n      let {\n        resource: u,\n        errorNotification: l,\n        values: y\n      } = _ref27;\n      let R = typeof l == \"function\" ? l(C, y, u) : l;\n      a(R, {\n        key: `createMany-${u}-notification`,\n        description: C.message,\n        message: o(\"notifications.createError\", {\n          resource: o(`${u}.${u}`, u),\n          statusCode: C.statusCode\n        }, `There was an error creating ${u} (status code: ${C.statusCode}`),\n        type: \"error\"\n      });\n    },\n    ...e\n  });\n};\nimport { useMutation as jo, useQueryClient as qo } from \"@tanstack/react-query\";\nimport pr from \"pluralize\";\nvar Yo = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      resources: t\n    } = B(),\n    r = qo(),\n    o = k(),\n    s = M(),\n    {\n      mutationMode: a,\n      undoableTimeout: n\n    } = le(),\n    {\n      mutate: m\n    } = W(),\n    {\n      notificationDispatch: C\n    } = Ce(),\n    u = ne(),\n    l = $(),\n    y = ie();\n  return jo(_ref28 => {\n    let {\n      ids: f,\n      values: d,\n      resource: p,\n      onCancel: c,\n      mutationMode: i,\n      undoableTimeout: g,\n      metaData: T,\n      dataProviderName: x\n    } = _ref28;\n    let P = i != null ? i : a,\n      b = g != null ? g : n,\n      v = o(E(p, x, t)),\n      D = () => v.updateMany ? v.updateMany({\n        resource: p,\n        ids: f,\n        variables: d,\n        metaData: T\n      }) : xe(f.map(S => v.update({\n        resource: p,\n        id: S,\n        variables: d,\n        metaData: T\n      })));\n    return P !== \"undoable\" ? D() : new Promise((S, V) => {\n      let Q = () => {\n          D().then(U => S(U)).catch(U => V(U));\n        },\n        L = () => {\n          V({\n            message: \"mutationCancelled\"\n          });\n        };\n      c && c(L), C({\n        type: \"ADD\",\n        payload: {\n          id: f,\n          resource: p,\n          cancelMutation: L,\n          doMutation: Q,\n          seconds: b,\n          isSilent: !!c\n        }\n      });\n    });\n  }, {\n    onMutate: async _ref29 => {\n      let {\n        resource: f,\n        ids: d,\n        values: p,\n        mutationMode: c,\n        dataProviderName: i,\n        metaData: g\n      } = _ref29;\n      let T = F(f, E(f, i, t), g),\n        x = c != null ? c : a;\n      await r.cancelQueries(T.resourceAll, void 0, {\n        silent: !0\n      });\n      let P = r.getQueriesData(T.resourceAll);\n      if (x !== \"pessimistic\") {\n        r.setQueriesData(T.list(), b => {\n          if (!b) return null;\n          let v = b.data.map(D => D.id !== void 0 && d.filter(h => h !== void 0).map(String).includes(D.id.toString()) ? {\n            ...D,\n            ...p\n          } : D);\n          return {\n            ...b,\n            data: v\n          };\n        }), r.setQueriesData(T.many(), b => {\n          if (!b) return null;\n          let v = b.data.map(D => D.id !== void 0 && d.filter(h => h !== void 0).map(String).includes(D.id.toString()) ? {\n            ...D,\n            ...p\n          } : D);\n          return {\n            ...b,\n            data: v\n          };\n        });\n        for (let b of d) r.setQueriesData(T.detail(b), v => {\n          if (!v) return null;\n          let D = {\n            ...v.data,\n            ...p\n          };\n          return {\n            ...v,\n            data: D\n          };\n        });\n      }\n      return {\n        previousQueries: P,\n        queryKey: T\n      };\n    },\n    onSettled: (f, d, _ref30) => {\n      let {\n        ids: p,\n        resource: c,\n        dataProviderName: i\n      } = _ref30;\n      y({\n        resource: c,\n        invalidates: [\"list\", \"many\"],\n        dataProviderName: E(c, i, t)\n      }), p.forEach(g => y({\n        resource: c,\n        invalidates: [\"detail\"],\n        dataProviderName: E(c, i, t),\n        id: g\n      })), C({\n        type: \"REMOVE\",\n        payload: {\n          id: p,\n          resource: c\n        }\n      });\n    },\n    onSuccess: (f, _ref31) => {\n      let {\n        ids: d,\n        resource: p,\n        successNotification: c,\n        values: i\n      } = _ref31;\n      let g = pr.singular(p),\n        T = typeof c == \"function\" ? c(f, {\n          ids: d,\n          values: i\n        }, p) : c;\n      l(T, {\n        key: `${d}-${p}-notification`,\n        description: s(\"notifications.success\", \"Successful\"),\n        message: s(\"notifications.editSuccess\", {\n          resource: s(`${p}.${p}`, p)\n        }, `Successfully updated ${g}`),\n        type: \"success\"\n      }), u == null || u({\n        channel: `resources/${p}`,\n        type: \"updated\",\n        payload: {\n          ids: d.map(String)\n        },\n        date: new Date()\n      });\n    },\n    onError: (f, _ref32, g) => {\n      let {\n        ids: d,\n        resource: p,\n        errorNotification: c,\n        values: i\n      } = _ref32;\n      if (g) for (let T of g.previousQueries) r.setQueryData(T[0], T[1]);\n      if (f.message !== \"mutationCancelled\") {\n        m == null || m(f);\n        let T = pr.singular(p),\n          x = typeof c == \"function\" ? c(f, {\n            ids: d,\n            values: i\n          }, p) : c;\n        l(x, {\n          key: `${d}-${p}-updateMany-error-notification`,\n          message: s(\"notifications.editError\", {\n            resource: T,\n            statusCode: f.statusCode\n          }, `Error when updating ${T} (status code: ${f.statusCode})`),\n          description: f.message,\n          type: \"error\"\n        });\n      }\n    },\n    ...e\n  });\n};\nimport { useQueryClient as Zo, useMutation as Jo } from \"@tanstack/react-query\";\nimport Xo from \"pluralize\";\nvar es = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      mutate: t\n    } = W(),\n    {\n      mutationMode: r,\n      undoableTimeout: o\n    } = le(),\n    s = k(),\n    {\n      notificationDispatch: a\n    } = Ce(),\n    n = M(),\n    m = ne(),\n    C = $(),\n    u = ie(),\n    {\n      resources: l\n    } = B(),\n    y = Zo();\n  return Jo(_ref33 => {\n    let {\n      resource: f,\n      ids: d,\n      mutationMode: p,\n      undoableTimeout: c,\n      onCancel: i,\n      metaData: g,\n      dataProviderName: T,\n      values: x\n    } = _ref33;\n    let P = p != null ? p : r,\n      b = c != null ? c : o,\n      v = s(E(f, T, l)),\n      D = () => v.deleteMany ? v.deleteMany({\n        resource: f,\n        ids: d,\n        metaData: g,\n        variables: x\n      }) : xe(d.map(S => v.deleteOne({\n        resource: f,\n        id: S,\n        metaData: g,\n        variables: x\n      })));\n    return P !== \"undoable\" ? D() : new Promise((S, V) => {\n      let Q = () => {\n          D().then(U => S(U)).catch(U => V(U));\n        },\n        L = () => {\n          V({\n            message: \"mutationCancelled\"\n          });\n        };\n      i && i(L), a({\n        type: \"ADD\",\n        payload: {\n          id: d,\n          resource: f,\n          cancelMutation: L,\n          doMutation: Q,\n          seconds: b,\n          isSilent: !!i\n        }\n      });\n    });\n  }, {\n    onMutate: async _ref34 => {\n      let {\n        ids: f,\n        resource: d,\n        mutationMode: p,\n        dataProviderName: c\n      } = _ref34;\n      let i = F(d, E(d, c, l)),\n        g = p != null ? p : r;\n      await y.cancelQueries(i.resourceAll, void 0, {\n        silent: !0\n      });\n      let T = y.getQueriesData(i.resourceAll);\n      if (g !== \"pessimistic\") {\n        y.setQueriesData(i.list(), x => x ? {\n          data: x.data.filter(b => b.id && !f.map(String).includes(b.id.toString())),\n          total: x.total - 1\n        } : null), y.setQueriesData(i.many(), x => {\n          if (!x) return null;\n          let P = x.data.filter(b => b.id ? !f.map(String).includes(b.id.toString()) : !1);\n          return {\n            ...x,\n            data: P\n          };\n        });\n        for (let x of f) y.setQueriesData(i.detail(x), P => !P || P.data.id == x ? null : {\n          ...P\n        });\n      }\n      return {\n        previousQueries: T,\n        queryKey: i\n      };\n    },\n    onSettled: (f, d, _ref35) => {\n      let {\n        resource: p,\n        ids: c,\n        dataProviderName: i,\n        invalidates: g = [\"list\", \"many\"]\n      } = _ref35;\n      u({\n        resource: p,\n        dataProviderName: E(p, i, l),\n        invalidates: g\n      }), a({\n        type: \"REMOVE\",\n        payload: {\n          id: c,\n          resource: p\n        }\n      });\n    },\n    onSuccess: (f, _ref36, i) => {\n      let {\n        ids: d,\n        resource: p,\n        successNotification: c\n      } = _ref36;\n      d.forEach(T => y.removeQueries(i == null ? void 0 : i.queryKey.detail(T)));\n      let g = typeof c == \"function\" ? c(f, d, p) : c;\n      C(g, {\n        key: `${d}-${p}-notification`,\n        description: n(\"notifications.success\", \"Success\"),\n        message: n(\"notifications.deleteSuccess\", {\n          resource: n(`${p}.${p}`, p)\n        }, `Successfully deleted ${p}`),\n        type: \"success\"\n      }), m == null || m({\n        channel: `resources/${p}`,\n        type: \"deleted\",\n        payload: {\n          ids: d\n        },\n        date: new Date()\n      }), d.forEach(T => y.removeQueries(i == null ? void 0 : i.queryKey.detail(T)));\n    },\n    onError: (f, _ref37, i) => {\n      let {\n        ids: d,\n        resource: p,\n        errorNotification: c\n      } = _ref37;\n      if (i) for (let g of i.previousQueries) y.setQueryData(g[0], g[1]);\n      if (f.message !== \"mutationCancelled\") {\n        t(f);\n        let g = Xo.singular(p),\n          T = typeof c == \"function\" ? c(f, d, p) : c;\n        C(T, {\n          key: `${d}-${p}-notification`,\n          message: n(\"notifications.deleteError\", {\n            resource: g,\n            statusCode: f.statusCode\n          }, `Error (status code: ${f.statusCode})`),\n          description: f.message,\n          type: \"error\"\n        });\n      }\n    },\n    ...e\n  });\n};\nvar ts = e => {\n  let t = k(),\n    {\n      getApiUrl: r\n    } = t(e);\n  return r();\n};\nimport { useQuery as rs } from \"@tanstack/react-query\";\nvar os = _ref38 => {\n  let {\n    url: e,\n    method: t,\n    config: r,\n    queryOptions: o,\n    successNotification: s,\n    errorNotification: a,\n    metaData: n,\n    dataProviderName: m\n  } = _ref38;\n  let C = k(),\n    {\n      custom: u\n    } = C(m),\n    {\n      mutate: l\n    } = W(),\n    y = M(),\n    R = $();\n  if (u) return rs([m, \"custom\", t, e, {\n    ...r,\n    ...n\n  }], _ref39 => {\n    let {\n      queryKey: d,\n      pageParam: p,\n      signal: c\n    } = _ref39;\n    return u({\n      url: e,\n      method: t,\n      ...r,\n      metaData: {\n        ...n,\n        queryContext: {\n          queryKey: d,\n          pageParam: p,\n          signal: c\n        }\n      }\n    });\n  }, {\n    ...o,\n    onSuccess: d => {\n      var c;\n      (c = o == null ? void 0 : o.onSuccess) == null || c.call(o, d);\n      let p = typeof s == \"function\" ? s(d, {\n        ...r,\n        ...n\n      }) : s;\n      R(p);\n    },\n    onError: d => {\n      var c;\n      l(d), (c = o == null ? void 0 : o.onError) == null || c.call(o, d);\n      let p = typeof a == \"function\" ? a(d, {\n        ...r,\n        ...n\n      }) : a;\n      R(p, {\n        key: `${t}-notification`,\n        message: y(\"notifications.error\", {\n          statusCode: d.statusCode\n        }, `Error (status code: ${d.statusCode})`),\n        description: d.message,\n        type: \"error\"\n      });\n    }\n  });\n  throw Error(\"Not implemented custom on data provider.\");\n};\nimport { useMutation as ss } from \"@tanstack/react-query\";\nvar as = function () {\n  let {\n    mutationOptions: e\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      mutate: t\n    } = W(),\n    r = $(),\n    o = k(),\n    s = M();\n  return ss(_ref40 => {\n    let {\n      url: n,\n      method: m,\n      values: C,\n      metaData: u,\n      dataProviderName: l,\n      config: y\n    } = _ref40;\n    let {\n      custom: R\n    } = o(l);\n    if (R) return R({\n      url: n,\n      method: m,\n      payload: C,\n      metaData: u,\n      headers: {\n        ...(y == null ? void 0 : y.headers)\n      }\n    });\n    throw Error(\"Not implemented custom on data provider.\");\n  }, {\n    onSuccess: (n, _ref41) => {\n      let {\n        successNotification: m,\n        config: C,\n        metaData: u\n      } = _ref41;\n      let l = typeof m == \"function\" ? m(n, {\n        ...C,\n        ...u\n      }) : m;\n      r(l);\n    },\n    onError: (n, _ref42) => {\n      let {\n        errorNotification: m,\n        method: C,\n        config: u,\n        metaData: l\n      } = _ref42;\n      t(n);\n      let y = typeof m == \"function\" ? m(n, {\n        ...u,\n        ...l\n      }) : m;\n      r(y, {\n        key: `${C}-notification`,\n        message: s(\"notifications.error\", {\n          statusCode: n.statusCode\n        }, `Error (status code: ${n.statusCode})`),\n        description: n.message,\n        type: \"error\"\n      });\n    },\n    ...e\n  });\n};\nimport { useCallback as is, useContext as us } from \"react\";\nimport lr from \"react\";\nvar ns = () => ({\n    default: {\n      create: () => Promise.resolve({\n        data: {\n          id: 1\n        }\n      }),\n      createMany: () => Promise.resolve({\n        data: []\n      }),\n      deleteOne: () => Promise.resolve({\n        data: {\n          id: 1\n        }\n      }),\n      deleteMany: () => Promise.resolve({\n        data: []\n      }),\n      getList: () => Promise.resolve({\n        data: [],\n        total: 0\n      }),\n      getMany: () => Promise.resolve({\n        data: []\n      }),\n      getOne: () => Promise.resolve({\n        data: {\n          id: 1\n        }\n      }),\n      update: () => Promise.resolve({\n        data: {\n          id: 1\n        }\n      }),\n      updateMany: () => Promise.resolve({\n        data: []\n      }),\n      custom: () => Promise.resolve({\n        data: {}\n      }),\n      getApiUrl: () => \"\"\n    }\n  }),\n  _e = lr.createContext(ns()),\n  dr = _ref43 => {\n    let {\n      children: e,\n      ...t\n    } = _ref43;\n    let r;\n    return !t.getList || !t.getOne ? r = t : r = {\n      default: t\n    }, lr.createElement(_e.Provider, {\n      value: r\n    }, e);\n  };\nvar k = () => {\n  let e = us(_e);\n  return is(r => {\n    if (r) {\n      if (!e[r]) throw new Error(`\"${r}\" Data provider not found`);\n      return e[r];\n    }\n    if (e.default) return e.default;\n    throw new Error('There is no \"default\" data provider. Please pass dataProviderName.');\n  }, [e]);\n};\nimport { useInfiniteQuery as cs } from \"@tanstack/react-query\";\nvar ps = _ref44 => {\n  let {\n    resource: e,\n    config: t,\n    queryOptions: r,\n    successNotification: o,\n    errorNotification: s,\n    metaData: a,\n    liveMode: n,\n    onLiveEvent: m,\n    liveParams: C,\n    dataProviderName: u\n  } = _ref44;\n  let {\n      resources: l\n    } = B(),\n    y = k(),\n    R = F(e, E(e, u, l), a),\n    {\n      getList: f\n    } = y(E(e, u, l)),\n    d = M(),\n    {\n      mutate: p\n    } = W(),\n    c = $(),\n    i = (r == null ? void 0 : r.enabled) === void 0 || (r == null ? void 0 : r.enabled) === !0;\n  return be({\n    resource: e,\n    types: [\"*\"],\n    params: {\n      metaData: a,\n      pagination: t == null ? void 0 : t.pagination,\n      hasPagination: t == null ? void 0 : t.hasPagination,\n      sort: t == null ? void 0 : t.sort,\n      filters: t == null ? void 0 : t.filters,\n      subscriptionType: \"useList\",\n      ...C\n    },\n    channel: `resources/${e}`,\n    enabled: i,\n    liveMode: n,\n    onLiveEvent: m\n  }), cs(R.list(t), _ref45 => {\n    let {\n      queryKey: T,\n      pageParam: x,\n      signal: P\n    } = _ref45;\n    let {\n        hasPagination: b,\n        ...v\n      } = t || {},\n      D = {\n        ...(t == null ? void 0 : t.pagination),\n        current: x\n      };\n    return f({\n      resource: e,\n      ...v,\n      pagination: D,\n      hasPagination: b,\n      metaData: {\n        ...a,\n        queryContext: {\n          queryKey: T,\n          pageParam: x,\n          signal: P\n        }\n      }\n    }).then(_ref46 => {\n      let {\n        data: h,\n        total: S,\n        ...V\n      } = _ref46;\n      return {\n        data: h,\n        total: S,\n        pagination: D,\n        ...V\n      };\n    });\n  }, {\n    getNextPageParam: T => lt(T),\n    getPreviousPageParam: T => dt(T),\n    ...r,\n    onSuccess: T => {\n      var P;\n      (P = r == null ? void 0 : r.onSuccess) == null || P.call(r, T);\n      let x = typeof o == \"function\" ? o(T, {\n        metaData: a,\n        config: t\n      }, e) : o;\n      c(x);\n    },\n    onError: T => {\n      var P;\n      p(T), (P = r == null ? void 0 : r.onError) == null || P.call(r, T);\n      let x = typeof s == \"function\" ? s(T, {\n        metaData: a,\n        config: t\n      }, e) : s;\n      c(x, {\n        key: `${e}-useInfiniteList-notification`,\n        message: d(\"notifications.error\", {\n          statusCode: T.statusCode\n        }, `Error (status code: ${T.statusCode})`),\n        description: T.message,\n        type: \"error\"\n      });\n    }\n  });\n};\nimport { useContext as yr, useEffect as ls } from \"react\";\nimport { useQueryClient as ds } from \"@tanstack/react-query\";\nimport mr from \"react\";\nvar Re = mr.createContext(void 0),\n  fr = _ref47 => {\n    let {\n      liveProvider: e,\n      children: t\n    } = _ref47;\n    return mr.createElement(Re.Provider, {\n      value: e\n    }, t);\n  };\nvar be = _ref48 => {\n  let {\n    resource: e,\n    params: t,\n    channel: r,\n    types: o,\n    enabled: s = !0,\n    liveMode: a,\n    onLiveEvent: n\n  } = _ref48;\n  let m = ds(),\n    C = F(e),\n    u = yr(Re),\n    {\n      liveMode: l,\n      onLiveEvent: y\n    } = yr(ee),\n    R = a != null ? a : l;\n  ls(() => {\n    let f;\n    return R && R !== \"off\" && s && (f = u == null ? void 0 : u.subscribe({\n      channel: r,\n      params: {\n        resource: e,\n        ...t\n      },\n      types: o,\n      callback: d => {\n        R === \"auto\" && m.invalidateQueries(C.resourceAll), n == null || n(d), y == null || y(d);\n      }\n    })), () => {\n      f && (u == null || u.unsubscribe(f));\n    };\n  }, [s]);\n};\nimport { useContext as ms } from \"react\";\nvar Tr = e => {\n  let {\n    liveMode: t\n  } = ms(ee);\n  return e != null ? e : t;\n};\nimport { useContext as fs, useEffect as ys } from \"react\";\nvar Sp = _ref49 => {\n  let {\n    params: e,\n    channel: t,\n    types: r = [\"*\"],\n    enabled: o = !0,\n    onLiveEvent: s\n  } = _ref49;\n  let a = fs(Re);\n  ys(() => {\n    let n;\n    return o && (n = a == null ? void 0 : a.subscribe({\n      channel: t,\n      params: e,\n      types: r,\n      callback: s\n    })), () => {\n      n && (a == null || a.unsubscribe(n));\n    };\n  }, [o]);\n};\nimport { useContext as Ts } from \"react\";\nvar ne = () => {\n  let e = Ts(Re);\n  return e == null ? void 0 : e.publish;\n};\nimport { useContext as gs } from \"react\";\nimport gr from \"react\";\nvar Ue = gr.createContext({\n    resources: []\n  }),\n  Cr = _ref50 => {\n    let {\n      resources: e,\n      children: t\n    } = _ref50;\n    return gr.createElement(Ue.Provider, {\n      value: {\n        resources: e\n      }\n    }, t);\n  };\nvar B = function () {\n  let {\n    resourceName: e,\n    resourceNameOrRouteName: t,\n    recordItemId: r\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      resources: o\n    } = gs(Ue),\n    s = J(),\n    {\n      useParams: a\n    } = w(),\n    n = a(),\n    m = s(t != null ? t : n.resource),\n    C = e != null ? e : m.name,\n    u = r != null ? r : n.id;\n  return {\n    resources: o,\n    resource: m,\n    resourceName: C,\n    id: u,\n    action: n.action\n  };\n};\nimport { useContext as Cs, useCallback as xs } from \"react\";\nvar J = () => {\n  let {\n    resources: e\n  } = Cs(Ue);\n  return xs(r => {\n    let o = e.find(s => s.route === r);\n    if (!o) {\n      let s = e.find(a => a.name === r);\n      return s != null ? s : {\n        name: r,\n        route: r\n      };\n    }\n    return o;\n  }, [e]);\n};\nimport { useContext as Rs } from \"react\";\nvar Ce = () => {\n  let {\n    notifications: e,\n    notificationDispatch: t\n  } = Rs(mt);\n  return {\n    notifications: e,\n    notificationDispatch: t\n  };\n};\nimport { useContext as Ds } from \"react\";\nimport Ps, { createContext as bs } from \"react\";\nvar je = bs({}),\n  xr = _ref51 => {\n    let {\n      open: e,\n      close: t,\n      children: r\n    } = _ref51;\n    return Ps.createElement(je.Provider, {\n      value: {\n        open: e,\n        close: t\n      }\n    }, r);\n  };\nvar te = () => {\n  let {\n    open: e,\n    close: t\n  } = Ds(je);\n  return {\n    open: e,\n    close: t\n  };\n};\nimport { useCallback as vs } from \"react\";\nvar $ = () => {\n  let {\n    open: e\n  } = te();\n  return vs((r, o) => {\n    r !== !1 && (r ? e == null || e(r) : o && (e == null || e(o)));\n  }, []);\n};\nimport { useCallback as hs, useContext as Es } from \"react\";\nimport Rr from \"react\";\nvar de = Rr.createContext({}),\n  Pr = _ref52 => {\n    let {\n      children: e,\n      i18nProvider: t\n    } = _ref52;\n    return Rr.createElement(de.Provider, {\n      value: {\n        i18nProvider: t\n      }\n    }, e);\n  };\nvar Ms = () => {\n  let {\n    i18nProvider: e\n  } = Es(de);\n  return hs(t => e == null ? void 0 : e.changeLocale(t), []);\n};\nimport { useContext as Us, useMemo as Ss } from \"react\";\nvar M = () => {\n  let {\n    i18nProvider: e\n  } = Us(de);\n  return Ss(() => {\n    function r(o, s, a) {\n      var n, m;\n      return (m = (n = e == null ? void 0 : e.translate(o, s, a)) != null ? n : a) != null ? m : typeof s == \"string\" && typeof a > \"u\" ? s : o;\n    }\n    return r;\n  }, [e]);\n};\nimport { useContext as Is, useCallback as Ls } from \"react\";\nvar ws = () => {\n  let {\n    i18nProvider: e\n  } = Is(de);\n  return Ls(() => e == null ? void 0 : e.getLocale(), []);\n};\nimport { useContext as Qs } from \"react\";\nvar le = () => {\n  let {\n    mutationMode: e,\n    undoableTimeout: t\n  } = Qs(ee);\n  return {\n    mutationMode: e,\n    undoableTimeout: t\n  };\n};\nimport { useContext as vr } from \"react\";\nimport br, { useState as As } from \"react\";\nvar Vt = br.createContext({}),\n  Dr = _ref53 => {\n    let {\n      children: e\n    } = _ref53;\n    let [t, r] = As(!1);\n    return br.createElement(Vt.Provider, {\n      value: {\n        warnWhen: t,\n        setWarnWhen: r\n      }\n    }, e);\n  };\nvar qe = () => {\n  let {\n      warnWhenUnsavedChanges: e\n    } = vr(ee),\n    {\n      warnWhen: t,\n      setWarnWhen: r\n    } = vr(Vt);\n  return {\n    warnWhenUnsavedChanges: e,\n    warnWhen: Boolean(t),\n    setWarnWhen: r != null ? r : () => {}\n  };\n};\nimport { useContext as Vs } from \"react\";\nvar Bt = () => {\n  let {\n    syncWithLocation: e\n  } = Vs(ee);\n  return {\n    syncWithLocation: e\n  };\n};\nimport { useContext as Bs } from \"react\";\nvar Ns = () => {\n  let {\n    Title: e\n  } = Bs(ee);\n  return e;\n};\nimport { useContext as ks } from \"react\";\nvar Se = () => {\n  let {\n    Footer: e,\n    Header: t,\n    Layout: r,\n    OffLayoutArea: o,\n    Sider: s,\n    Title: a,\n    hasDashboard: n,\n    mutationMode: m,\n    syncWithLocation: C,\n    undoableTimeout: u,\n    warnWhenUnsavedChanges: l,\n    DashboardPage: y,\n    LoginPage: R,\n    catchAll: f,\n    options: d\n  } = ks(ee);\n  return {\n    Footer: e,\n    Header: t,\n    Layout: r,\n    OffLayoutArea: o,\n    Sider: s,\n    Title: a,\n    hasDashboard: n,\n    mutationMode: m,\n    syncWithLocation: C,\n    undoableTimeout: u,\n    warnWhenUnsavedChanges: l,\n    DashboardPage: y,\n    LoginPage: R,\n    catchAll: f,\n    options: d\n  };\n};\nimport { useState as Hs } from \"react\";\nimport { ExportToCsv as Fs } from \"export-to-csv-fix-source-map\";\nvar cd = function () {\n  let {\n    resourceName: e,\n    sorter: t,\n    filters: r,\n    maxItemCount: o,\n    pageSize: s = 20,\n    mapData: a = l => l,\n    exportOptions: n,\n    metaData: m,\n    dataProviderName: C,\n    onError: u\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let [l, y] = Hs(!1),\n    {\n      resources: R\n    } = B(),\n    f = J(),\n    d = k(),\n    {\n      useParams: p\n    } = w(),\n    {\n      resource: c\n    } = p(),\n    {\n      name: i\n    } = f(c);\n  e && (i = e);\n  let g = `${Qe(i, \"plural\")}-${new Date().toLocaleString()}`,\n    {\n      getList: T\n    } = d(E(i, C, R));\n  return {\n    isLoading: l,\n    triggerExport: async () => {\n      y(!0);\n      let P = [],\n        b = 1,\n        v = !0;\n      for (; v;) try {\n        let {\n          data: h,\n          total: S\n        } = await T({\n          resource: i,\n          filters: r,\n          sort: t,\n          pagination: {\n            current: b,\n            pageSize: s\n          },\n          metaData: m\n        });\n        b++, P.push(...h), o && P.length >= o && (P = P.slice(0, o), v = !1), S === P.length && (v = !1);\n      } catch (h) {\n        y(!1), v = !1, u == null || u(h);\n        return;\n      }\n      new Fs({\n        filename: g,\n        useKeysAsHeaders: !0,\n        ...n\n      }).generateCsv(P.map(a)), y(!1);\n    }\n  };\n};\nimport hr from \"react\";\nvar Td = function () {\n  let {\n    resource: e,\n    action: t,\n    id: r,\n    onMutationSuccess: o,\n    onMutationError: s,\n    redirect: a,\n    successNotification: n,\n    errorNotification: m,\n    metaData: C,\n    mutationMode: u,\n    liveMode: l,\n    onLiveEvent: y,\n    liveParams: R,\n    undoableTimeout: f,\n    dataProviderName: d,\n    invalidates: p,\n    queryOptions: c,\n    createMutationOptions: i,\n    updateMutationOptions: g\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var rt;\n  let {\n      options: T\n    } = Se(),\n    {\n      useParams: x\n    } = w(),\n    {\n      resource: P,\n      action: b,\n      id: v\n    } = x(),\n    D = !e || e === P ? r != null ? r : v : r,\n    [h, S] = hr.useState(D);\n  hr.useEffect(() => {\n    D !== h && S(r);\n  }, [r]);\n  let V = e != null ? e : P,\n    Q = (rt = t != null ? t : b === \"show\" ? \"create\" : b) != null ? rt : \"create\",\n    U = J()(V),\n    {\n      mutationMode: A\n    } = le(),\n    I = u != null ? u : A,\n    Z = Q === \"create\",\n    oe = Q === \"edit\",\n    ce = Q === \"clone\",\n    K = Ut({\n      redirectFromProps: a,\n      action: Q,\n      redirectOptions: T.redirect\n    }),\n    j = h !== void 0 && (oe || ce),\n    pe = Ge({\n      resource: U.name,\n      id: h != null ? h : \"\",\n      queryOptions: {\n        enabled: j,\n        ...c\n      },\n      liveMode: l,\n      onLiveEvent: y,\n      liveParams: R,\n      metaData: C,\n      dataProviderName: d\n    }),\n    {\n      isFetching: O\n    } = pe,\n    fe = ze({\n      mutationOptions: i\n    }),\n    {\n      mutate: ve,\n      isLoading: Xe\n    } = fe,\n    ye = Qt({\n      mutationOptions: g\n    }),\n    {\n      mutate: et,\n      isLoading: Tt\n    } = ye,\n    {\n      setWarnWhen: tt\n    } = qe(),\n    he = Er();\n  return {\n    ...(Z || ce ? {\n      formLoading: O || Xe,\n      mutationResult: fe,\n      onFinish: async se => {\n        tt(!1);\n        let N = G => {\n          he({\n            redirect: K,\n            resource: U,\n            id: G\n          });\n        };\n        return I !== \"pessimistic\" && setTimeout(() => {\n          N();\n        }), new Promise((G, Ee) => (I !== \"pessimistic\" && G(), ve({\n          values: se,\n          resource: U.name,\n          successNotification: n,\n          errorNotification: m,\n          metaData: C,\n          dataProviderName: d,\n          invalidates: p\n        }, {\n          onSuccess: (ae, Te, Me) => {\n            var qt;\n            o && o(ae, se, Me);\n            let Fe = (qt = ae == null ? void 0 : ae.data) == null ? void 0 : qt.id;\n            N(Fe), G(ae);\n          },\n          onError: (ae, Te, Me) => {\n            if (s) return s(ae, se, Me);\n            Ee();\n          }\n        })));\n      }\n    } : {\n      formLoading: O || Tt,\n      mutationResult: ye,\n      onFinish: async se => {\n        tt(!1);\n        let N = {\n            id: h != null ? h : \"\",\n            values: se,\n            resource: U.name,\n            mutationMode: I,\n            undoableTimeout: f,\n            successNotification: n,\n            errorNotification: m,\n            metaData: C,\n            dataProviderName: d,\n            invalidates: p\n          },\n          G = () => {\n            S(D), he({\n              redirect: K,\n              resource: U,\n              id: h\n            });\n          };\n        return I !== \"pessimistic\" && setTimeout(() => {\n          G();\n        }), new Promise((Ee, ae) => (I !== \"pessimistic\" && Ee(), setTimeout(() => {\n          et(N, {\n            onSuccess: (Te, Me, Fe) => {\n              o && o(Te, se, Fe), I === \"pessimistic\" && G(), Ee(Te);\n            },\n            onError: (Te, Me, Fe) => {\n              if (s) return s(Te, se, Fe);\n              ae();\n            }\n          });\n        })));\n      }\n    }),\n    queryResult: pe,\n    id: h,\n    setId: S,\n    redirect: (se, N) => {\n      he({\n        redirect: se !== void 0 ? se : oe ? \"list\" : \"edit\",\n        resource: U,\n        id: N != null ? N : h\n      });\n    }\n  };\n};\nimport { useCallback as $s } from \"react\";\nvar Er = () => {\n  let {\n    show: e,\n    edit: t,\n    list: r,\n    create: o\n  } = q();\n  return $s(_ref54 => {\n    let {\n      redirect: a,\n      resource: n,\n      id: m\n    } = _ref54;\n    if (a && n.route) return n.canShow && a === \"show\" && m ? e(n.route, m) : n.canEdit && a === \"edit\" && m ? t(n.route, m) : n.canCreate && a === \"create\" ? o(n.route) : r(n.route, \"push\");\n  }, []);\n};\nvar q = () => {\n  let {\n      useHistory: e\n    } = w(),\n    t = e(),\n    r = J(),\n    o = function (i) {\n      let g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"push\";\n      g === \"push\" ? t.push(i) : t.replace(i);\n    },\n    s = i => `/${r(i).route}/create`,\n    a = (i, g) => {\n      let T = r(i),\n        x = encodeURIComponent(g);\n      return `/${T.route}/edit/${x}`;\n    },\n    n = (i, g) => {\n      let T = r(i),\n        x = encodeURIComponent(g);\n      return `/${T.route}/clone/${x}`;\n    },\n    m = (i, g) => {\n      let T = r(i),\n        x = encodeURIComponent(g);\n      return `/${T.route}/show/${x}`;\n    },\n    C = i => `/${r(i).route}`;\n  return {\n    create: function (i) {\n      let g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"push\";\n      o(s(i), g);\n    },\n    createUrl: s,\n    edit: function (i, g) {\n      let T = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"push\";\n      o(a(i, g), T);\n    },\n    editUrl: a,\n    clone: function (i, g) {\n      let T = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"push\";\n      o(n(i, g), T);\n    },\n    cloneUrl: n,\n    show: function (i, g) {\n      let T = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"push\";\n      o(m(i, g), T);\n    },\n    showUrl: m,\n    list: function (i) {\n      let g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"push\";\n      o(C(i), g);\n    },\n    listUrl: C,\n    push: function (i) {\n      for (var _len = arguments.length, g = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        g[_key - 1] = arguments[_key];\n      }\n      t.push(i, ...g);\n    },\n    replace: function (i) {\n      for (var _len2 = arguments.length, g = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        g[_key2 - 1] = arguments[_key2];\n      }\n      t.replace(i, ...g);\n    },\n    goBack: () => {\n      t.goBack();\n    }\n  };\n};\nimport Os, { useState as Ws } from \"react\";\nvar Md = function () {\n  let {\n    resource: e,\n    id: t,\n    successNotification: r,\n    errorNotification: o,\n    metaData: s,\n    liveMode: a,\n    onLiveEvent: n,\n    dataProviderName: m,\n    queryOptions: C\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n      useParams: u\n    } = w(),\n    {\n      resource: l,\n      id: y\n    } = u(),\n    R = !e || e === l ? t != null ? t : y : t,\n    [f, d] = Ws(R);\n  Os.useEffect(() => {\n    R !== f && d(R);\n  }, [R]);\n  let c = J()(e != null ? e : l);\n  return {\n    queryResult: Ge({\n      resource: c.name,\n      id: f != null ? f : \"\",\n      queryOptions: {\n        enabled: f !== void 0,\n        ...C\n      },\n      successNotification: r,\n      errorNotification: o,\n      metaData: s,\n      liveMode: a,\n      onLiveEvent: n,\n      dataProviderName: m\n    }),\n    showId: f,\n    setShowId: d\n  };\n};\nimport { useEffect as Ks, useState as Nt } from \"react\";\nimport { parse as Gs } from \"papaparse\";\nimport zs from \"lodash-es/chunk\";\nvar Nd = function () {\n  let {\n    resourceName: e,\n    mapData: t = C => C,\n    paparseOptions: r,\n    batchSize: o = Number.MAX_SAFE_INTEGER,\n    onFinish: s,\n    metaData: a,\n    onProgress: n,\n    dataProviderName: m\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let [C, u] = Nt(0),\n    [l, y] = Nt(0),\n    [R, f] = Nt(!1),\n    d = J(),\n    {\n      useParams: p\n    } = w(),\n    {\n      resource: c\n    } = p(),\n    {\n      name: i\n    } = d(e != null ? e : c),\n    g = At(),\n    T = ze(),\n    x;\n  o === 1 ? x = T : x = g;\n  let P = () => {\n      y(0), u(0), f(!1);\n    },\n    b = D => {\n      let h = {\n        succeeded: D.filter(S => S.type === \"success\"),\n        errored: D.filter(S => S.type === \"error\")\n      };\n      s == null || s(h), f(!1);\n    };\n  Ks(() => {\n    n == null || n({\n      totalAmount: l,\n      processedAmount: C\n    });\n  }, [l, C]);\n  let v = _ref55 => {\n    let {\n      file: D\n    } = _ref55;\n    return P(), new Promise(h => {\n      f(!0), Gs(D, {\n        complete: async _ref56 => {\n          let {\n            data: S\n          } = _ref56;\n          let V = ot(S, t);\n          if (y(V.length), o === 1) {\n            let Q = V.map(U => async () => ({\n                response: await T.mutateAsync({\n                  resource: i,\n                  values: U,\n                  successNotification: !1,\n                  errorNotification: !1,\n                  dataProviderName: m,\n                  metaData: a\n                }),\n                value: U\n              })),\n              L = await pt(Q, _ref57 => {\n                let {\n                  response: U,\n                  value: A\n                } = _ref57;\n                return u(I => I + 1), {\n                  response: [U.data],\n                  type: \"success\",\n                  request: [A]\n                };\n              }, (U, A) => ({\n                response: [U],\n                type: \"error\",\n                request: [V[A]]\n              }));\n            h(L);\n          } else {\n            let Q = zs(V, o),\n              L = Q.map(A => async () => ({\n                response: await g.mutateAsync({\n                  resource: i,\n                  values: A,\n                  successNotification: !1,\n                  errorNotification: !1,\n                  dataProviderName: m,\n                  metaData: a\n                }),\n                value: A,\n                currentBatchLength: A.length\n              })),\n              U = await pt(L, _ref58 => {\n                let {\n                  response: A,\n                  currentBatchLength: I,\n                  value: Z\n                } = _ref58;\n                return u(oe => oe + I), {\n                  response: A.data,\n                  type: \"success\",\n                  request: Z\n                };\n              }, (A, I) => ({\n                response: [A],\n                type: \"error\",\n                request: Q[I]\n              }));\n            h(U);\n          }\n        },\n        ...r\n      });\n    }).then(h => (b(h), h));\n  };\n  return {\n    inputProps: {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: D => {\n        D.target.files && D.target.files.length > 0 && v({\n          file: D.target.files[0]\n        });\n      }\n    },\n    mutationResult: x,\n    isLoading: R,\n    handleChange: v\n  };\n};\nimport { useCallback as Mr, useState as _s } from \"react\";\nvar Fd = function () {\n  let {\n    defaultVisible: e = !1\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let [t, r] = _s(e),\n    o = Mr(() => r(!0), [t]),\n    s = Mr(() => r(!1), [t]);\n  return {\n    visible: t,\n    show: o,\n    close: s\n  };\n};\nimport { useContext as qs } from \"react\";\nimport Ur from \"react\";\nvar js = {\n    useHistory: () => !1,\n    useLocation: () => !1,\n    useParams: () => ({}),\n    Prompt: () => null,\n    Link: () => null\n  },\n  Ye = Ur.createContext(js),\n  Sr = _ref59 => {\n    let {\n      children: e,\n      useHistory: t,\n      useLocation: r,\n      useParams: o,\n      Prompt: s,\n      Link: a,\n      routes: n\n    } = _ref59;\n    return Ur.createElement(Ye.Provider, {\n      value: {\n        useHistory: t,\n        useLocation: r,\n        useParams: o,\n        Prompt: s,\n        Link: a,\n        routes: n\n      }\n    }, e);\n  };\nvar w = () => {\n  let {\n    useHistory: e,\n    useLocation: t,\n    useParams: r,\n    Prompt: o,\n    Link: s,\n    routes: a\n  } = qs(Ye);\n  return {\n    useHistory: e,\n    useLocation: t,\n    useParams: r,\n    Prompt: o,\n    Link: s,\n    routes: a\n  };\n};\nimport { useContext as Ys } from \"react\";\nimport { useQuery as Zs } from \"@tanstack/react-query\";\nimport Ir from \"react\";\nvar Ie = Ir.createContext({}),\n  Lr = _ref60 => {\n    let {\n      can: e,\n      children: t\n    } = _ref60;\n    return Ir.createElement(Ie.Provider, {\n      value: {\n        can: e\n      }\n    }, t);\n  };\nvar wr = _ref61 => {\n  let {\n    action: e,\n    resource: t,\n    params: r,\n    queryOptions: o\n  } = _ref61;\n  let {\n      can: s\n    } = Ys(Ie),\n    {\n      resource: a,\n      ...n\n    } = r != null ? r : {},\n    {\n      icon: m,\n      list: C,\n      edit: u,\n      create: l,\n      show: y,\n      children: R,\n      ...f\n    } = a != null ? a : {},\n    d = Zs([\"useCan\", {\n      action: e,\n      resource: t,\n      params: {\n        ...n,\n        resource: f\n      },\n      enabled: o == null ? void 0 : o.enabled\n    }], () => {\n      var p;\n      return (p = s == null ? void 0 : s({\n        action: e,\n        resource: t,\n        params: r\n      })) != null ? p : Promise.resolve({\n        can: !0\n      });\n    }, {\n      enabled: typeof s < \"u\",\n      ...o,\n      retry: !1\n    });\n  return typeof s > \"u\" ? {\n    data: {\n      can: !0\n    }\n  } : d;\n};\nimport { useContext as Js } from \"react\";\nvar im = () => {\n  let {\n    can: e\n  } = Js(Ie);\n  return {\n    can: e\n  };\n};\nimport { useCallback as Qr, useMemo as Xs, useState as kt } from \"react\";\nimport ea from \"lodash/uniqBy\";\nimport ta from \"lodash/debounce\";\nimport ft from \"lodash/get\";\nvar gm = e => {\n  var oe, ce;\n  let [t, r] = kt([]),\n    [o, s] = kt([]),\n    [a, n] = kt([]),\n    {\n      resource: m,\n      sort: C,\n      filters: u = [],\n      optionLabel: l = \"title\",\n      optionValue: y = \"id\",\n      debounce: R = 300,\n      successNotification: f,\n      errorNotification: d,\n      defaultValueQueryOptions: p,\n      queryOptions: c,\n      fetchSize: i,\n      pagination: g,\n      hasPagination: T,\n      liveMode: x,\n      defaultValue: P = [],\n      onLiveEvent: b,\n      onSearch: v,\n      liveParams: D,\n      metaData: h,\n      dataProviderName: S\n    } = e,\n    V = Array.isArray(P) ? P : [P],\n    Q = Qr(K => {\n      n(K.data.map(j => ({\n        label: ft(j, l),\n        value: ft(j, y)\n      })));\n    }, [l, y]),\n    L = p != null ? p : c,\n    U = St({\n      resource: m,\n      ids: V,\n      queryOptions: {\n        ...L,\n        enabled: V.length > 0 && ((oe = p == null ? void 0 : p.enabled) != null ? oe : !0),\n        onSuccess: K => {\n          var j;\n          Q(K), (j = L == null ? void 0 : L.onSuccess) == null || j.call(L, K);\n        }\n      },\n      metaData: h,\n      liveMode: \"off\",\n      dataProviderName: S\n    }),\n    A = Qr(K => {\n      s(K.data.map(j => ({\n        label: ft(j, l),\n        value: ft(j, y)\n      })));\n    }, [l, y]),\n    I = Ke({\n      resource: m,\n      config: {\n        sort: C,\n        filters: u.concat(t),\n        pagination: {\n          current: g == null ? void 0 : g.current,\n          pageSize: (ce = g == null ? void 0 : g.pageSize) != null ? ce : i\n        },\n        hasPagination: T\n      },\n      queryOptions: {\n        ...c,\n        onSuccess: K => {\n          var j;\n          A(K), (j = c == null ? void 0 : c.onSuccess) == null || j.call(c, K);\n        }\n      },\n      successNotification: f,\n      errorNotification: d,\n      metaData: h,\n      liveMode: x,\n      liveParams: D,\n      onLiveEvent: b,\n      dataProviderName: S\n    }),\n    Z = K => {\n      if (v) {\n        r(v(K));\n        return;\n      }\n      if (K) r([{\n        field: l,\n        operator: \"contains\",\n        value: K\n      }]);else {\n        r([]);\n        return;\n      }\n    };\n  return {\n    queryResult: I,\n    defaultValueQueryResult: U,\n    options: Xs(() => ea([...o, ...a], \"value\"), [o, a]),\n    onSearch: ta(Z, R)\n  };\n};\nimport { useMemo as ra, useState as yt, useEffect as Ar } from \"react\";\nimport Vr from \"qs\";\nimport Br from \"lodash/differenceWith\";\nimport Nr from \"lodash/isEqual\";\nvar oa = [],\n  sa = [];\nfunction Em() {\n  let {\n    initialCurrent: e = 1,\n    initialPageSize: t = 10,\n    hasPagination: r = !0,\n    initialSorter: o,\n    permanentSorter: s = sa,\n    defaultSetFilterBehavior: a = \"merge\",\n    initialFilter: n,\n    permanentFilter: m = oa,\n    syncWithLocation: C,\n    resource: u,\n    successNotification: l,\n    errorNotification: y,\n    queryOptions: R,\n    liveMode: f,\n    onLiveEvent: d,\n    liveParams: p,\n    metaData: c,\n    dataProviderName: i\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var se;\n  let {\n      syncWithLocation: g\n    } = Bt(),\n    T = C != null ? C : g,\n    {\n      useLocation: x,\n      useParams: P\n    } = w(),\n    {\n      search: b,\n      pathname: v\n    } = x(),\n    D = Tr(f),\n    {\n      parsedCurrent: h,\n      parsedPageSize: S,\n      parsedSorter: V,\n      parsedFilters: Q\n    } = st(b),\n    L = h || e,\n    U = S || t,\n    A = V.length ? V : o,\n    I = Q.length ? Q : n,\n    {\n      resource: Z\n    } = P(),\n    {\n      replace: oe\n    } = q(),\n    K = J()(u != null ? u : Z),\n    [j, pe] = yt(ut(s, A != null ? A : [])),\n    [O, fe] = yt(it(m, I != null ? I : [])),\n    [ve, Xe] = yt(L),\n    [ye, et] = yt(U),\n    Tt = _ref62 => {\n      let {\n        pagination: {\n          current: N,\n          pageSize: G\n        },\n        sorter: Ee,\n        filters: ae\n      } = _ref62;\n      let Te = Vr.parse(b == null ? void 0 : b.substring(1)),\n        Me = at({\n          pagination: {\n            pageSize: G,\n            current: N\n          },\n          sorter: Ee,\n          filters: ae,\n          ...Te\n        });\n      return `${v}?${Me}`;\n    };\n  Ar(() => {\n    b === \"\" && (Xe(L), et(U), pe(ut(s, A != null ? A : [])), fe(it(m, I != null ? I : [])));\n  }, [b]);\n  let tt = () => {\n    let {\n      sorter: N,\n      filters: G,\n      pageSize: Ee,\n      current: ae,\n      ...Te\n    } = Vr.parse(b, {\n      ignoreQueryPrefix: !0\n    });\n    return Te;\n  };\n  Ar(() => {\n    if (T) {\n      let N = tt(),\n        G = at({\n          ...(r ? {\n            pagination: {\n              pageSize: ye,\n              current: ve\n            }\n          } : {}),\n          sorter: Br(j, s, Nr),\n          filters: Br(O, m, Nr),\n          ...N\n        });\n      return oe(`${v}?${G}`, void 0, {\n        shallow: !0\n      });\n    }\n  }, [T, ve, ye, j, O]);\n  let he = Ke({\n      resource: K.name,\n      config: {\n        hasPagination: r,\n        pagination: {\n          current: ve,\n          pageSize: ye\n        },\n        filters: we(m, O),\n        sort: nt(s, j)\n      },\n      queryOptions: R,\n      successNotification: l,\n      errorNotification: y,\n      metaData: c,\n      liveMode: D,\n      liveParams: p,\n      onLiveEvent: d,\n      dataProviderName: i\n    }),\n    Kt = N => {\n      fe(G => we(m, N, G));\n    },\n    Gt = N => {\n      fe(we(m, N));\n    },\n    zt = N => {\n      fe(G => we(m, N(G)));\n    },\n    _t = function (N) {\n      let G = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : a;\n      typeof N == \"function\" ? zt(N) : G === \"replace\" ? Gt(N) : Kt(N);\n    },\n    jt = N => {\n      pe(() => nt(s, N));\n    },\n    rt = ra(() => {\n      var N, G;\n      return r ? {\n        current: ve,\n        setCurrent: Xe,\n        pageSize: ye,\n        setPageSize: et,\n        pageCount: ye ? Math.ceil(((G = (N = he.data) == null ? void 0 : N.total) != null ? G : 0) / ye) : 1\n      } : {\n        current: void 0,\n        setCurrent: void 0,\n        pageSize: void 0,\n        setPageSize: void 0,\n        pageCount: void 0\n      };\n    }, [r, ve, ye, (se = he.data) == null ? void 0 : se.total]);\n  return {\n    tableQueryResult: he,\n    sorter: j,\n    setSorter: jt,\n    filters: O,\n    setFilters: _t,\n    ...rt,\n    createLinkForSyncWithLocation: Tt\n  };\n}\nimport { useContext as Fr } from \"react\";\nimport { useMutation as $r, useQueryClient as aa } from \"@tanstack/react-query\";\nimport kr from \"react\";\nvar Le = kr.createContext({}),\n  Hr = _ref63 => {\n    let {\n      create: e,\n      get: t,\n      update: r,\n      children: o\n    } = _ref63;\n    return kr.createElement(Le.Provider, {\n      value: {\n        create: e,\n        get: t,\n        update: r\n      }\n    }, o);\n  };\nvar Ve = function () {\n  let {\n    logMutationOptions: e,\n    renameMutationOptions: t\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let r = aa(),\n    o = Fr(Le),\n    {\n      resources: s\n    } = Fr(Ue),\n    {\n      data: a,\n      refetch: n,\n      isLoading: m\n    } = gt({\n      queryOptions: {\n        enabled: !!o\n      }\n    }),\n    C = $r(async l => {\n      var d, p, c;\n      let y = s.find(i => i.name === l.resource),\n        R = (p = (d = y == null ? void 0 : y.options) == null ? void 0 : d.auditLog) == null ? void 0 : p.permissions;\n      if (R && !vt(R, l.action)) return;\n      let f;\n      return m && (f = await n()), await ((c = o.create) == null ? void 0 : c.call(o, {\n        ...l,\n        author: a != null ? a : f == null ? void 0 : f.data\n      }));\n    }, e),\n    u = $r(async l => {\n      var y;\n      return await ((y = o.update) == null ? void 0 : y.call(o, l));\n    }, {\n      onSuccess: l => {\n        if (l != null && l.resource) {\n          let y = F(l == null ? void 0 : l.resource);\n          r.invalidateQueries(y.logList());\n        }\n      },\n      ...t\n    });\n  return {\n    log: C,\n    rename: u\n  };\n};\nimport { useContext as na } from \"react\";\nimport { useQuery as ia } from \"@tanstack/react-query\";\nvar Gm = _ref64 => {\n  let {\n    resource: e,\n    action: t,\n    meta: r,\n    author: o,\n    metaData: s,\n    queryOptions: a\n  } = _ref64;\n  let {\n      get: n\n    } = na(Le),\n    m = F(e, void 0, s);\n  return ia(m.logList(r), () => {\n    var u;\n    return (u = n == null ? void 0 : n({\n      resource: e,\n      action: t,\n      author: o,\n      meta: r,\n      metaData: s\n    })) != null ? u : Promise.resolve([]);\n  }, {\n    enabled: typeof n < \"u\",\n    ...a,\n    retry: !1\n  });\n};\nimport { useCallback as ua } from \"react\";\nimport { useQueryClient as ca } from \"@tanstack/react-query\";\nvar ie = () => {\n  let {\n      resources: e\n    } = B(),\n    t = ca();\n  return ua(_ref65 => {\n    let {\n      resource: o,\n      dataProviderName: s,\n      invalidates: a,\n      id: n\n    } = _ref65;\n    if (a === !1) return;\n    let m = F(o, E(o, s, e));\n    a.forEach(C => {\n      switch (C) {\n        case \"all\":\n          t.invalidateQueries(m.all);\n          break;\n        case \"list\":\n          t.invalidateQueries(m.list());\n          break;\n        case \"many\":\n          t.invalidateQueries(m.many());\n          break;\n        case \"resourceAll\":\n          t.invalidateQueries(m.resourceAll);\n          break;\n        case \"detail\":\n          t.invalidateQueries(m.detail(n || \"\"));\n          break;\n        default:\n          break;\n      }\n    });\n  }, []);\n};\nimport { useContext as pa } from \"react\";\nimport la from \"warn-once\";\nvar uf = () => {\n  var C;\n  let {\n      useParams: e\n    } = w(),\n    {\n      i18nProvider: t\n    } = pa(de),\n    r = M(),\n    {\n      resources: o,\n      resource: s\n    } = B(),\n    {\n      action: a\n    } = e(),\n    n = [];\n  if (!(s != null && s.name)) return {\n    breadcrumbs: n\n  };\n  let m = u => {\n    var y;\n    let l = o.find(R => R.name === u);\n    l && (l.parentName && m(l.parentName), n.push({\n      label: (y = l.label) != null ? y : r(`${l.name}.${l.name}`, Pe(l.name)),\n      href: l.list ? `/${l.route}` : void 0,\n      icon: l.icon\n    }));\n  };\n  if (s.parentName && m(s.parentName), n.push({\n    label: (C = s.label) != null ? C : r(`${s.name}.${s.name}`, Pe(s.name)),\n    href: s.list ? `/${s.route}` : void 0,\n    icon: s.icon\n  }), a) {\n    let u = `actions.${a}`,\n      l = r(u);\n    typeof t < \"u\" && l === u ? (la(!0, `[useBreadcrumb]: Breadcrumb missing translate key for the \"${a}\" action. Please add \"actions.${a}\" key to your translation file.\nFor more information, see https://refine.dev/docs/core/hooks/useBreadcrumb/#i18n-support`), n.push({\n      label: r(`buttons.${a}`, Pe(a))\n    })) : n.push({\n      label: r(u, Pe(a))\n    });\n  }\n  return {\n    breadcrumbs: n\n  };\n};\nimport Be from \"react\";\nvar da = () => {\n  let {\n      resources: e\n    } = B(),\n    t = M(),\n    {\n      useLocation: r,\n      useParams: o\n    } = w(),\n    s = r(),\n    a = o(),\n    {\n      hasDashboard: n\n    } = Se(),\n    m = Be.useMemo(() => {\n      let f = e.find(p => (s == null ? void 0 : s.pathname) === `/${p.route}`);\n      f || (f = e.find(p => (a == null ? void 0 : a.resource) === p.route));\n      let d;\n      return f != null && f.route ? d = `/${f == null ? void 0 : f.route}` : s.pathname === \"/\" ? d = \"/\" : d = s == null ? void 0 : s.pathname, d;\n    }, [e, s, a]),\n    C = Be.useMemo(() => e.map(f => {\n      var p, c;\n      let d = `/${f.route}`;\n      return {\n        ...f,\n        icon: f.icon,\n        route: d,\n        key: (p = f.key) != null ? p : d,\n        label: (c = f.label) != null ? c : t(`${f.name}.${f.name}`, Qe(f.name, \"plural\"))\n      };\n    }), [e, n, t]),\n    u = Be.useMemo(() => ct(C), [C]),\n    l = Be.useCallback(function (f, d) {\n      let p = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;\n      let c = d.find(i => p ? i.name === f : i.route === f);\n      if (c) {\n        let i = [];\n        return p && c.route && i.unshift(c.route), c.parentName && i.unshift(...l(c.parentName, d, !0)), i;\n      }\n      return [];\n    }, []),\n    y = Be.useMemo(() => l(m, C), [m, C]);\n  return Be.useMemo(() => {\n    let f = d => d.reduce((p, c) => {\n      var i, g;\n      return c.children.length > 0 && ((i = c.options) == null ? void 0 : i.hide) !== !0 ? [...p, {\n        ...c,\n        children: f(c.children)\n      }] : typeof c.list < \"u\" && ((g = c.options) == null ? void 0 : g.hide) !== !0 ? [...p, c] : p;\n    }, []);\n    return {\n      defaultOpenKeys: y,\n      selectedKey: m,\n      menuItems: f(u)\n    };\n  }, [y, m, u]);\n};\nvar ya = () => {\n  let [e, t] = fa(),\n    {\n      push: r\n    } = q(),\n    o = M(),\n    s = [\"edit\", \"create\", \"show\"],\n    {\n      useParams: a\n    } = w(),\n    n = a(),\n    m = J();\n  return ma(() => {\n    if (n.resource) {\n      let C = m(n.resource);\n      n.action && s.includes(n.action) && !C[n.action] && t(o(\"pages.error.info\", {\n        action: n.action,\n        resource: n.resource\n      }, `You may have forgotten to add the \"${n.action}\" component to \"${n.resource}\" resource.`));\n    }\n  }, [n]), Ze.createElement(Ze.Fragment, null, Ze.createElement(\"h1\", null, o(\"pages.error.404\", void 0, \"Sorry, the page you visited does not exist.\")), e && Ze.createElement(\"p\", null, e), Ze.createElement(\"button\", {\n    onClick: () => r(\"/\")\n  }, o(\"pages.error.backHome\", void 0, \"Back Home\")));\n};\nimport X, { useState as Or } from \"react\";\nvar Et = () => {\n  let [e, t] = Or(\"\"),\n    [r, o] = Or(\"\"),\n    s = M(),\n    {\n      mutate: a\n    } = $e();\n  return X.createElement(X.Fragment, null, X.createElement(\"h1\", null, s(\"pages.login.title\", \"Sign in your account\")), X.createElement(\"form\", {\n    onSubmit: n => {\n      n.preventDefault(), a({\n        username: e,\n        password: r\n      });\n    }\n  }, X.createElement(\"table\", null, X.createElement(\"tbody\", null, X.createElement(\"tr\", null, X.createElement(\"td\", null, s(\"pages.login.username\", void 0, \"username\"), \":\"), X.createElement(\"td\", null, X.createElement(\"input\", {\n    type: \"text\",\n    size: 20,\n    autoCorrect: \"off\",\n    spellCheck: !1,\n    autoCapitalize: \"off\",\n    autoFocus: !0,\n    required: !0,\n    value: e,\n    onChange: n => t(n.target.value)\n  }))), X.createElement(\"tr\", null, X.createElement(\"td\", null, s(\"pages.login.password\", void 0, \"password\"), \":\"), X.createElement(\"td\", null, X.createElement(\"input\", {\n    type: \"password\",\n    required: !0,\n    size: 20,\n    value: r,\n    onChange: n => o(n.target.value)\n  }))))), X.createElement(\"br\", null), X.createElement(\"input\", {\n    type: \"submit\",\n    value: \"login\"\n  })));\n};\nimport Ne from \"react\";\nimport z, { useState as Ht } from \"react\";\nvar Wr = _ref66 => {\n  let {\n    providers: e,\n    registerLink: t,\n    forgotPasswordLink: r,\n    rememberMe: o,\n    contentProps: s,\n    wrapperProps: a,\n    renderContent: n,\n    formProps: m\n  } = _ref66;\n  let {\n      Link: C\n    } = w(),\n    [u, l] = Ht(\"\"),\n    [y, R] = Ht(\"\"),\n    [f, d] = Ht(!1),\n    p = M(),\n    {\n      mutate: c\n    } = $e(),\n    i = (x, P) => x ? typeof x == \"string\" ? z.createElement(C, {\n      to: x\n    }, P) : x : null,\n    g = () => e ? e.map(x => {\n      var P;\n      return z.createElement(\"div\", {\n        key: x.name,\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          marginBottom: \"1rem\"\n        }\n      }, z.createElement(\"button\", {\n        onClick: () => c({\n          providerName: x.name\n        }),\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        }\n      }, x == null ? void 0 : x.icon, (P = x.label) != null ? P : z.createElement(\"label\", null, x.label)));\n    }) : null,\n    T = z.createElement(\"div\", {\n      ...s\n    }, z.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      }\n    }, p(\"pages.login.title\", \"Sign in to your account\")), g(), z.createElement(\"hr\", null), z.createElement(\"form\", {\n      onSubmit: x => {\n        x.preventDefault(), c({\n          email: u,\n          password: y,\n          remember: f\n        });\n      },\n      ...m\n    }, z.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: 25\n      }\n    }, z.createElement(\"label\", null, p(\"pages.login.fields.email\", \"Email\")), z.createElement(\"input\", {\n      name: \"email\",\n      type: \"text\",\n      size: 20,\n      autoCorrect: \"off\",\n      spellCheck: !1,\n      autoCapitalize: \"off\",\n      required: !0,\n      value: u,\n      onChange: x => l(x.target.value)\n    }), z.createElement(\"label\", null, p(\"pages.login.fields.password\", \"Password\")), z.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      required: !0,\n      size: 20,\n      value: y,\n      onChange: x => R(x.target.value)\n    }), o != null ? o : z.createElement(z.Fragment, null, z.createElement(\"label\", null, p(\"pages.login.buttons.rememberMe\", \"Remember me\"), z.createElement(\"input\", {\n      name: \"remember\",\n      type: \"checkbox\",\n      size: 20,\n      checked: f,\n      value: f.toString(),\n      onChange: () => {\n        d(!f);\n      }\n    }))), z.createElement(\"br\", null), r != null ? r : i(\"/forgot-password\", p(\"pages.login.buttons.forgotPassword\", \"Forgot password?\")), z.createElement(\"input\", {\n      type: \"submit\",\n      value: p(\"pages.login.signin\", \"Sign in\")\n    }), t != null ? t : z.createElement(\"span\", null, p(\"pages.login.buttons.noAccount\", \"Don\\u2019t have an account?\"), \" \", i(\"/register\", p(\"pages.login.register\", \"Sign up\"))))));\n  return z.createElement(\"div\", {\n    ...a\n  }, n ? n(T) : T);\n};\nimport Y, { useState as Kr } from \"react\";\nvar Gr = _ref67 => {\n  let {\n    providers: e,\n    loginLink: t,\n    wrapperProps: r,\n    contentProps: o,\n    renderContent: s,\n    formProps: a\n  } = _ref67;\n  let {\n      Link: n\n    } = w(),\n    [m, C] = Kr(\"\"),\n    [u, l] = Kr(\"\"),\n    y = M(),\n    {\n      mutate: R,\n      isLoading: f\n    } = xt(),\n    d = (i, g) => i ? typeof i == \"string\" ? Y.createElement(n, {\n      to: i\n    }, g) : i : null,\n    p = () => e ? e.map(i => {\n      var g;\n      return Y.createElement(\"div\", {\n        key: i.name,\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          marginBottom: \"1rem\"\n        }\n      }, Y.createElement(\"button\", {\n        onClick: () => R({\n          providerName: i.name\n        }),\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        }\n      }, i == null ? void 0 : i.icon, (g = i.label) != null ? g : Y.createElement(\"label\", null, i.label)));\n    }) : null,\n    c = Y.createElement(\"div\", {\n      ...o\n    }, Y.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      }\n    }, y(\"pages.register.title\", \"Sign up for your account\")), p(), Y.createElement(\"hr\", null), Y.createElement(\"form\", {\n      onSubmit: i => {\n        i.preventDefault(), R({\n          email: m,\n          password: u\n        });\n      },\n      ...a\n    }, Y.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: 25\n      }\n    }, Y.createElement(\"label\", null, y(\"pages.register.fields.email\", \"Email\")), Y.createElement(\"input\", {\n      name: \"email\",\n      type: \"email\",\n      size: 20,\n      autoCorrect: \"off\",\n      spellCheck: !1,\n      autoCapitalize: \"off\",\n      required: !0,\n      value: m,\n      onChange: i => C(i.target.value)\n    }), Y.createElement(\"label\", null, y(\"pages.register.fields.password\", \"Password\")), Y.createElement(\"input\", {\n      name: \"password\",\n      type: \"password\",\n      required: !0,\n      size: 20,\n      value: u,\n      onChange: i => l(i.target.value)\n    }), Y.createElement(\"input\", {\n      type: \"submit\",\n      value: y(\"pages.register.buttons.submit\", \"Sign up\"),\n      disabled: f\n    }), t != null ? t : Y.createElement(Y.Fragment, null, Y.createElement(\"span\", null, y(\"pages.login.buttons.haveAccount\", \"Have an account?\"), \" \", d(\"login\", y(\"pages.login.signin\", \"Sign in\")))))));\n  return Y.createElement(\"div\", {\n    ...r\n  }, s ? s(c) : c);\n};\nimport ue, { useState as Ta } from \"react\";\nvar zr = _ref68 => {\n  let {\n    loginLink: e,\n    wrapperProps: t,\n    contentProps: r,\n    renderContent: o,\n    formProps: s\n  } = _ref68;\n  let a = M(),\n    {\n      Link: n\n    } = w(),\n    [m, C] = Ta(\"\"),\n    {\n      mutate: u,\n      isLoading: l\n    } = Rt(),\n    y = (f, d) => f ? typeof f == \"string\" ? ue.createElement(n, {\n      to: f\n    }, d) : f : null,\n    R = ue.createElement(\"div\", {\n      ...r\n    }, ue.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      }\n    }, a(\"pages.forgotPassword.title\", \"Forgot your password?\")), ue.createElement(\"hr\", null), ue.createElement(\"form\", {\n      onSubmit: f => {\n        f.preventDefault(), u({\n          email: m\n        });\n      },\n      ...s\n    }, ue.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: 25\n      }\n    }, ue.createElement(\"label\", null, a(\"pages.forgotPassword.fields.email\", \"Email\")), ue.createElement(\"input\", {\n      name: \"email\",\n      type: \"mail\",\n      autoCorrect: \"off\",\n      spellCheck: !1,\n      autoCapitalize: \"off\",\n      required: !0,\n      value: m,\n      onChange: f => C(f.target.value)\n    }), ue.createElement(\"input\", {\n      type: \"submit\",\n      disabled: l,\n      value: a(\"pages.forgotPassword.buttons.submit\", \"Send reset instructions\")\n    }), ue.createElement(\"br\", null), e != null ? e : ue.createElement(\"span\", null, a(\"pages.register.buttons.haveAccount\", \"Have an account? \"), \" \", y(\"/login\", a(\"pages.login.signin\", \"Sign in\"))))));\n  return ue.createElement(\"div\", {\n    ...t\n  }, o ? o(R) : R);\n};\nimport me, { useState as _r } from \"react\";\nvar jr = _ref69 => {\n  let {\n    wrapperProps: e,\n    contentProps: t,\n    renderContent: r,\n    formProps: o\n  } = _ref69;\n  let s = M(),\n    {\n      mutate: a,\n      isLoading: n\n    } = Pt(),\n    [m, C] = _r(\"\"),\n    [u, l] = _r(\"\"),\n    y = me.createElement(\"div\", {\n      ...t\n    }, me.createElement(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      }\n    }, s(\"pages.updatePassword.title\", \"Update Password\")), me.createElement(\"hr\", null), me.createElement(\"form\", {\n      onSubmit: R => {\n        R.preventDefault(), a({\n          password: m,\n          confirmPassword: u\n        });\n      },\n      ...o\n    }, me.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: 25\n      }\n    }, me.createElement(\"label\", null, s(\"pages.updatePassword.fields.password\", \"New Password\")), me.createElement(\"input\", {\n      name: \"password\",\n      type: \"password\",\n      required: !0,\n      size: 20,\n      value: m,\n      onChange: R => C(R.target.value)\n    }), me.createElement(\"label\", null, s(\"pages.updatePassword.fields.confirmPassword\", \"Confirm New Password\")), me.createElement(\"input\", {\n      name: \"confirmPassword\",\n      type: \"password\",\n      required: !0,\n      size: 20,\n      value: u,\n      onChange: R => l(R.target.value)\n    }), me.createElement(\"input\", {\n      type: \"submit\",\n      disabled: n,\n      value: s(\"pages.updatePassword.buttons.submit\", \"Update\")\n    }))));\n  return me.createElement(\"div\", {\n    ...e\n  }, r ? r(y) : y);\n};\nvar ga = e => {\n  let {\n    type: t\n  } = e;\n  return Ne.createElement(Ne.Fragment, null, (() => {\n    switch (t) {\n      case \"register\":\n        return Ne.createElement(Gr, {\n          ...e\n        });\n      case \"forgotPassword\":\n        return Ne.createElement(zr, {\n          ...e\n        });\n      case \"updatePassword\":\n        return Ne.createElement(jr, {\n          ...e\n        });\n      default:\n        return Ne.createElement(Wr, {\n          ...e\n        });\n    }\n  })());\n};\nimport re from \"react\";\nvar Ft = () => re.createElement(re.Fragment, null, re.createElement(\"h1\", null, \"Welcome on board\"), re.createElement(\"p\", null, \"Your configuration is completed.\"), re.createElement(\"p\", null, \"Now you can get started by adding your resources to the\", \" \", re.createElement(\"code\", null, \"`resources`\"), \" property of \", re.createElement(\"code\", null, \"`<Refine>`\")), re.createElement(\"div\", {\n  style: {\n    display: \"flex\",\n    gap: 8\n  }\n}, re.createElement(\"a\", {\n  href: \"https://refine.dev\",\n  target: \"_blank\",\n  rel: \"noreferrer\"\n}, re.createElement(\"button\", null, \"Documentation\")), re.createElement(\"a\", {\n  href: \"https://refine.dev/examples\",\n  target: \"_blank\",\n  rel: \"noreferrer\"\n}, re.createElement(\"button\", null, \"Examples\")), re.createElement(\"a\", {\n  href: \"https://discord.gg/refine\",\n  target: \"_blank\",\n  rel: \"noreferrer\"\n}, re.createElement(\"button\", null, \"Community\"))));\nimport _ from \"react\";\nimport { QueryClientProvider as va, QueryClient as Jr } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools as ha } from \"@tanstack/react-query-devtools\";\nimport { useEffect as xa } from \"react\";\nimport { useContext as De } from \"react\";\nvar Ca = \"3.101.0\",\n  qr = () => {\n    let e = De(H),\n      t = De(Le),\n      r = De(Re),\n      o = De(Ye),\n      s = De(_e),\n      {\n        i18nProvider: a\n      } = De(de),\n      n = De(je),\n      m = De(Ie),\n      {\n        resources: C\n      } = B(),\n      u = e.isProvided,\n      l = !!t.create || !!t.get || !!t.update,\n      y = !!(r != null && r.publish) || !!(r != null && r.subscribe) || !!(r != null && r.unsubscribe),\n      R = !!o.useHistory || !!o.Link || !!o.Prompt || !!o.useLocation || !!o.useParams,\n      f = !!s,\n      d = !!(a != null && a.changeLocale) || !!(a != null && a.getLocale) || !!(a != null && a.translate),\n      p = !!n.close || !!n.open,\n      c = !!m.can;\n    return {\n      providers: {\n        auth: u,\n        auditLog: l,\n        live: y,\n        router: R,\n        data: f,\n        i18n: d,\n        notification: p,\n        accessControl: c\n      },\n      version: Ca,\n      resourceCount: C.length\n    };\n  };\nvar Ra = e => {\n    let t = JSON.stringify(e || {});\n    return typeof btoa < \"u\" ? btoa(t) : Buffer.from(t).toString(\"base64\");\n  },\n  Yr = () => {\n    let e = qr();\n    return xa(() => {\n      if (typeof window > \"u\" && !Image) return;\n      let t = new Image();\n      t.src = `https://telemetry.refine.dev/telemetry?payload=${Ra(e)}`;\n    }, []), null;\n  };\nimport { useMemo as Da } from \"react\";\nimport { useRef as Pa } from \"react\";\nimport ba from \"lodash-es/isEqual\";\nvar Zr = e => {\n  let t = Pa(e);\n  return ba(t.current, e) || (t.current = e), t.current;\n};\nvar $t = (e, t) => {\n  let r = Zr(t);\n  return Da(e, r);\n};\nvar Ea = _ref70 => {\n  let {\n    authProvider: e,\n    dataProvider: t,\n    routerProvider: r,\n    notificationProvider: o,\n    accessControlProvider: s,\n    auditLogProvider: a,\n    resources: n,\n    DashboardPage: m,\n    ReadyPage: C,\n    LoginPage: u,\n    catchAll: l,\n    children: y,\n    liveProvider: R,\n    i18nProvider: f,\n    mutationMode: d,\n    syncWithLocation: p,\n    warnWhenUnsavedChanges: c,\n    undoableTimeout: i,\n    Title: g,\n    Layout: T,\n    Sider: x,\n    Header: P,\n    Footer: b,\n    OffLayoutArea: v,\n    reactQueryClientConfig: D,\n    reactQueryDevtoolConfig: h,\n    liveMode: S,\n    onLiveEvent: V,\n    disableTelemetry: Q,\n    options: L\n  } = _ref70;\n  let {\n      optionsWithDefaults: U,\n      disableTelemetryWithDefault: A,\n      reactQueryWithDefaults: I\n    } = Mt({\n      options: L,\n      disableTelemetry: Q,\n      liveMode: S,\n      mutationMode: d,\n      reactQueryClientConfig: D,\n      reactQueryDevtoolConfig: h,\n      syncWithLocation: p,\n      warnWhenUnsavedChanges: c,\n      undoableTimeout: i\n    }),\n    Z = $t(() => {\n      var pe;\n      return I.clientConfig instanceof Jr ? I.clientConfig : new Jr({\n        ...I.clientConfig,\n        defaultOptions: {\n          ...I.clientConfig.defaultOptions,\n          queries: {\n            refetchOnWindowFocus: !1,\n            keepPreviousData: !0,\n            ...((pe = I.clientConfig.defaultOptions) == null ? void 0 : pe.queries)\n          }\n        }\n      });\n    }, [I.clientConfig]),\n    ce = _.useMemo(() => typeof o == \"function\" ? o : () => o != null ? o : {}, [o])(),\n    K = $t(() => {\n      let pe = [];\n      return n == null || n.forEach(O => {\n        var fe;\n        pe.push({\n          key: O.key,\n          name: O.name,\n          label: (fe = O.options) == null ? void 0 : fe.label,\n          icon: O.icon,\n          route: We(O, n),\n          canCreate: !!O.create,\n          canEdit: !!O.edit,\n          canShow: !!O.show,\n          canDelete: O.canDelete,\n          create: O.create,\n          show: O.show,\n          list: O.list,\n          edit: O.edit,\n          options: O.options,\n          parentName: O.parentName\n        });\n      }), pe;\n    }, [n]);\n  if (K.length === 0) return C ? _.createElement(C, null) : _.createElement(Ft, null);\n  let {\n    RouterComponent: j = _.Fragment\n  } = r;\n  return _.createElement(va, {\n    client: Z\n  }, _.createElement(xr, {\n    ...ce\n  }, _.createElement(Zt, {\n    ...(e != null ? e : {}),\n    isProvided: Boolean(e)\n  }, _.createElement(dr, {\n    ...t\n  }, _.createElement(fr, {\n    liveProvider: R\n  }, _.createElement(Sr, {\n    ...r\n  }, _.createElement(Cr, {\n    resources: K\n  }, _.createElement(Pr, {\n    i18nProvider: f\n  }, _.createElement(Lr, {\n    ...(s != null ? s : {})\n  }, _.createElement(Hr, {\n    ...(a != null ? a : {})\n  }, _.createElement(wt, null, _.createElement(ar, {\n    mutationMode: U.mutationMode,\n    warnWhenUnsavedChanges: U.warnWhenUnsavedChanges,\n    syncWithLocation: U.syncWithLocation,\n    Title: g,\n    undoableTimeout: U.undoableTimeout,\n    catchAll: l,\n    DashboardPage: m,\n    LoginPage: u,\n    Layout: T,\n    Sider: x,\n    Footer: b,\n    Header: P,\n    OffLayoutArea: v,\n    hasDashboard: !!m,\n    liveMode: U.liveMode,\n    onLiveEvent: V,\n    options: U\n  }, _.createElement(Dr, null, _.createElement(j, null, y, !A && _.createElement(Yr, null), _.createElement(Ot, null)))))))))))))), I.devtoolConfig === !1 ? null : _.createElement(ha, {\n    initialIsOpen: !1,\n    position: \"bottom-right\",\n    ...I.devtoolConfig\n  }));\n};\nimport { useEffect as Ma, useState as Ua } from \"react\";\nvar nr = _ref71 => {\n  let {\n    notification: e\n  } = _ref71;\n  let t = M(),\n    {\n      notificationDispatch: r\n    } = Ce(),\n    {\n      open: o\n    } = te(),\n    [s, a] = Ua(),\n    n = () => {\n      if (e.isRunning === !0 && (e.seconds === 0 && e.doMutation(), e.isSilent || o == null || o({\n        key: `${e.id}-${e.resource}-notification`,\n        type: \"progress\",\n        message: t(\"notifications.undoable\", {\n          seconds: Oe(e.seconds)\n        }, `You have ${Oe(e.seconds)} seconds to undo`),\n        cancelMutation: e.cancelMutation,\n        undoableTimeout: Oe(e.seconds)\n      }), e.seconds > 0)) {\n        s && clearTimeout(s);\n        let m = setTimeout(() => {\n          r({\n            type: \"DECREASE_NOTIFICATION_SECOND\",\n            payload: {\n              id: e.id,\n              seconds: e.seconds,\n              resource: e.resource\n            }\n          });\n        }, 1e3);\n        a(m);\n      }\n    };\n  return Ma(() => {\n    n();\n  }, [e]), null;\n};\nimport Wt, { useEffect as Sa } from \"react\";\nvar Ia = _ref72 => {\n    let {\n      children: e,\n      Layout: t,\n      Sider: r,\n      Header: o,\n      Title: s,\n      Footer: a,\n      OffLayoutArea: n\n    } = _ref72;\n    let {\n        Layout: m,\n        Footer: C,\n        Header: u,\n        Sider: l,\n        Title: y,\n        OffLayoutArea: R\n      } = Se(),\n      f = t != null ? t : m;\n    return Wt.createElement(f, {\n      Sider: r != null ? r : l,\n      Header: o != null ? o : u,\n      Footer: a != null ? a : C,\n      Title: s != null ? s : y,\n      OffLayoutArea: n != null ? n : R\n    }, e, Wt.createElement(La, null));\n  },\n  La = () => {\n    let {\n        Prompt: e\n      } = w(),\n      t = M(),\n      {\n        warnWhen: r,\n        setWarnWhen: o\n      } = qe(),\n      s = a => (a.preventDefault(), a.returnValue = t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"), a.returnValue);\n    return Sa(() => (r && window.addEventListener(\"beforeunload\", s), window.removeEventListener(\"beforeunload\", s)), [r]), Wt.createElement(e, {\n      when: r,\n      message: t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"),\n      setWarnWhen: o\n    });\n  };\nimport ke from \"react\";\nvar wa = _ref73 => {\n  let {\n    children: e,\n    fallback: t,\n    loading: r\n  } = _ref73;\n  let {\n      isSuccess: o,\n      isLoading: s,\n      isError: a\n    } = bt(),\n    {\n      replace: n\n    } = q(),\n    {\n      useLocation: m\n    } = w(),\n    {\n      pathname: C,\n      search: u\n    } = m();\n  if (s) return ke.createElement(ke.Fragment, null, r) || null;\n  if (a) {\n    if (!t) {\n      let l = `${C}${u}`;\n      return C.includes(\"/login\") || n(`/login?to=${encodeURIComponent(l)}`), null;\n    }\n    return ke.createElement(ke.Fragment, null, t);\n  }\n  return o ? ke.createElement(ke.Fragment, null, e) : null;\n};\nimport { useContext as Qa, useEffect as Aa } from \"react\";\nvar Ot = () => {\n  let {\n      useLocation: e\n    } = w(),\n    {\n      checkAuth: t\n    } = Qa(H),\n    r = e();\n  return Aa(() => {\n    t == null || t().catch(() => !1);\n  }, [r == null ? void 0 : r.pathname]), null;\n};\nimport He from \"react\";\nvar Va = _ref74 => {\n  let {\n    resource: e,\n    action: t,\n    params: r,\n    fallback: o,\n    children: s,\n    ...a\n  } = _ref74;\n  let {\n    data: n\n  } = wr({\n    resource: e,\n    action: t,\n    params: r\n  });\n  return n != null && n.can ? He.isValidElement(s) ? He.cloneElement(s, a) : He.createElement(He.Fragment, null, s) : (n == null ? void 0 : n.can) === !1 ? He.createElement(He.Fragment, null, o != null ? o : null) : null;\n};\nimport Je, { useEffect as Ba } from \"react\";\nvar Xr = [`\n    .banner::before,\n    .banner::after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n    `, `\n    .banner::before {\n        background-image: linear-gradient(\n            270deg,\n            rgba(255, 76, 77, 0.35) 0%,\n            rgba(255, 153, 51, 0.35) 12.5%,\n            rgba(255, 191, 0, 0.35) 25%,\n            rgba(38, 217, 127, 0.35) 37.5%,\n            rgba(71, 235, 235, 0.35) 50%,\n            rgba(0, 128, 255, 0.35) 62.5%,\n            rgba(51, 51, 255, 0.35) 75%,\n            rgba(128, 0, 255, 0.35) 87.5%,\n            rgba(237, 94, 201, 0.35) 100%\n        );\n        background-position: 0 0;\n        background-size: 200% 100%;\n        background-repeat: repeat-x;\n        animation: bgpos 4s linear infinite;\n      }\n    `, `\n    .banner::after {\n        background: linear-gradient(\n          180deg,\n          rgba(13, 13, 13, 0.85) 0%,\n          rgba(13, 13, 13, 0) 100%\n        );\n    }\n    `, `\n    @keyframes bgpos {\n        0% {\n            background-position: 0 0;\n        }\n\n        100% {\n            background-position: -200% 0;\n        }\n    }\n    `];\nvar Na = () => (Ba(() => {\n  let e = document.createElement(\"style\");\n  document.head.appendChild(e), Xr.forEach(t => {\n    var r;\n    return (r = e.sheet) == null ? void 0 : r.insertRule(t, e.sheet.cssRules.length);\n  });\n}, []), Je.createElement(\"div\", {\n  className: \"banner\",\n  style: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"relative\",\n    padding: \"8px 16px\",\n    backgroundColor: \"#0d0d0d\",\n    borderBottom: \"1px solid rgba(255, 255, 255, 0.15)\"\n  }\n}, Je.createElement(\"a\", {\n  href: \"https://github.com/refinedev/refine?ref=gh-banner\",\n  target: \"_blank\",\n  rel: \"noreferrer\",\n  style: {\n    all: \"unset\"\n  }\n}, Je.createElement(\"div\", {\n  className: \"content\",\n  style: {\n    position: \"relative\",\n    zIndex: 2,\n    color: \"#fff\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    gap: \"8px\"\n  }\n}, Je.createElement(\"span\", {\n  className: \"wizard\",\n  style: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"32px\",\n    height: \"32px\",\n    fontSize: \"32px\",\n    lineHeight: \"32px\"\n  }\n}, \"\\u{1F9D9}\\u200D\\u2642\\uFE0F\"), Je.createElement(\"span\", {\n  className: \"text\",\n  style: {\n    padding: \"4px 0\",\n    fontSize: \"16px\",\n    lineHeight: \"24px\",\n    textShadow: \"0px 0px 4px rgba(255, 255, 255, 0.5)\"\n  }\n}, \"Refine grants your wishes! Please give us a \\u2B50\\uFE0F on GitHub to keep the magic going.\")))));\nexport { ga as AuthPage, wa as Authenticated, Va as CanAccess, ya as ErrorComponent, Na as GitHubBanner, Ia as LayoutWrapper, Et as LoginPage, Ft as ReadyPage, Ea as Refine, Ot as RouteChangeHandler, nr as UndoableQueue, ct as createTreeView, Lo as file2Base64, Io as getDefaultFilter, So as getDefaultSortOrder, lt as getNextPageParam, dt as getPreviousPageParam, or as handleUseParams, ot as importCSVMapper, st as parseTableParams, Uo as parseTableParamsFromQuery, We as routeGenerator, it as setInitialFilters, ut as setInitialSorters, at as stringifyTableParams, we as unionFilters, nt as unionSorters, ts as useApiUrl, bt as useAuthenticated, uf as useBreadcrumb, wr as useCan, im as useCanWithoutCache, Ce as useCancelNotification, W as useCheckError, ze as useCreate, At as useCreateMany, os as useCustom, as as useCustomMutation, k as useDataProvider, Go as useDelete, es as useDeleteMany, cd as useExport, Rt as useForgotPassword, Td as useForm, gt as useGetIdentity, ws as useGetLocale, $ as useHandleNotification, Nd as useImport, ps as useInfiniteList, ie as useInvalidate, vo as useIsExistAuthentication, Ke as useList, Tr as useLiveMode, Ve as useLog, Gm as useLogList, $e as useLogin, Ct as useLogout, St as useMany, da as useMenu, Fd as useModal, le as useMutationMode, q as useNavigation, te as useNotification, Ge as useOne, oo as usePermissions, ne as usePublish, Er as useRedirectionAfterSubmission, Se as useRefineContext, xt as useRegister, B as useResource, be as useResourceSubscription, J as useResourceWithRoute, w as useRouterContext, gm as useSelect, Ms as useSetLocale, Md as useShow, Sp as useSubscription, Bt as useSyncWithLocation, Em as useTable, Ns as useTitle, M as useTranslate, Qt as useUpdate, Yo as useUpdateMany, Pt as useUpdatePassword, qe as useWarnAboutChange, Qe as userFriendlyResourceName };","map":{"version":3,"names":["Ze","useEffect","ma","useState","fa","useContext","to","Yt","useQueryClient","eo","H","createContext","Zt","_ref","children","e","isProvided","t","r","replace","o","q","s","a","invalidateAuthStore","invalidateQueries","n","l","y","R","login","call","Promise","resolve","reject","m","register","C","logout","u","checkAuth","redirectPath","createElement","Provider","value","useQuery","ro","oo","getPermissions","enabled","so","ao","gt","useGetIdentity","queryOptions","arguments","length","undefined","getUserIdentity","retry","no","useMutation","io","Ct","useLogout","mutationOptions","push","open","te","onSuccess","onError","key","type","message","name","description","uo","co","po","$e","useLogin","useLocation","w","search","close","parse","ignoreQueryPrefix","lo","mo","xt","useRegister","fo","yo","Rt","useForgotPassword","forgotPassword","To","go","Co","Pt","useUpdatePassword","updatePassword","xo","Ro","bt","Po","bo","W","useCheckError","checkError","mutate","Do","vo","useIsExistAuthentication","Ao","Oe","ho","Eo","ot","importCSVMapper","map","rr","Dt","Jt","Xt","Mo","st","current","pageSize","sorter","filters","substring","parsedCurrent","Number","parsedPageSize","parsedSorter","parsedFilters","Uo","stringify","at","skipNulls","arrayFormat","encode","pagination","er","compareFilters","operator","field","tr","compareSorters","we","unionFilters","filter","nt","unionSorters","order","it","setInitialFilters","ut","setInitialSorters","So","getDefaultSortOrder","find","Io","getDefaultFilter","Lo","FileReader","resultHandler","result","removeEventListener","addEventListener","readAsDataURL","originFileObj","onerror","Qe","userFriendlyResourceName","Pe","singular","plural","or","handleUseParams","id","decodeURIComponent","F","queryKeys","all","resourceAll","list","many","String","detail","toString","logList","vt","hasPermission","wo","parentName","We","routeGenerator","options","route","ct","hasOwnProperty","toLowerCase","trim","charAt","toUpperCase","slice","sr","Qo","ht","_ref2","ge","mutationMode","syncWithLocation","undoableTimeout","warnWhenUnsavedChanges","liveMode","redirect","afterCreate","afterClone","afterEdit","ee","hasDashboard","Title","Sider","Header","Footer","Layout","OffLayoutArea","onLiveEvent","ar","_ref3","DashboardPage","LoginPage","f","Et","catchAll","d","p","c","i","Mt","handleRefineOptions","disableTelemetry","reactQueryClientConfig","reactQueryDevtoolConfig","g","T","x","P","b","v","D","h","S","V","Q","L","U","A","I","Z","oe","ce","breadcrumb","clientConfig","reactQuery","devtoolConfig","optionsWithDefaults","disableTelemetryWithDefault","reactQueryWithDefaults","Ut","_ref4","redirectFromProps","action","redirectOptions","pt","sequentialPromises","entries","E","pickDataProvider","dataProviderName","xe","data","lt","cursor","next","Math","ceil","total","dt","prev","Ke","_ref5","resource","config","successNotification","errorNotification","metaData","liveParams","resources","B","k","getList","M","$","be","types","params","hasPagination","sort","subscriptionType","channel","_ref6","queryKey","pageParam","signal","queryContext","statusCode","Vo","Ge","_ref7","getOne","ids","_ref8","Bo","St","_ref9","getMany","_ref10","Fo","$o","Lt","useReducer","No","It","mt","notifications","notificationDispatch","ko","Ho","undoableQueueReducer","payload","isRunning","seconds","wt","_ref11","window","nr","notification","ir","Qt","useUpdate","le","ne","log","Ve","Ce","ie","_ref12","values","onCancel","update","variables","doMutation","then","catch","cancelMutation","isSilent","onMutate","_ref13","getQueriesData","cancelQueries","silent","setQueriesData","previousQueries","onSettled","_ref14","invalidates","_ref15","date","Date","getQueryData","Object","keys","reduce","fields","operation","previousData","meta","_ref16","setQueryData","Oo","ur","ze","useCreate","_ref17","create","_ref18","_ref19","Wo","Ko","cr","Go","useDelete","_ref20","deleteOne","_ref21","_ref22","_ref23","removeQueries","_ref24","zo","_o","At","useCreateMany","_ref25","createMany","_ref26","_ref27","jo","qo","pr","Yo","useUpdateMany","_ref28","mutationFn","updateMany","_ref29","includes","_ref30","forEach","_ref31","_ref32","Zo","Jo","Xo","es","useDeleteMany","_ref33","deleteMany","_ref34","_ref35","_ref36","_ref37","ts","getApiUrl","rs","os","_ref38","url","method","custom","_ref39","Error","ss","as","useCustomMutation","_ref40","headers","_ref41","_ref42","useCallback","is","us","lr","ns","defaultDataProvider","default","_e","dr","_ref43","useDataProvider","useInfiniteQuery","cs","ps","_ref44","_ref45","_ref46","getNextPageParam","getPreviousPageParam","yr","ls","ds","mr","Re","fr","_ref47","liveProvider","_ref48","subscribe","callback","unsubscribe","ms","Tr","fs","ys","Sp","_ref49","Ts","usePublish","publish","gs","gr","Ue","Cr","_ref50","useResource","resourceName","resourceNameOrRouteName","recordItemId","J","useParams","Cs","xs","useResourceWithRoute","Rs","useCancelNotification","Ds","Ps","bs","je","xr","_ref51","useNotification","vs","useHandleNotification","hs","Es","Rr","de","Pr","_ref52","i18nProvider","Ms","useSetLocale","changeLocale","Us","useMemo","Ss","useTranslate","translate","Is","Ls","ws","useGetLocale","getLocale","Qs","useMutationMode","vr","br","As","Vt","Dr","_ref53","warnWhen","setWarnWhen","qe","useWarnAboutChange","Boolean","Vs","Bt","useSyncWithLocation","Bs","Ns","useTitle","ks","Se","useRefineContext","Hs","ExportToCsv","Fs","cd","useExport","maxItemCount","mapData","exportOptions","toLocaleString","isLoading","triggerExport","filename","useKeysAsHeaders","generateCsv","hr","Td","useForm","onMutationSuccess","onMutationError","createMutationOptions","updateMutationOptions","rt","K","j","pe","isFetching","O","fe","ve","Xe","ye","et","Tt","tt","he","Er","formLoading","mutationResult","onFinish","se","N","G","setTimeout","Ee","ae","Te","Me","qt","Fe","queryResult","setId","$s","useRedirectionAfterSubmission","show","edit","_ref54","canShow","canEdit","canCreate","useNavigation","useHistory","handleUrl","editUrl","encodeURIComponent","cloneUrl","showUrl","createUrl","clone","listUrl","_len","Array","_key","_len2","_key2","goBack","Os","Ws","Md","useShow","showId","setShowId","Ks","Nt","Gs","zs","Nd","useImport","paparseOptions","batchSize","MAX_SAFE_INTEGER","onProgress","handleCleanup","succeeded","errored","totalAmount","processedAmount","_ref55","file","complete","_ref56","response","mutateAsync","_ref57","request","currentBatchLength","_ref58","inputProps","accept","onChange","target","files","handleChange","Mr","_s","Fd","useModal","defaultVisible","visible","qs","Ur","js","Prompt","Link","Ye","Sr","_ref59","routes","useRouterContext","Ys","Zs","Ir","Ie","Lr","_ref60","can","wr","_ref61","icon","Js","im","useCanWithoutCache","Qr","Xs","kt","ea","ta","ft","gm","optionLabel","optionValue","debounce","defaultValueQueryOptions","fetchSize","defaultValue","onSearch","isArray","label","concat","defaultValueQueryResult","ra","yt","Ar","Vr","Br","Nr","oa","sa","Em","initialCurrent","initialPageSize","initialSorter","permanentSorter","defaultSetFilterBehavior","initialFilter","permanentFilter","pathname","_ref62","currentQueryParams","shallow","Kt","Gt","zt","_t","setFiltersFn","jt","setCurrent","setPageSize","pageCount","tableQueryResult","setSorter","setFilters","createLinkForSyncWithLocation","Fr","$r","aa","kr","Le","Hr","_ref63","get","useLog","logMutationOptions","renameMutationOptions","refetch","auditLog","permissions","author","rename","na","ia","Gm","_ref64","ua","ca","useInvalidate","_ref65","pa","la","uf","useBreadcrumb","breadcrumbs","href","Be","da","useMenu","unshift","hide","defaultOpenKeys","selectedKey","menuItems","ya","ErrorComponent","Fragment","onClick","X","Or","onSubmit","preventDefault","username","password","size","autoCorrect","spellCheck","autoCapitalize","autoFocus","required","Ne","z","Ht","Wr","_ref66","providers","registerLink","forgotPasswordLink","rememberMe","contentProps","wrapperProps","renderContent","formProps","renderLink","renderProviders","style","display","alignItems","justifyContent","marginBottom","providerName","textAlign","email","remember","flexDirection","padding","checked","Y","Kr","Gr","_ref67","loginLink","disabled","ue","Ta","zr","_ref68","me","_r","jr","_ref69","confirmPassword","ga","re","Ft","ReadyPage","gap","rel","_","QueryClientProvider","va","QueryClient","Jr","ReactQueryDevtools","ha","xa","De","Ca","qr","useTelemetryData","auth","live","router","i18n","accessControl","version","resourceCount","Ra","JSON","btoa","Buffer","from","Yr","Telemetry","Image","src","Da","useRef","Pa","ba","Zr","$t","useDeepMemo","Ea","_ref70","authProvider","dataProvider","routerProvider","notificationProvider","accessControlProvider","auditLogProvider","defaultOptions","queries","refetchOnWindowFocus","keepPreviousData","canDelete","RouterComponent","client","Ot","initialIsOpen","position","Ma","Ua","_ref71","cancelNotification","clearTimeout","Wt","Sa","Ia","_ref72","La","UnsavedPrompt","returnValue","when","ke","wa","_ref73","fallback","loading","isSuccess","isError","Qa","Aa","RouteChangeHandler","He","Va","_ref74","isValidElement","cloneElement","Je","Ba","Xr","Na","GitHubBanner","document","head","appendChild","sheet","insertRule","cssRules","className","backgroundColor","borderBottom","zIndex","color","width","height","fontSize","lineHeight","textShadow","AuthPage","Authenticated","CanAccess","LayoutWrapper","Refine","UndoableQueue","createTreeView","file2Base64","parseTableParams","parseTableParamsFromQuery","stringifyTableParams","useApiUrl","useAuthenticated","useCan","useCustom","useInfiniteList","useList","useLiveMode","useLogList","useMany","useOne","usePermissions","useResourceSubscription","useSelect","useSubscription","useTable"],"sources":["/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/pages/error/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auth/usePermissions/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/auth/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auth/useGetIdentity/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auth/useLogout/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auth/useLogin/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auth/useRegister/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auth/useForgotPassword/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auth/useUpdatePassword/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auth/useAuthenticated/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auth/useCheckError/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auth/useIsExistAuthentication.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useList.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/userFriendlySeconds/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/importCSVMapper/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/userFriendlyResourceName/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/table/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/upload/file2Base64/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/handleUseParams/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/queryKeys/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/hasPermission/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/routeGenerator/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/treeView/createTreeView/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/humanizeString/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/refine/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/layoutWrapper/defaultLayout/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/handleRefineOptions/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/redirectPage/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/sequentialPromises/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/pickDataProvider/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/handleMultiple/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/definitions/helpers/useInfinitePagination/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useOne.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useMany.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useUpdate.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/undoableQueue/undoableQueueContext.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useCreate.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useDelete.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useCreateMany.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useUpdateMany.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useDeleteMany.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useApiUrl.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useCustom.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useCustomMutation.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useDataProvider.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/data/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/data/useInfiniteList.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/live/useResourceSubscription/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/live/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/live/useLiveMode/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/live/useSubscription/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/live/usePublish/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/resource/useResource/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/resource/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/resource/useResourceWithRoute/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/notification/useCancelNotification/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/notification/useNotification/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/notification/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/notification/useHandleNotification/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/translate/useSetLocale.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/translation/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/translate/useTranslate.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/translate/useGetLocale.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/refine/useMutationMode.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/refine/useWarnAboutChange/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/unsavedWarn/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/refine/useSyncWithLocation.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/refine/useTitle.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/refine/useRefineContext.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/export/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/form/useForm.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/redirection/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/navigation/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/show/useShow.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/import/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/modal/useModal/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/router/useRouterContext.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/router/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/accessControl/useCan/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/accessControl/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/accessControl/useCanWithoutCache.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/useSelect/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/useTable/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auditLog/useLog/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/contexts/auditLog/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/auditLog/useLogList/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/invalidate/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/breadcrumb/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/menu/useMenu.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/pages/login/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/pages/auth/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/pages/auth/components/login/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/pages/auth/components/register/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/pages/auth/components/forgotPassword/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/pages/auth/components/updatePassword/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/pages/ready/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/containers/refine/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/telemetry/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/useTelemetryData/index.ts","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/deepMemo/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/hooks/memoized/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/undoableQueue/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/layoutWrapper/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/authenticated/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/routeChangeHandler/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/canAccess/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/gh-banner/index.tsx","/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/node_modules/@pankod/refine-core/src/components/gh-banner/styles.ts"],"sourcesContent":["export * from \"@tanstack/react-query\";\n\nexport * from \"./components\";\nexport * from \"./hooks\";\n\nexport {\n    Action,\n    ActionWithPage,\n    AccessControlProvider,\n    AuditLogProvider,\n    AuthProvider,\n    BaseKey,\n    BaseRecord,\n    CanParams,\n    CanReturnType,\n    ConditionalFilter,\n    CreateManyResponse,\n    CreateResponse,\n    CrudFilter,\n    CrudFilters,\n    CrudOperators,\n    CrudSort,\n    CrudSorting,\n    CustomResponse,\n    DeleteManyResponse,\n    DeleteOneResponse,\n    FormAction,\n    GetListResponse,\n    GetManyResponse,\n    GetOneResponse,\n    HttpError,\n    LayoutProps,\n    LiveEvent,\n    LiveModeProps,\n    LogicalFilter,\n    LogParams,\n    MapDataFn,\n    MetaDataQuery,\n    MutationMode,\n    NotificationProvider,\n    OpenNotificationParams,\n    Option,\n    Pagination,\n    PromptProps,\n    RedirectionTypes,\n    RedirectAction,\n    ResourceErrorRouterParams,\n    ResourceProps,\n    ResourceRouterParams,\n    RouteAction,\n    SortOrder,\n    SuccessErrorNotification,\n    TitleProps,\n    TranslationProvider,\n    UpdateManyResponse,\n    UpdateResponse,\n    I18nProvider,\n    IAccessControlContext,\n    IAuthContext,\n    IDataContextProvider as DataProvider,\n    ILiveContext as LiveProvider,\n    ILog,\n    ILogData,\n    ILoginForm,\n    INotificationContext,\n    IResourceComponents,\n    IResourceComponentsProps,\n    IResourceContext as ResourceProvider,\n    ITranslationContext,\n    IResourceItem,\n    IRouterProvider,\n    ITreeMenu,\n    IQueryKeys,\n} from \"./interfaces\";\n\n// all auth types\nexport * from \"./interfaces/auth\";\n\nexport {\n    getDefaultFilter,\n    getDefaultSortOrder,\n    parseTableParams,\n    parseTableParamsFromQuery,\n    setInitialFilters,\n    setInitialSorters,\n    stringifyTableParams,\n    unionFilters,\n    unionSorters,\n} from \"./definitions/table\";\nexport {\n    createTreeView,\n    handleUseParams,\n    importCSVMapper,\n    routeGenerator,\n    userFriendlyResourceName,\n    getNextPageParam,\n    getPreviousPageParam,\n} from \"./definitions/helpers\";\nexport { file2Base64 } from \"./definitions/upload\";\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n    useNavigation,\n    useTranslate,\n    useResourceWithRoute,\n    useRouterContext,\n} from \"@hooks\";\nimport { ResourceErrorRouterParams, ActionWithPage } from \"../../../interfaces\";\n\n/**\n * When the app is navigated to a non-existent route, refine shows a default error page.\n * A custom error component can be used for this error page.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#catchall} for more details.\n */\nexport const ErrorComponent: React.FC = () => {\n    const [errorMessage, setErrorMessage] = useState<string>();\n    const { push } = useNavigation();\n    const translate = useTranslate();\n    const actionTypes: ActionWithPage[] = [\"edit\", \"create\", \"show\"];\n\n    const { useParams } = useRouterContext();\n\n    const params = useParams<ResourceErrorRouterParams>();\n    const resource = useResourceWithRoute();\n\n    useEffect(() => {\n        if (params.resource) {\n            const resourceFromRoute = resource(params.resource);\n            if (\n                params.action &&\n                actionTypes.includes(params.action) &&\n                !resourceFromRoute[params.action]\n            ) {\n                setErrorMessage(\n                    translate(\n                        \"pages.error.info\",\n                        {\n                            action: params.action,\n                            resource: params.resource,\n                        },\n                        `You may have forgotten to add the \"${params.action}\" component to \"${params.resource}\" resource.`,\n                    ),\n                );\n            }\n        }\n    }, [params]);\n\n    return (\n        <>\n            <h1>\n                {translate(\n                    \"pages.error.404\",\n                    undefined,\n                    \"Sorry, the page you visited does not exist.\",\n                )}\n            </h1>\n            {errorMessage && <p>{errorMessage}</p>}\n            <button onClick={() => push(\"/\")}>\n                {translate(\"pages.error.backHome\", undefined, \"Back Home\")}\n            </button>\n        </>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\n/**\n * `usePermissions` calls the `getPermissions` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/usePermissions} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport const usePermissions = <TData = any>(\n    options?: UseQueryOptions<TData>,\n): UseQueryResult<TData, unknown> => {\n    const { getPermissions } = useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery<TData>(\n        [\"usePermissions\"],\n        // Enabled check for `getPermissions` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        getPermissions ?? (() => Promise.resolve(undefined)),\n        {\n            enabled: !!getPermissions,\n            ...options,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nimport { useNavigation } from \"@hooks\";\nimport { IAuthContext } from \"../../interfaces\";\n\nexport const AuthContext = React.createContext<IAuthContext>({});\n\nexport const AuthContextProvider: React.FC<\n    IAuthContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, isProvided, ...authOperations }) => {\n    const { replace } = useNavigation();\n    const queryClient = useQueryClient();\n\n    const invalidateAuthStore = () => {\n        queryClient.invalidateQueries([\"useAuthenticated\"]);\n        queryClient.invalidateQueries([\"getUserIdentity\"]);\n        queryClient.invalidateQueries([\"usePermissions\"]);\n    };\n\n    const loginFunc = async (params: any) => {\n        try {\n            const result = await authOperations.login?.(params);\n\n            invalidateAuthStore();\n            return Promise.resolve(result);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const registerFunc = async (params: any) => {\n        try {\n            const result = await authOperations.register?.(params);\n\n            invalidateAuthStore();\n            return Promise.resolve(result);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const logoutFunc = async (params: any) => {\n        try {\n            const redirectPath = await authOperations.logout?.(params);\n\n            invalidateAuthStore();\n\n            return Promise.resolve(redirectPath);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const checkAuthFunc = async (params: any) => {\n        try {\n            await authOperations.checkAuth?.(params);\n            return Promise.resolve();\n        } catch (error) {\n            if ((error as { redirectPath?: string })?.redirectPath) {\n                replace((error as { redirectPath: string }).redirectPath);\n            }\n\n            return Promise.reject(error);\n        }\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                ...authOperations,\n                login: loginFunc,\n                logout: logoutFunc,\n                checkAuth: checkAuthFunc,\n                register: registerFunc,\n                isProvided,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n","import React from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\n\nexport type UseGetIdentityProps<TData> = {\n    queryOptions?: UseQueryOptions<TData>;\n};\n\n/**\n * `useGetIdentity` calls the `getUserIdentity` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useGetIdentity} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport const useGetIdentity = <TData = any>({\n    queryOptions,\n}: UseGetIdentityProps<TData> = {}): UseQueryResult<TData, unknown> => {\n    const { getUserIdentity } = React.useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery<TData>(\n        [\"getUserIdentity\"],\n        // Enabled check for `getUserIdentity` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        getUserIdentity ?? (() => Promise.resolve({})),\n        {\n            enabled: !!getUserIdentity,\n            retry: false,\n            ...queryOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext, TLogoutData } from \"../../../interfaces\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\ntype Variables = {\n    redirectPath?: string | false;\n};\n\nexport type UseLogoutProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TLogoutData,\n            Error,\n            (TVariables & Variables) | void,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useLogout` calls the `logout` method from the {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogout} for more details.\n *\n */\nexport const useLogout = <TVariables = {}>({\n    mutationOptions,\n}: UseLogoutProps<TVariables> = {}): UseMutationResult<\n    TLogoutData,\n    Error,\n    (TVariables & Variables) | void,\n    unknown\n> => {\n    const { push } = useNavigation();\n    const { logout: logoutFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n    const { open } = useNotification();\n\n    const queryResponse = useMutation<\n        TLogoutData,\n        Error,\n        (TVariables & Variables) | void,\n        unknown\n    >([\"useLogout\"], logoutFromContext, {\n        onSuccess: (data, variables) => {\n            const redirectPath = variables?.redirectPath ?? data;\n\n            if (redirectPath === false) {\n                return;\n            }\n\n            if (redirectPath) {\n                push(redirectPath);\n                return;\n            }\n\n            push(\"/login\");\n        },\n        onError: (error: Error) => {\n            open?.({\n                key: \"useLogout-error\",\n                type: \"error\",\n                message: error?.name || \"Logout Error\",\n                description:\n                    error?.message || \"Something went wrong during logout\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport qs from \"qs\";\n\nimport { useNavigation, useRouterContext, useNotification } from \"@hooks\";\nimport { AuthContext } from \"@contexts/auth\";\n\nimport { IAuthContext, TLoginData } from \"../../../interfaces\";\n\nexport type UseLoginProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TLoginData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useLogin` calls `login` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogin} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useLogin = <TVariables = {}>({\n    mutationOptions,\n}: UseLoginProps<TVariables> = {}): UseMutationResult<\n    TLoginData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { login: loginFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { useLocation } = useRouterContext();\n    const { search } = useLocation();\n    const { close, open } = useNotification();\n\n    const { to } = qs.parse(search, {\n        ignoreQueryPrefix: true,\n    });\n\n    const queryResponse = useMutation<TLoginData, Error, TVariables, unknown>(\n        [\"useLogin\"],\n        loginFromContext,\n        {\n            onSuccess: (redirectPathFromAuth) => {\n                if (to) {\n                    return replace(to as string);\n                }\n\n                if (redirectPathFromAuth !== false) {\n                    if (typeof redirectPathFromAuth === \"string\") {\n                        replace(redirectPathFromAuth);\n                    } else {\n                        replace(\"/\");\n                    }\n                }\n                close?.(\"login-error\");\n            },\n            onError: (error: any) => {\n                open?.({\n                    message: error?.name || \"Login Error\",\n                    description: error?.message || \"Invalid credentials\",\n                    key: \"login-error\",\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\nimport { IAuthContext, TRegisterData } from \"../../../interfaces\";\n\nexport type UseRegisterProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TRegisterData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useRegister` calls `register` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useRegister} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useRegister = <TVariables = {}>({\n    mutationOptions,\n}: UseRegisterProps<TVariables> = {}): UseMutationResult<\n    TRegisterData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { register: registerFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n\n    const queryResponse = useMutation<\n        TRegisterData,\n        Error,\n        TVariables,\n        unknown\n    >([\"useRegister\"], registerFromContext, {\n        onSuccess: (redirectPathFromAuth) => {\n            if (redirectPathFromAuth !== false) {\n                if (redirectPathFromAuth) {\n                    replace(redirectPathFromAuth);\n                } else {\n                    replace(\"/\");\n                }\n            }\n            close?.(\"register-error\");\n        },\n        onError: (error: any) => {\n            open?.({\n                message: error?.name || \"Register Error\",\n                description: error?.message || \"Error while registering\",\n                key: \"register-error\",\n                type: \"error\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\nimport { IAuthContext, TForgotPasswordData } from \"../../../interfaces\";\n\nexport type UseForgotPasswordProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TForgotPasswordData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useForgotPassword` calls `forgotPassword` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useForgotPassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useForgotPassword = <TVariables = {}>({\n    mutationOptions,\n}: UseForgotPasswordProps<TVariables> = {}): UseMutationResult<\n    TForgotPasswordData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { forgotPassword: forgotPasswordFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n\n    const queryResponse = useMutation<\n        TForgotPasswordData,\n        Error,\n        TVariables,\n        unknown\n    >([\"useForgotPassword\"], forgotPasswordFromContext, {\n        onSuccess: (redirectPathFromAuth) => {\n            if (redirectPathFromAuth !== false) {\n                if (redirectPathFromAuth) {\n                    replace(redirectPathFromAuth);\n                }\n            }\n            close?.(\"forgot-password-error\");\n        },\n        onError: (error: any) => {\n            open?.({\n                message: error?.name || \"Forgot Password Error\",\n                description: error?.message || \"Error while resetting password\",\n                key: \"forgot-password-error\",\n                type: \"error\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport qs from \"qs\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification, useRouterContext } from \"@hooks\";\nimport {\n    IAuthContext,\n    TUpdatePasswordData,\n    UpdatePasswordFormTypes,\n} from \"../../../interfaces\";\n\nexport type UseUpdatePasswordProps<TVariables extends UpdatePasswordFormTypes> =\n    {\n        mutationOptions?: Omit<\n            UseMutationOptions<TUpdatePasswordData, Error, TVariables, unknown>,\n            \"mutationFn\" | \"onError\" | \"onSuccess\"\n        >;\n    };\n\n/**\n * `useUpdatePassword` calls `updatePassword` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useUpdatePassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useUpdatePassword = <\n    TVariables extends UpdatePasswordFormTypes = {},\n>({\n    mutationOptions,\n}: UseUpdatePasswordProps<TVariables> = {}): UseMutationResult<\n    TUpdatePasswordData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { updatePassword: updatePasswordFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n    const { useLocation } = useRouterContext();\n\n    const { search } = useLocation();\n\n    const queryStrings = qs.parse(search, {\n        ignoreQueryPrefix: true,\n    });\n\n    const queryResponse = useMutation<\n        TUpdatePasswordData,\n        Error,\n        TVariables,\n        unknown\n    >(\n        [\"useUpdatePassword\"],\n        async (variables) => {\n            return updatePasswordFromContext?.({\n                ...queryStrings,\n                ...variables,\n            });\n        },\n        {\n            onSuccess: (redirectPathFromAuth) => {\n                if (redirectPathFromAuth !== false) {\n                    if (redirectPathFromAuth) {\n                        replace(redirectPathFromAuth);\n                    }\n                }\n                close?.(\"update-password-error\");\n            },\n            onError: (error: any) => {\n                open?.({\n                    message: error?.name || \"Update Password Error\",\n                    description:\n                        error?.message || \"Error while updating password\",\n                    key: \"update-password-error\",\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext } from \"react\";\nimport { useQuery, UseQueryResult } from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\n\n/**\n *  `useAuthenticated` calls the `checkAuth` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated} for more details.\n *\n */\nexport const useAuthenticated = (\n    params?: any,\n): UseQueryResult<any, unknown> => {\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery(\n        [\"useAuthenticated\", params],\n        async () => (await checkAuth?.(params)) ?? {},\n        {\n            retry: false,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport { useMutation, UseMutationResult } from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\nimport { useLogout } from \"@hooks\";\n\n/**\n * `useCheckError` calls the `checkError` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useCheckError} for more details.\n *\n */\nexport const useCheckError = (): UseMutationResult<\n    void,\n    string | undefined,\n    any,\n    unknown\n> => {\n    const { checkError: checkErrorFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { mutate: logout } = useLogout();\n\n    const queryResponse = useMutation(\n        [\"useCheckError\"],\n        checkErrorFromContext,\n        {\n            onError: (redirectPath?: string) => {\n                logout({ redirectPath });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext } from \"react\";\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../interfaces\";\n\n/**\n * A hook that the UI uses\n * @internal\n */\nexport const useIsExistAuthentication = (): boolean => {\n    const { isProvided } = useContext<IAuthContext>(AuthContext);\n\n    return isProvided || false;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport {\n    GetListResponse,\n    CrudFilters,\n    Pagination,\n    BaseRecord,\n    HttpError,\n    CrudSorting,\n    MetaDataQuery,\n    SuccessErrorNotification,\n    LiveModeProps,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useHandleNotification,\n    useResourceSubscription,\n    useTranslate,\n    useDataProvider,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport interface UseListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\nexport type UseListProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`UseListConfig`](/docs/api-reference/core/hooks/data/useList/#config-parameters)\n     */\n    config?: UseListConfig;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options,\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useList` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useList} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useList = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseListProps<TData, TError>): QueryObserverResult<\n    GetListResponse<TData>,\n    TError\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            metaData,\n            pagination: config?.pagination,\n            hasPagination: config?.hasPagination,\n            sort: config?.sort,\n            filters: config?.filters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetListResponse<TData>, TError>(\n        queryKey.list(config),\n        ({ queryKey, pageParam, signal }) => {\n            const { hasPagination, ...restConfig } = config || {};\n            return getList<TData>({\n                resource,\n                ...restConfig,\n                hasPagination,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            });\n        },\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(\n                              data,\n                              { metaData, config },\n                              resource,\n                          )\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { metaData, config }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${resource}-useList-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","export const userFriendlySecond = (miliseconds: number): number => {\n    return miliseconds / 1000; //convert to seconds\n};\n","import zip from \"lodash/zip\";\nimport fromPairs from \"lodash/fromPairs\";\nimport { MapDataFn } from \"../../../interfaces\";\n\nexport const importCSVMapper = <TItem = any, TVariables = any>(\n    data: any[][],\n    mapData: MapDataFn<TItem, TVariables> = (item) => item as any,\n): TVariables[] => {\n    const [headers, ...body] = data;\n    return body\n        .map((entry) => fromPairs(zip(headers, entry)))\n        .map((item: any, index, array: any) =>\n            mapData.call(undefined, item, index, array),\n        );\n};\n","import pluralize from \"pluralize\";\nimport { humanizeString } from \"@definitions\";\n\n/**\n * A method that the internal uses\n * @internal\n */\nexport const userFriendlyResourceName = (\n    resource = \"\",\n    type: \"singular\" | \"plural\",\n): string => {\n    const humanizeResource = humanizeString(resource);\n    if (type === \"singular\") {\n        return pluralize.singular(humanizeResource);\n    }\n    return pluralize.plural(humanizeResource);\n};\n","import qs, { IStringifyOptions } from \"qs\";\nimport unionWith from \"lodash/unionWith\";\nimport differenceWith from \"lodash/differenceWith\";\nimport warnOnce from \"warn-once\";\n\nimport {\n    CrudFilters,\n    CrudSorting,\n    CrudFilter,\n    CrudSort,\n    CrudOperators,\n    SortOrder,\n} from \"../../interfaces\";\n\nexport const parseTableParams = (url: string) => {\n    const { current, pageSize, sorter, filters } = qs.parse(\n        url.substring(1), // remove first ? character\n    );\n\n    return {\n        parsedCurrent: current && Number(current),\n        parsedPageSize: pageSize && Number(pageSize),\n        parsedSorter: (sorter as CrudSorting) ?? [],\n        parsedFilters: (filters as CrudFilters) ?? [],\n    };\n};\n\nexport const parseTableParamsFromQuery = (params: any) => {\n    const url = qs.stringify(params);\n    return parseTableParams(`/${url}`);\n};\n\nexport const stringifyTableParams = (params: {\n    pagination?: { current?: number; pageSize?: number };\n    sorter: CrudSorting;\n    filters: CrudFilters;\n    [key: string]: any;\n}): string => {\n    const options: IStringifyOptions = {\n        skipNulls: true,\n        arrayFormat: \"indices\",\n        encode: false,\n    };\n    const { pagination, sorter, filters, ...rest } = params;\n\n    const queryString = qs.stringify(\n        { ...rest, ...(pagination ? pagination : {}), sorter, filters },\n        options,\n    );\n\n    return queryString;\n};\n\nexport const compareFilters = (\n    left: CrudFilter,\n    right: CrudFilter,\n): boolean => {\n    if (\n        left.operator !== \"and\" &&\n        left.operator !== \"or\" &&\n        right.operator !== \"and\" &&\n        right.operator !== \"or\"\n    ) {\n        return (\n            (\"field\" in left ? left.field : undefined) ==\n                (\"field\" in right ? right.field : undefined) &&\n            left.operator == right.operator\n        );\n    }\n\n    return (\n        (\"key\" in left ? left.key : undefined) ==\n            (\"key\" in right ? right.key : undefined) &&\n        left.operator == right.operator\n    );\n};\n\nexport const compareSorters = (left: CrudSort, right: CrudSort): boolean =>\n    left.field == right.field;\n// Keep only one CrudFilter per type according to compareFilters\n// Items in the array that is passed first to unionWith have higher priority\n// CrudFilter items with undefined values are necessary to signify no filter\n// After union, don't keep CrudFilter items with undefined value in the result\n// Items in the arrays with higher priority are put at the end.\nexport const unionFilters = (\n    permanentFilter: CrudFilters,\n    newFilters: CrudFilters,\n    prevFilters: CrudFilters = [],\n): CrudFilters => {\n    const isKeyRequired = newFilters.filter(\n        (f) => (f.operator === \"or\" || f.operator === \"and\") && !f.key,\n    );\n\n    if (isKeyRequired.length > 1) {\n        warnOnce(\n            true,\n            `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. \\nFor more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`,\n        );\n    }\n\n    return unionWith(\n        permanentFilter,\n        newFilters,\n        prevFilters,\n        compareFilters,\n    ).filter(\n        (crudFilter) =>\n            crudFilter.value !== undefined &&\n            crudFilter.value !== null &&\n            (crudFilter.operator !== \"or\" ||\n                (crudFilter.operator === \"or\" &&\n                    crudFilter.value.length !== 0)) &&\n            (crudFilter.operator !== \"and\" ||\n                (crudFilter.operator === \"and\" &&\n                    crudFilter.value.length !== 0)),\n    );\n};\n\nexport const unionSorters = (\n    permanentSorter: CrudSorting,\n    newSorters: CrudSorting,\n): CrudSorting =>\n    unionWith(permanentSorter, newSorters, compareSorters).filter(\n        (crudSorter) =>\n            crudSorter.order !== undefined && crudSorter.order !== null,\n    );\n// Prioritize filters in the permanentFilter and put it at the end of result array\nexport const setInitialFilters = (\n    permanentFilter: CrudFilters,\n    defaultFilter: CrudFilters,\n): CrudFilters => [\n    ...differenceWith(defaultFilter, permanentFilter, compareFilters),\n    ...permanentFilter,\n];\n\nexport const setInitialSorters = (\n    permanentSorter: CrudSorting,\n    defaultSorter: CrudSorting,\n): CrudSorting => [\n    ...differenceWith(defaultSorter, permanentSorter, compareSorters),\n    ...permanentSorter,\n];\n\nexport const getDefaultSortOrder = (\n    columnName: string,\n    sorter?: CrudSorting,\n): SortOrder | undefined => {\n    if (!sorter) {\n        return undefined;\n    }\n\n    const sortItem = sorter.find((item) => item.field === columnName);\n\n    if (sortItem) {\n        return sortItem.order as SortOrder;\n    }\n\n    return undefined;\n};\n\nexport const getDefaultFilter = (\n    columnName: string,\n    filters?: CrudFilters,\n    operatorType: CrudOperators = \"eq\",\n): CrudFilter[\"value\"] | undefined => {\n    const filter = filters?.find((filter) => {\n        if (\n            filter.operator !== \"or\" &&\n            filter.operator !== \"and\" &&\n            \"field\" in filter\n        ) {\n            const { operator, field } = filter;\n            return field === columnName && operator === operatorType;\n        }\n        return undefined;\n    });\n\n    if (filter) {\n        return filter.value || [];\n    }\n\n    return undefined;\n};\n","export const file2Base64 = (file: any): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        const resultHandler = () => {\n            if (reader.result) {\n                reader.removeEventListener(\"load\", resultHandler, false);\n\n                resolve(reader.result as string);\n            }\n        };\n\n        reader.addEventListener(\"load\", resultHandler, false);\n\n        reader.readAsDataURL(file.originFileObj as Blob);\n        reader.onerror = (error) => {\n            reader.removeEventListener(\"load\", resultHandler, false);\n            return reject(error);\n        };\n    });\n};\n","export const handleUseParams = (params: any = {}): any => {\n    if (params?.id) {\n        return {\n            ...params,\n            id: decodeURIComponent(params.id),\n        };\n    }\n    return params;\n};\n","import { IQueryKeys } from \"src/interfaces\";\nimport { QueryKey } from \"@tanstack/react-query\";\n\nimport { MetaDataQuery } from \"src/interfaces\";\n\nexport const queryKeys = (\n    resource?: string,\n    dataProviderName?: string,\n    metaData?: MetaDataQuery | undefined,\n): IQueryKeys => {\n    const providerName = dataProviderName || \"default\";\n    const keys: IQueryKeys = {\n        all: [providerName],\n        resourceAll: [providerName, resource || \"\"],\n        list: (config) => [\n            ...keys.resourceAll,\n            \"list\",\n            { ...config, ...metaData } as QueryKey,\n        ],\n        many: (ids) =>\n            [\n                ...keys.resourceAll,\n                \"getMany\",\n                (ids && ids.map(String)) as QueryKey,\n                { ...metaData } as QueryKey,\n            ].filter((item) => item !== undefined),\n        detail: (id) => [\n            ...keys.resourceAll,\n            \"detail\",\n            id?.toString(),\n            { ...metaData } as QueryKey,\n        ],\n        logList: (meta) =>\n            [\"logList\", resource, meta as any, metaData as QueryKey].filter(\n                (item) => item !== undefined,\n            ),\n    };\n    return keys;\n};\n","export const hasPermission = (\n    permissions: string[] | undefined,\n    action: string | undefined,\n): boolean => {\n    if (!permissions || !action) {\n        return false;\n    }\n    return !!permissions.find((i) => i === action);\n};\n","import { ResourceProps } from \"src/interfaces\";\n\nconst getParentOf = (item: ResourceProps) => {\n    return (resourceItem: ResourceProps) =>\n        item.parentName ? resourceItem.name === item.parentName : false;\n};\n\nexport const routeGenerator = (\n    item: ResourceProps,\n    resourcesFromProps: ResourceProps[],\n): string | undefined => {\n    let route;\n\n    const resourceRoute = item.options?.route ?? item.name;\n\n    if (item.parentName) {\n        const parent = resourcesFromProps.find(getParentOf(item));\n\n        if (parent?.parentName) {\n            const routePrefix = routeGenerator(parent, resourcesFromProps);\n\n            route = `${routePrefix}/${resourceRoute}`;\n        } else if (item.parentName) {\n            const parentPrefix =\n                parent?.options?.route ?? parent?.name ?? item.parentName;\n            route = `${parentPrefix}/${resourceRoute}`;\n        }\n    } else {\n        route = resourceRoute;\n    }\n    return route;\n};\n","import { IResourceItem, ITreeMenu, IMenuItem } from \"src/interfaces\";\n\nexport const createTreeView = (\n    resources: IResourceItem[] | IMenuItem[],\n): ITreeMenu[] | ITreeMenu[] => {\n    const tree = [];\n    const resourcesRouteObject: { [key: string]: any } = {};\n    const resourcesNameObject: { [key: string]: any } = {};\n    let parent: IResourceItem | IMenuItem;\n    let child: ITreeMenu;\n\n    for (let i = 0; i < resources.length; i++) {\n        parent = resources[i];\n\n        const route = parent.route ?? parent.options?.route ?? \"\";\n\n        resourcesRouteObject[route] = parent;\n        resourcesRouteObject[route][\"children\"] = [];\n\n        resourcesNameObject[parent.name] = parent;\n        resourcesNameObject[parent.name][\"children\"] = [];\n    }\n\n    for (const name in resourcesRouteObject) {\n        if (resourcesRouteObject.hasOwnProperty(name)) {\n            child = resourcesRouteObject[name];\n\n            if (child.parentName && resourcesNameObject[child.parentName]) {\n                resourcesNameObject[child.parentName][\"children\"].push(child);\n            } else {\n                tree.push(child);\n            }\n        }\n    }\n\n    return tree;\n};\n","export const humanizeString = (text: string): string => {\n    text = text.replace(/([a-z]{1})([A-Z]{1})/g, \"$1-$2\");\n    text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, \"$1-$2$3\");\n\n    text = text\n        .toLowerCase()\n        .replace(/[_-]+/g, \" \")\n        .replace(/\\s{2,}/g, \" \")\n        .trim();\n    text = text.charAt(0).toUpperCase() + text.slice(1);\n\n    return text;\n};\n// https://www.npmjs.com/package/humanize-string\n","import React from \"react\";\n\nimport {\n    IRefineContextOptions,\n    IRefineContext,\n    IRefineContextProvider,\n} from \"./IRefineContext\";\nimport { DefaultLayout } from \"@components/layoutWrapper/defaultLayout\";\n\nimport { LoginPage as DefaultLoginPage } from \"@components/pages\";\n\nexport const defaultRefineOptions: IRefineContextOptions = {\n    mutationMode: \"pessimistic\",\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    warnWhenUnsavedChanges: false,\n    liveMode: \"off\",\n    redirect: {\n        afterCreate: \"list\",\n        afterClone: \"list\",\n        afterEdit: \"list\",\n    },\n};\n\nexport const RefineContext = React.createContext<IRefineContext>({\n    hasDashboard: false,\n    mutationMode: \"pessimistic\",\n    warnWhenUnsavedChanges: false,\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    Title: undefined,\n    Sider: undefined,\n    Header: undefined,\n    Footer: undefined,\n    Layout: DefaultLayout,\n    OffLayoutArea: undefined,\n    liveMode: \"off\",\n    onLiveEvent: undefined,\n    options: defaultRefineOptions,\n});\n\nexport const RefineContextProvider: React.FC<IRefineContextProvider> = ({\n    hasDashboard,\n    mutationMode,\n    warnWhenUnsavedChanges,\n    syncWithLocation,\n    undoableTimeout,\n    children,\n    DashboardPage,\n    Title,\n    Layout = DefaultLayout,\n    Header,\n    Sider,\n    Footer,\n    OffLayoutArea,\n    LoginPage = DefaultLoginPage,\n    catchAll,\n    liveMode = \"off\",\n    onLiveEvent,\n    options,\n}) => {\n    return (\n        <RefineContext.Provider\n            value={{\n                hasDashboard,\n                mutationMode,\n                warnWhenUnsavedChanges,\n                syncWithLocation,\n                Title,\n                undoableTimeout,\n                Layout,\n                Header,\n                Sider,\n                Footer,\n                OffLayoutArea,\n                DashboardPage,\n                LoginPage,\n                catchAll,\n                liveMode,\n                onLiveEvent,\n                options,\n            }}\n        >\n            {children}\n        </RefineContext.Provider>\n    );\n};\n","import React from \"react\";\n\nimport { LayoutProps } from \"../../../interfaces\";\n\nexport const DefaultLayout: React.FC<LayoutProps> = ({ children }) => {\n    return <div>{children}</div>;\n};\n","import { QueryClient, QueryClientConfig } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\nimport { defaultRefineOptions } from \"@contexts/refine\";\nimport {\n    IRefineContextOptions,\n    IRefineOptions,\n    LiveModeProps,\n    MutationMode,\n} from \"src/interfaces\";\n\ntype HandleRefineOptionsProps = {\n    options?: IRefineOptions;\n    mutationMode?: MutationMode;\n    syncWithLocation?: boolean;\n    warnWhenUnsavedChanges?: boolean;\n    undoableTimeout?: number;\n    liveMode?: LiveModeProps[\"liveMode\"];\n    disableTelemetry?: boolean;\n    reactQueryClientConfig?: QueryClientConfig;\n    reactQueryDevtoolConfig?:\n        | React.ComponentProps<typeof ReactQueryDevtools>\n        | false;\n};\n\ntype HandleRefineOptionsReturnValues = {\n    optionsWithDefaults: IRefineContextOptions;\n    disableTelemetryWithDefault: boolean;\n    reactQueryWithDefaults: {\n        clientConfig: QueryClientConfig | InstanceType<typeof QueryClient>;\n        devtoolConfig: false | React.ComponentProps<typeof ReactQueryDevtools>;\n    };\n};\n\nexport const handleRefineOptions = ({\n    options,\n    disableTelemetry,\n    liveMode,\n    mutationMode,\n    reactQueryClientConfig,\n    reactQueryDevtoolConfig,\n    syncWithLocation,\n    undoableTimeout,\n    warnWhenUnsavedChanges,\n}: HandleRefineOptionsProps = {}): HandleRefineOptionsReturnValues => {\n    const optionsWithDefaults: IRefineContextOptions = {\n        breadcrumb: options?.breadcrumb,\n        mutationMode:\n            options?.mutationMode ??\n            mutationMode ??\n            defaultRefineOptions.mutationMode,\n        undoableTimeout:\n            options?.undoableTimeout ??\n            undoableTimeout ??\n            defaultRefineOptions.undoableTimeout,\n        syncWithLocation:\n            options?.syncWithLocation ??\n            syncWithLocation ??\n            defaultRefineOptions.syncWithLocation,\n        warnWhenUnsavedChanges:\n            options?.warnWhenUnsavedChanges ??\n            warnWhenUnsavedChanges ??\n            defaultRefineOptions.warnWhenUnsavedChanges,\n        liveMode:\n            options?.liveMode ?? liveMode ?? defaultRefineOptions.liveMode,\n        redirect: {\n            afterCreate:\n                options?.redirect?.afterCreate ??\n                defaultRefineOptions.redirect.afterCreate,\n            afterClone:\n                options?.redirect?.afterClone ??\n                defaultRefineOptions.redirect.afterClone,\n            afterEdit:\n                options?.redirect?.afterEdit ??\n                defaultRefineOptions.redirect.afterEdit,\n        },\n    };\n\n    const disableTelemetryWithDefault =\n        options?.disableTelemetry ?? disableTelemetry ?? false;\n\n    const reactQueryWithDefaults = {\n        clientConfig:\n            options?.reactQuery?.clientConfig ?? reactQueryClientConfig ?? {},\n        devtoolConfig:\n            options?.reactQuery?.devtoolConfig ?? reactQueryDevtoolConfig ?? {},\n    };\n\n    return {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    };\n};\n","import {\n    FormAction,\n    IRefineContextOptions,\n    RedirectAction,\n} from \"src/interfaces\";\n\ntype RedirectPageProps = {\n    redirectFromProps?: RedirectAction;\n    action: FormAction;\n    redirectOptions: IRefineContextOptions[\"redirect\"];\n};\n\nexport const redirectPage = ({\n    redirectFromProps,\n    action,\n    redirectOptions,\n}: RedirectPageProps): RedirectAction => {\n    if (redirectFromProps || redirectFromProps === false) {\n        return redirectFromProps;\n    }\n\n    switch (action) {\n        case \"clone\":\n            return redirectOptions.afterClone;\n        case \"create\":\n            return redirectOptions.afterCreate;\n        case \"edit\":\n            return redirectOptions.afterEdit;\n    }\n};\n","type EachResolve<TResolve, Response> = (\n    result: TResolve,\n    index: number,\n) => Response;\ntype EachReject<TReject, Response> = (\n    error: TReject,\n    index: number,\n) => Response;\n\nexport const sequentialPromises = async <\n    TResolve = unknown,\n    TReject = unknown,\n    TResolveResponse = unknown,\n    TRejectResponse = unknown,\n>(\n    promises: (() => Promise<TResolve>)[],\n    onEachResolve: EachResolve<TResolve, TResolveResponse>,\n    onEachReject: EachReject<TReject, TRejectResponse>,\n): Promise<(TResolveResponse | TRejectResponse)[]> => {\n    const results = [];\n    // @ts-expect-error Remove this when we enable `downLevelIterations`\n    for (const [index, promise] of promises.entries()) {\n        try {\n            const result = await promise();\n\n            results.push(onEachResolve(result, index));\n        } catch (error) {\n            results.push(onEachReject(error as TReject, index));\n        }\n    }\n    return results;\n};\n","import { IResourceItem } from \"@contexts/resource\";\n\nexport const pickDataProvider = (\n    resourceName?: string,\n    dataProviderName?: string,\n    resources?: IResourceItem[],\n) => {\n    if (dataProviderName) {\n        return dataProviderName;\n    }\n\n    const resource = resources?.find((item) => item.name === resourceName);\n\n    if (resource?.options?.dataProviderName) {\n        return resource.options.dataProviderName;\n    }\n\n    return \"default\";\n};\n","export const handleMultiple = async <TData = unknown>(\n    promises: Promise<{ data: TData }>[],\n): Promise<{ data: TData[] }> => {\n    return {\n        data: (await Promise.all(promises)).map((res) => res.data),\n    };\n};\n","import { GetListResponse } from \"../../../interfaces\";\n\nexport const getNextPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.next) {\n        return cursor.next;\n    }\n\n    const current = pagination?.current || 1;\n\n    const pageSize = pagination?.pageSize || 10;\n    const totalPages = Math.ceil((lastPage.total || 0) / pageSize);\n\n    return current < totalPages ? Number(current) + 1 : undefined;\n};\n\nexport const getPreviousPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.prev) {\n        return cursor.prev;\n    }\n\n    const current = pagination?.current || 1;\n\n    return current === 1 ? undefined : current - 1;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    GetOneResponse,\n    HttpError,\n    BaseRecord,\n    BaseKey,\n    MetaDataQuery,\n    LiveModeProps,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useTranslate,\n    useResourceSubscription,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions\";\n\nexport type UseOneProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * id of the item in the resource\n     * @type [`BaseKey`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    id: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `\"default\"``\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useOne` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving single items from a `resource`.\n *\n * It uses `getOne` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useOne} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useOne = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    id,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseOneProps<TData, TError>): QueryObserverResult<GetOneResponse<TData>> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n\n    const { getOne } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        channel: `resources/${resource}`,\n        params: {\n            ids: id ? [id] : [],\n            id: id,\n            metaData,\n            subscriptionType: \"useOne\",\n            ...liveParams,\n        },\n        enabled: queryOptions?.enabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetOneResponse<TData>, TError>(\n        queryKey.detail(id),\n        ({ queryKey, pageParam, signal }) =>\n            getOne<TData>({\n                resource,\n                id,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }),\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { id, metaData }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { id, metaData }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-getOne-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    BaseRecord,\n    BaseKey,\n    GetManyResponse,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useCheckError,\n    useResourceSubscription,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    handleMultiple,\n} from \"@definitions/helpers\";\n\nexport type UseManyProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * ids of the item in the resource\n     * @type [`BaseKey[]`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    ids: BaseKey[];\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving multiple items from a `resource`.\n *\n * It uses `getMany` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    ids,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseManyProps<TData, TError>): QueryObserverResult<\n    GetManyResponse<TData>\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n\n    const { getMany, getOne } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            ids: ids ?? [],\n            metaData,\n            subscriptionType: \"useMany\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetManyResponse<TData>, TError>(\n        queryKey.many(ids),\n        ({ queryKey, pageParam, signal }) => {\n            if (getMany) {\n                return getMany({\n                    resource,\n                    ids,\n                    metaData: {\n                        ...metaData,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                });\n            } else {\n                return handleMultiple(\n                    ids.map((id) =>\n                        getOne<TData>({\n                            resource,\n                            id,\n                            metaData: {\n                                ...metaData,\n                                queryContext: {\n                                    queryKey,\n                                    pageParam,\n                                    signal,\n                                },\n                            },\n                        }),\n                    ),\n                );\n            }\n        },\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, ids, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, ids, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids[0]}-${resource}-getMany-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    BaseRecord,\n    BaseKey,\n    UpdateResponse,\n    MutationMode,\n    PrevContext as UpdateContext,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    PreviousQuery,\n    GetListResponse,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport pluralize from \"pluralize\";\nimport {\n    useResource,\n    useMutationMode,\n    useCancelNotification,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport type UpdateParams<TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * id for mutation function\n     */\n    id: BaseKey;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Callback that runs when undo button is clicked on `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseUpdateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateResponse<TData>,\n    TError,\n    UpdateParams<TVariables>,\n    UpdateContext<TData>\n>;\n\nexport type UseUpdateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateResponse<TData>,\n            TError,\n            UpdateParams<TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useUpdate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for update mutations.\n *\n * It uses `update` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useUpdate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseUpdateProps<TData, TError, TVariables> = {}): UseUpdateReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const publish = usePublish();\n    const { log } = useLog();\n    const { notificationDispatch } = useCancelNotification();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        UpdateResponse<TData>,\n        TError,\n        UpdateParams<TVariables>,\n        UpdateContext<TData>\n    >(\n        ({\n            id,\n            values,\n            resource,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            metaData,\n            dataProviderName,\n        }) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(resource, dataProviderName, resources),\n                ).update<TData, TVariables>({\n                    resource,\n                    id,\n                    variables: values,\n                    metaData,\n                });\n            }\n            const updatePromise = new Promise<UpdateResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                resource,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .update<TData, TVariables>({\n                                resource,\n                                id,\n                                variables: values,\n                                metaData,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: id,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        {\n            onMutate: async ({\n                resource,\n                id,\n                mutationMode,\n                values,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.map((record: TData) => {\n                                if (record.id?.toString() === id?.toString()) {\n                                    return {\n                                        id,\n                                        ...record,\n                                        ...values,\n                                    } as unknown as TData;\n                                }\n                                return record;\n                            });\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (record.id?.toString() === id?.toString()) {\n                                    record = {\n                                        id,\n                                        ...record,\n                                        ...values,\n                                    } as unknown as TData;\n                                }\n                                return record;\n                            });\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.detail(id),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            return {\n                                ...previous,\n                                data: {\n                                    ...previous.data,\n                                    ...values,\n                                },\n                            };\n                        },\n                    );\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (\n                _data,\n                _error,\n                {\n                    id,\n                    resource,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\", \"detail\"],\n                },\n            ) => {\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                    id,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id, resource },\n                });\n            },\n            onSuccess: (\n                data,\n                {\n                    id,\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    values,\n                    metaData,\n                },\n                context,\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { id, values }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-notification`,\n                    description: translate(\n                        \"notifications.success\",\n                        \"Successful\",\n                    ),\n                    message: translate(\n                        \"notifications.editSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully updated ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"updated\",\n                    payload: {\n                        ids: data.data?.id ? [data.data.id] : undefined,\n                    },\n                    date: new Date(),\n                });\n\n                let previousData: any;\n                if (context) {\n                    const queryData = queryClient.getQueryData<\n                        UpdateResponse<TData>\n                    >(context.queryKey.detail(id));\n\n                    previousData = Object.keys(values).reduce<any>(\n                        (acc, item) => {\n                            acc[item] = queryData?.data?.[item];\n                            return acc;\n                        },\n                        {},\n                    );\n                }\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"update\",\n                    resource,\n                    data: values,\n                    previousData,\n                    meta: {\n                        id,\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                { id, resource, errorNotification, values },\n                context,\n            ) => {\n                // set back the queries to the context:\n\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError?.(err);\n\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { id, values }, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${id}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.editError\",\n                            {\n                                resource: translate(\n                                    `${resource}.${resource}`,\n                                    resourceSingular,\n                                ),\n                                statusCode: err.statusCode,\n                            },\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import React, { ReactNode, useReducer } from \"react\";\nimport isEqual from \"lodash-es/isEqual\";\n\nimport { UndoableQueue } from \"@components\";\n\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../interfaces\";\nimport { ActionTypes } from \"./actionTypes\";\n\nexport const UndoableQueueContext = React.createContext<IUndoableQueueContext>({\n    notifications: [],\n    notificationDispatch: () => false,\n});\n\nconst initialState: IUndoableQueue[] = [];\n\nexport const undoableQueueReducer = (state: IUndoableQueue[], action: any) => {\n    switch (action.type) {\n        case ActionTypes.ADD:\n            const newState = state.filter(\n                (notificationItem: IUndoableQueue) => {\n                    return !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    );\n                },\n            );\n\n            return [\n                ...newState,\n                {\n                    ...action.payload,\n                    isRunning: true,\n                },\n            ];\n        case ActionTypes.REMOVE:\n            return state.filter(\n                (notificationItem: IUndoableQueue) =>\n                    !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    ),\n            );\n        case ActionTypes.DECREASE_NOTIFICATION_SECOND:\n            return state.map((notificationItem: IUndoableQueue) => {\n                if (\n                    isEqual(notificationItem.id, action.payload.id) &&\n                    notificationItem.resource == action.payload.resource\n                ) {\n                    return {\n                        ...notificationItem,\n                        seconds: action.payload.seconds - 1000,\n                    };\n                }\n                return notificationItem;\n            });\n        default:\n            return state;\n    }\n};\n\nexport const UndoableQueueContextProvider: React.FC<{\n    children: ReactNode;\n}> = ({ children }) => {\n    const [notifications, notificationDispatch] = useReducer(\n        undoableQueueReducer,\n        initialState,\n    );\n\n    const notificationData = { notifications, notificationDispatch };\n\n    return (\n        <UndoableQueueContext.Provider value={notificationData}>\n            {children}\n            {typeof window !== \"undefined\" &&\n                notifications.map((notification) => (\n                    <UndoableQueue\n                        key={`${notification.id}-${notification.resource}-queue`}\n                        notification={notification}\n                    />\n                ))}\n        </UndoableQueueContext.Provider>\n    );\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\nimport { pickDataProvider } from \"@definitions/helpers\";\n\nimport {\n    CreateResponse,\n    BaseRecord,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\n\ntype useCreateParams<TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseCreateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCreateParams<TVariables>,\n    unknown\n>;\n\nexport type UseCreateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCreateParams<TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCreate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses `create` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCreate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCreate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCreateProps<TData, TError, TVariables> = {}): UseCreateReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n    const dataProvider = useDataProvider();\n    const invalidateStore = useInvalidate();\n\n    const { resources } = useResource();\n\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCreateParams<TVariables>,\n        unknown\n    >(\n        ({\n            resource,\n            values,\n            metaData,\n            dataProviderName,\n        }: useCreateParams<TVariables>) => {\n            return dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            ).create<TData, TVariables>({\n                resource,\n                variables: values,\n                metaData,\n            });\n        },\n        {\n            onSuccess: (\n                data,\n                {\n                    resource,\n                    successNotification: successNotificationFromProp,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                    values,\n                    metaData,\n                },\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotificationFromProp === \"function\"\n                        ? successNotificationFromProp(data, values, resource)\n                        : successNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `create-${resource}-notification`,\n                    message: translate(\n                        \"notifications.createSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully created ${resourceSingular}`,\n                    ),\n                    description: translate(\"notifications.success\", \"Success\"),\n                    type: \"success\",\n                });\n\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"created\",\n                    payload: {\n                        ids: data?.data?.id ? [data.data.id] : undefined,\n                    },\n                    date: new Date(),\n                });\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"create\",\n                    resource,\n                    data: values,\n                    meta: {\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        id: data?.data?.id ?? undefined,\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                {\n                    resource,\n                    errorNotification: errorNotificationFromProp,\n                    values,\n                },\n            ) => {\n                checkError(err);\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof errorNotificationFromProp === \"function\"\n                        ? errorNotificationFromProp(err, values, resource)\n                        : errorNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `create-${resource}-notification`,\n                    description: err.message,\n                    message: translate(\n                        \"notifications.createError\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                            statusCode: err.statusCode,\n                        },\n                        `There was an error creating ${resourceSingular} (status code: ${err.statusCode})`,\n                    ),\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useQueryClient,\n    useMutation,\n    UseMutationResult,\n    UseMutationOptions,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    useResource,\n    useMutationMode,\n    useCancelNotification,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    DeleteOneResponse,\n    MutationMode,\n    PrevContext as DeleteContext,\n    BaseRecord,\n    BaseKey,\n    HttpError,\n    GetListResponse,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    PreviousQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport type DeleteParams<TVariables> = {\n    id: BaseKey;\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n    values?: TVariables;\n} & SuccessErrorNotification;\n\nexport type UseDeleteReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteOneResponse<TData>,\n    TError,\n    DeleteParams<TVariables>,\n    DeleteContext<TData>\n>;\n\nexport type UseDeleteProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteOneResponse<TData>,\n            TError,\n            DeleteParams<TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useDelete` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for delete mutations.\n *\n * It uses `deleteOne` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useDelete} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDelete = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseDeleteProps<TData, TError, TVariables> = {}): UseDeleteReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n    const dataProvider = useDataProvider();\n\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        DeleteOneResponse<TData>,\n        TError,\n        DeleteParams<TVariables>,\n        DeleteContext<TData>\n    >(\n        ({\n            id,\n            mutationMode,\n            undoableTimeout,\n            resource,\n            onCancel,\n            metaData,\n            dataProviderName,\n            values,\n        }) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(resource, dataProviderName, resources),\n                ).deleteOne<TData, TVariables>({\n                    resource,\n                    id,\n                    metaData,\n                    variables: values,\n                });\n            }\n\n            const deletePromise = new Promise<DeleteOneResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                resource,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .deleteOne<TData, TVariables>({\n                                resource,\n                                id,\n                                metaData,\n                                variables: values,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return deletePromise;\n        },\n        {\n            onMutate: async ({\n                id,\n                resource,\n                mutationMode,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.filter(\n                                (record: TData) =>\n                                    record.id?.toString() !== id.toString(),\n                            );\n\n                            return {\n                                data,\n                                total: previous.total - 1,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.filter(\n                                (record: TData) => {\n                                    return (\n                                        record.id?.toString() !== id?.toString()\n                                    );\n                                },\n                            );\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (\n                _data,\n                _error,\n                {\n                    id,\n                    resource,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                },\n            ) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id, resource },\n                });\n            },\n            onSuccess: (\n                _data,\n                {\n                    id,\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    metaData,\n                },\n                context,\n            ) => {\n                const resourceSingular = pluralize.singular(resource ?? \"\");\n\n                // Remove the queries from the cache:\n                queryClient.removeQueries(context?.queryKey.detail(id));\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(_data, id, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-notification`,\n                    description: translate(\"notifications.success\", \"Success\"),\n                    message: translate(\n                        \"notifications.deleteSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully deleted a ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"deleted\",\n                    payload: {\n                        ids: id ? [id] : [],\n                    },\n                    date: new Date(),\n                });\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"delete\",\n                    resource,\n                    meta: {\n                        id,\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        ...rest,\n                    },\n                });\n\n                // Remove the queries from the cache:\n                queryClient.removeQueries(context?.queryKey.detail(id));\n            },\n            onError: (\n                err: TError,\n                { id, resource, errorNotification },\n                context,\n            ) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError(err);\n\n                    const resourceSingular = pluralize.singular(resource ?? \"\");\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, id, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${id}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.deleteError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    BaseRecord,\n    CreateManyResponse,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { handleMultiple, pickDataProvider } from \"@definitions\";\n\ntype useCreateManyParams<TVariables> = {\n    resource: string;\n    values: TVariables[];\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseCreateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateManyResponse<TData>,\n    TError,\n    useCreateManyParams<TVariables>,\n    unknown\n>;\n\nexport type UseCreateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateManyResponse<TData>,\n            TError,\n            useCreateManyParams<TVariables>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCreateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple create mutations.\n *\n * It uses `createMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useCreateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useCreateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCreateManyProps<TData, TError, TVariables> = {}): UseCreateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const dataProvider = useDataProvider();\n\n    const { resources } = useResource();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        CreateManyResponse<TData>,\n        TError,\n        useCreateManyParams<TVariables>\n    >(\n        ({\n            resource,\n            values,\n            metaData,\n            dataProviderName,\n        }: useCreateManyParams<TVariables>) => {\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            if (selectedDataProvider.createMany) {\n                return selectedDataProvider.createMany<TData, TVariables>({\n                    resource,\n                    variables: values,\n                    metaData,\n                });\n            } else {\n                return handleMultiple(\n                    values.map((val) =>\n                        selectedDataProvider.create<TData, TVariables>({\n                            resource,\n                            variables: val,\n                            metaData,\n                        }),\n                    ),\n                );\n            }\n        },\n        {\n            onSuccess: (\n                response,\n                {\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                    values,\n                },\n            ) => {\n                const resourcePlural = pluralize.plural(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(response, values, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `createMany-${resource}-notification`,\n                    message: translate(\n                        \"notifications.createSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully created ${resourcePlural}`,\n                    ),\n                    description: translate(\"notifications.success\", \"Success\"),\n                    type: \"success\",\n                });\n\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                const ids = response?.data\n                    .filter((item) => item?.id !== undefined)\n                    .map((item) => item.id!);\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"created\",\n                    payload: {\n                        ids,\n                    },\n                    date: new Date(),\n                });\n            },\n            onError: (err: TError, { resource, errorNotification, values }) => {\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, values, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `createMany-${resource}-notification`,\n                    description: err.message,\n                    message: translate(\n                        \"notifications.createError\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                            statusCode: err.statusCode,\n                        },\n                        `There was an error creating ${resource} (status code: ${err.statusCode}`,\n                    ),\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    useResource,\n    useCancelNotification,\n    useCheckError,\n    useMutationMode,\n    useTranslate,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    BaseRecord,\n    BaseKey,\n    UpdateManyResponse,\n    HttpError,\n    MutationMode,\n    QueryResponse,\n    PrevContext as UpdateContext,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    GetListResponse,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    handleMultiple,\n} from \"@definitions/helpers\";\n\ntype UpdateManyParams<TVariables> = {\n    ids: BaseKey[];\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    values: TVariables;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\ntype UseUpdateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateManyResponse<TData>,\n    TError,\n    UpdateManyParams<TVariables>,\n    UpdateContext<TData>\n>;\n\nexport type UseUpdateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateManyResponse<TData>,\n            TError,\n            UpdateManyParams<TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useUpdateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple update mutations.\n *\n * It uses `updateMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useUpdateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseUpdateManyProps<TData, TError, TVariables> = {}): UseUpdateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const { mutate: checkError } = useCheckError();\n    const { notificationDispatch } = useCancelNotification();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        UpdateManyResponse<TData>,\n        TError,\n        UpdateManyParams<TVariables>,\n        UpdateContext<TData>\n    >(\n        ({\n            ids,\n            values,\n            resource,\n            onCancel,\n            mutationMode,\n            undoableTimeout,\n            metaData,\n            dataProviderName,\n        }: UpdateManyParams<TVariables>) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.updateMany) {\n                    return selectedDataProvider.updateMany<TData, TVariables>({\n                        resource,\n                        ids,\n                        variables: values,\n                        metaData,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.update<TData, TVariables>({\n                                resource,\n                                id,\n                                variables: values,\n                                metaData,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<UpdateManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n\n        {\n            onMutate: async ({\n                resource,\n                ids,\n                values,\n                mutationMode,\n                dataProviderName,\n                metaData,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                    metaData,\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries = queryClient.getQueriesData<\n                    QueryResponse<TData>\n                >(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (\n                                    record.id !== undefined &&\n                                    ids\n                                        .filter((id) => id !== undefined)\n                                        .map(String)\n                                        .includes(record.id.toString())\n                                ) {\n                                    return {\n                                        ...record,\n                                        ...values,\n                                    };\n                                }\n\n                                return record;\n                            });\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (\n                                    record.id !== undefined &&\n                                    ids\n                                        .filter((id) => id !== undefined)\n                                        .map(String)\n                                        .includes(record.id.toString())\n                                ) {\n                                    return {\n                                        ...record,\n                                        ...values,\n                                    };\n                                }\n                                return record;\n                            });\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                    for (const id of ids) {\n                        queryClient.setQueriesData(\n                            queryKey.detail(id),\n                            (previous?: GetListResponse<TData> | null) => {\n                                if (!previous) {\n                                    return null;\n                                }\n\n                                const data = {\n                                    ...previous.data,\n                                    ...values,\n                                };\n                                return {\n                                    ...previous,\n                                    data,\n                                };\n                            },\n                        );\n                    }\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (_data, _error, { ids, resource, dataProviderName }) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    invalidates: [\"list\", \"many\"],\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                });\n\n                ids.forEach((id) =>\n                    invalidateStore({\n                        resource,\n                        invalidates: [\"detail\"],\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        id,\n                    }),\n                );\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id: ids, resource },\n                });\n            },\n            onSuccess: (\n                data,\n                { ids, resource, successNotification, values },\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { ids, values }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${resource}-notification`,\n                    description: translate(\n                        \"notifications.success\",\n                        \"Successful\",\n                    ),\n                    message: translate(\n                        \"notifications.editSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully updated ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"updated\",\n                    payload: {\n                        ids: ids.map(String),\n                    },\n                    date: new Date(),\n                });\n            },\n            onError: (\n                err: TError,\n                { ids, resource, errorNotification, values },\n                context,\n            ) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError?.(err);\n\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { ids, values }, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${ids}-${resource}-updateMany-error-notification`,\n                        message: translate(\n                            \"notifications.editError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useQueryClient,\n    useMutation,\n    UseMutationResult,\n    UseMutationOptions,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    DeleteManyResponse,\n    HttpError,\n    BaseRecord,\n    BaseKey,\n    MutationMode,\n    PreviousQuery,\n    GetListResponse,\n    PrevContext as DeleteContext,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useMutationMode,\n    useCancelNotification,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport { queryKeys, pickDataProvider, handleMultiple } from \"@definitions\";\n\nexport type DeleteManyParams<TVariables> = {\n    ids: BaseKey[];\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n    values?: TVariables;\n} & SuccessErrorNotification;\n\nexport type UseDeleteManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteManyResponse<TData>,\n    TError,\n    DeleteManyParams<TVariables>,\n    unknown\n>;\n\nexport type UseDeleteManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteManyResponse<TData>,\n            TError,\n            DeleteManyParams<TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useDeleteMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple delete mutations.\n *\n * It uses `deleteMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useDeleteMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDeleteMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseDeleteManyProps<TData, TError, TVariables> = {}): UseDeleteManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const dataProvider = useDataProvider();\n\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const mutation = useMutation<\n        DeleteManyResponse<TData>,\n        TError,\n        DeleteManyParams<TVariables>,\n        DeleteContext<TData>\n    >(\n        ({\n            resource,\n            ids,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            metaData,\n            dataProviderName,\n            values,\n        }: DeleteManyParams<TVariables>) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.deleteMany) {\n                    return selectedDataProvider.deleteMany<TData, TVariables>({\n                        resource,\n                        ids,\n                        metaData,\n                        variables: values,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.deleteOne<TData, TVariables>({\n                                resource,\n                                id,\n                                metaData,\n                                variables: values,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<DeleteManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        {\n            onMutate: async ({\n                ids,\n                resource,\n                mutationMode,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.filter(\n                                (item) =>\n                                    item.id &&\n                                    !ids\n                                        .map(String)\n                                        .includes(item.id.toString()),\n                            );\n\n                            return {\n                                data,\n                                total: previous.total - 1,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.filter(\n                                (record: TData) => {\n                                    if (record.id) {\n                                        return !ids\n                                            .map(String)\n                                            .includes(record.id.toString());\n                                    }\n                                    return false;\n                                },\n                            );\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    for (const id of ids) {\n                        queryClient.setQueriesData(\n                            queryKey.detail(id),\n                            (previous?: any | null) => {\n                                if (!previous || previous.data.id == id) {\n                                    return null;\n                                }\n                                return {\n                                    ...previous,\n                                };\n                            },\n                        );\n                    }\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            // Always refetch after error or success:\n            onSettled: (\n                _data,\n                _error,\n                {\n                    resource,\n                    ids,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                },\n            ) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id: ids, resource },\n                });\n            },\n            onSuccess: (\n                _data,\n                { ids, resource, successNotification },\n                context,\n            ) => {\n                // Remove the queries from the cache:\n                ids.forEach((id) =>\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\n                );\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(_data, ids, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${resource}-notification`,\n                    description: translate(\"notifications.success\", \"Success\"),\n                    message: translate(\n                        \"notifications.deleteSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully deleted ${resource}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"deleted\",\n                    payload: { ids },\n                    date: new Date(),\n                });\n\n                // Remove the queries from the cache:\n                ids.forEach((id) =>\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\n                );\n            },\n            onError: (err, { ids, resource, errorNotification }, context) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError(err);\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, ids, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${ids}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.deleteError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import { useDataProvider } from \"@hooks\";\n\nexport const useApiUrl = (dataProviderName?: string): string => {\n    const dataProvider = useDataProvider();\n\n    const { getApiUrl } = dataProvider(dataProviderName);\n\n    return getApiUrl();\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    CustomResponse,\n    CrudSorting,\n    CrudFilters,\n    BaseRecord,\n    HttpError,\n    MetaDataQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useTranslate,\n    useCheckError,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\n\ninterface UseCustomConfig<TQuery, TPayload> {\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n    query?: TQuery;\n    payload?: TPayload;\n    headers?: {};\n}\n\nexport type UseCustomProps<TData, TError, TQuery, TPayload> = {\n    /**\n     * request's URL\n     */\n    url: string;\n    /**\n     * request's method (`GET`, `POST`, etc.)\n     */\n    method: \"get\" | \"delete\" | \"head\" | \"options\" | \"post\" | \"put\" | \"patch\";\n    /**\n     * The config of your request. You can send headers, payload, query, filters and sort using this field\n     */\n    config?: UseCustomConfig<TQuery, TPayload>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\"\n     */\n    queryOptions?: UseQueryOptions<CustomResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification;\n\n/**\n * `useCustom` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for custom requests.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useCustom} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TQuery - Values for query params\n * @typeParam TPayload - Values for params\n *\n */\nexport const useCustom = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TQuery = unknown,\n    TPayload = unknown,\n>({\n    url,\n    method,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    dataProviderName,\n}: UseCustomProps<TData, TError, TQuery, TPayload>): QueryObserverResult<\n    CustomResponse<TData>,\n    TError\n> => {\n    const dataProvider = useDataProvider();\n\n    const { custom } = dataProvider(dataProviderName);\n    const { mutate: checkError } = useCheckError();\n    const translate = useTranslate();\n    const handleNotification = useHandleNotification();\n\n    if (custom) {\n        const queryResponse = useQuery<CustomResponse<TData>, TError>(\n            [\n                dataProviderName,\n                \"custom\",\n                method,\n                url,\n                { ...config, ...metaData },\n            ],\n            ({ queryKey, pageParam, signal }) =>\n                custom<TData>({\n                    url,\n                    method,\n                    ...config,\n                    metaData: {\n                        ...metaData,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                }),\n            {\n                ...queryOptions,\n                onSuccess: (data) => {\n                    queryOptions?.onSuccess?.(data);\n\n                    const notificationConfig =\n                        typeof successNotification === \"function\"\n                            ? successNotification(data, {\n                                  ...config,\n                                  ...metaData,\n                              })\n                            : successNotification;\n\n                    handleNotification(notificationConfig);\n                },\n                onError: (err: TError) => {\n                    checkError(err);\n                    queryOptions?.onError?.(err);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { ...config, ...metaData })\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${method}-notification`,\n                        message: translate(\n                            \"notifications.error\",\n                            { statusCode: err.statusCode },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                },\n            },\n        );\n        return queryResponse;\n    } else {\n        throw Error(\"Not implemented custom on data provider.\");\n    }\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport {\n    useCheckError,\n    useDataProvider,\n    useHandleNotification,\n    useTranslate,\n} from \"@hooks\";\nimport {\n    CreateResponse,\n    BaseRecord,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n} from \"../../interfaces\";\n\ninterface UseCustomMutationConfig {\n    headers?: {};\n}\n\ntype useCustomMutationParams<TVariables> = {\n    url: string;\n    method: \"post\" | \"put\" | \"patch\" | \"delete\";\n    values: TVariables;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    config?: UseCustomMutationConfig;\n} & SuccessErrorNotification;\n\nexport type UseCustomMutationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCustomMutationParams<TVariables>,\n    unknown\n>;\n\nexport type UseCustomMutationProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCustomMutationParams<TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCustomMutation` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCustomMutation} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCustomMutation = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCustomMutationProps<\n    TData,\n    TError,\n    TVariables\n> = {}): UseCustomMutationReturnType<TData, TError, TVariables> => {\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCustomMutationParams<TVariables>,\n        unknown\n    >(\n        ({\n            url,\n            method,\n            values,\n            metaData,\n            dataProviderName,\n            config,\n        }: useCustomMutationParams<TVariables>) => {\n            const { custom } = dataProvider(dataProviderName);\n\n            if (custom) {\n                return custom<TData>({\n                    url,\n                    method,\n                    payload: values,\n                    metaData,\n                    headers: { ...config?.headers },\n                });\n            }\n\n            throw Error(\"Not implemented custom on data provider.\");\n        },\n        {\n            onSuccess: (\n                data,\n                {\n                    successNotification: successNotificationFromProp,\n                    config,\n                    metaData,\n                },\n            ) => {\n                const notificationConfig =\n                    typeof successNotificationFromProp === \"function\"\n                        ? successNotificationFromProp(data, {\n                              ...config,\n                              ...metaData,\n                          })\n                        : successNotificationFromProp;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (\n                err: TError,\n                {\n                    errorNotification: errorNotificationFromProp,\n                    method,\n                    config,\n                    metaData,\n                },\n            ) => {\n                checkError(err);\n\n                const notificationConfig =\n                    typeof errorNotificationFromProp === \"function\"\n                        ? errorNotificationFromProp(err, {\n                              ...config,\n                              ...metaData,\n                          })\n                        : errorNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `${method}-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import { useCallback, useContext } from \"react\";\n\nimport { DataContext } from \"@contexts/data\";\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const useDataProvider = (): ((\n    /**\n     * The name of the `data provider` you want to access\n     */\n    dataProviderName?: string,\n) => IDataContextProvider) => {\n    const context = useContext<IDataMultipleContextProvider>(DataContext);\n\n    const handleDataProvider = useCallback(\n        (dataProviderName?: string) => {\n            if (dataProviderName) {\n                const dataProvider = context[dataProviderName];\n                if (!dataProvider) {\n                    throw new Error(\n                        `\"${dataProviderName}\" Data provider not found`,\n                    );\n                }\n                return context[dataProviderName];\n            }\n            if (context.default) {\n                return context.default;\n            } else\n                throw new Error(\n                    `There is no \"default\" data provider. Please pass dataProviderName.`,\n                );\n        },\n        [context],\n    );\n\n    return handleDataProvider;\n};\n","import React from \"react\";\nimport { ReactNode } from \"react\";\n\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const defaultDataProvider = () => {\n    return {\n        default: {\n            create: () => Promise.resolve({ data: { id: 1 } }),\n            createMany: () => Promise.resolve({ data: [] }),\n            deleteOne: () => Promise.resolve({ data: { id: 1 } }),\n            deleteMany: () => Promise.resolve({ data: [] }),\n            getList: () => Promise.resolve({ data: [], total: 0 }),\n            getMany: () => Promise.resolve({ data: [] }),\n            getOne: () => Promise.resolve({ data: { id: 1 } }),\n            update: () => Promise.resolve({ data: { id: 1 } }),\n            updateMany: () => Promise.resolve({ data: [] }),\n            custom: () => Promise.resolve({ data: {} }),\n            getApiUrl: () => \"\",\n        },\n    };\n};\n\nexport const DataContext = React.createContext<IDataMultipleContextProvider>(\n    defaultDataProvider() as IDataMultipleContextProvider,\n);\n\nexport const DataContextProvider: React.FC<\n    | IDataMultipleContextProvider\n    | (IDataContextProvider & {\n          children: ReactNode;\n      })\n> = ({ children, ...rest }) => {\n    let dataProviders;\n    if (!rest.getList || !rest.getOne) {\n        dataProviders = rest as IDataMultipleContextProvider;\n    } else {\n        dataProviders = {\n            default: rest,\n        } as IDataMultipleContextProvider;\n    }\n    return (\n        <DataContext.Provider value={dataProviders}>\n            {children}\n        </DataContext.Provider>\n    );\n};\n","import {\n    useInfiniteQuery,\n    UseInfiniteQueryOptions,\n    InfiniteQueryObserverResult,\n} from \"@tanstack/react-query\";\nimport {\n    CrudFilters,\n    Pagination,\n    BaseRecord,\n    HttpError,\n    CrudSorting,\n    MetaDataQuery,\n    SuccessErrorNotification,\n    LiveModeProps,\n    GetListResponse,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useHandleNotification,\n    useResourceSubscription,\n    useTranslate,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    getNextPageParam,\n    getPreviousPageParam,\n} from \"@definitions/helpers\";\n\nexport interface UseInfiniteListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\nexport type UseInfiniteListProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`useInfiniteListConfig`](/docs/api-reference/core/hooks/data/useInfiniteList/#config-parameters)\n     */\n    config?: UseInfiniteListConfig;\n    /**\n     * react-query's [useInfiniteQuery](https://tanstack.com/query/v4/docs/react/reference/useInfiniteQuery) options,\n     */\n    queryOptions?: UseInfiniteQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useInfiniteList` is a modified version of `react-query`'s {@link https://tanstack.com/query/latest/docs/react/guides/infinite-queries `useInfiniteQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useInfiniteList} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useInfiniteList = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseInfiniteListProps<TData, TError>): InfiniteQueryObserverResult<\n    GetListResponse<TData>,\n    TError\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            metaData,\n            pagination: config?.pagination,\n            hasPagination: config?.hasPagination,\n            sort: config?.sort,\n            filters: config?.filters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useInfiniteQuery<GetListResponse<TData>, TError>(\n        queryKey.list(config),\n        ({ queryKey, pageParam, signal }) => {\n            const { hasPagination, ...restConfig } = config || {};\n            const pagination = {\n                ...config?.pagination,\n                current: pageParam,\n            };\n\n            return getList<TData>({\n                resource,\n                ...restConfig,\n                pagination,\n                hasPagination,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }).then(({ data, total, ...rest }) => {\n                return {\n                    data,\n                    total,\n                    pagination,\n                    ...rest,\n                };\n            });\n        },\n        {\n            getNextPageParam: (lastPage) => getNextPageParam(lastPage),\n            getPreviousPageParam: (lastPage) => getPreviousPageParam(lastPage),\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(\n                              data,\n                              { metaData, config },\n                              resource,\n                          )\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { metaData, config }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${resource}-useInfiniteList-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext, useEffect } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    IRefineContext,\n    LiveEvent,\n    LiveModeProps,\n    MetaDataQuery,\n    Pagination,\n} from \"../../../interfaces\";\nimport { LiveContext } from \"@contexts/live\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { queryKeys } from \"@definitions\";\n\nexport type UseResourceSubscriptionProps = {\n    channel: string;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        metaData?: MetaDataQuery;\n        pagination?: Pagination;\n        hasPagination?: boolean;\n        sort?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType: \"useList\" | \"useOne\" | \"useMany\";\n        [key: string]: any;\n    };\n    types: LiveEvent[\"type\"][];\n    resource: string;\n    enabled?: boolean;\n} & LiveModeProps;\n\nexport type PublishType = {\n    (event: LiveEvent): void;\n};\n\nexport const useResourceSubscription = ({\n    resource,\n    params,\n    channel,\n    types,\n    enabled = true,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n}: UseResourceSubscriptionProps): void => {\n    const queryClient = useQueryClient();\n    const queryKey = queryKeys(resource);\n\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n    const {\n        liveMode: liveModeFromContext,\n        onLiveEvent: onLiveEventContextCallback,\n    } = useContext<IRefineContext>(RefineContext);\n\n    const liveMode = liveModeFromProp ?? liveModeFromContext;\n\n    useEffect(() => {\n        let subscription: any;\n\n        if (liveMode && liveMode !== \"off\" && enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params: {\n                    resource,\n                    ...params,\n                },\n                types,\n                callback: (event) => {\n                    if (liveMode === \"auto\") {\n                        queryClient.invalidateQueries(queryKey.resourceAll);\n                    }\n\n                    onLiveEvent?.(event);\n                    onLiveEventContextCallback?.(event);\n                },\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import React from \"react\";\n\nimport { ILiveContext, ILiveContextProvider } from \"./ILiveContext\";\n\nexport const LiveContext = React.createContext<ILiveContext>(undefined);\n\nexport const LiveContextProvider: React.FC<ILiveContextProvider> = ({\n    liveProvider,\n    children,\n}) => {\n    return (\n        <LiveContext.Provider value={liveProvider}>\n            {children}\n        </LiveContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport { LiveModeProps, IRefineContext } from \"../../../interfaces\";\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useLiveMode = (\n    liveMode: LiveModeProps[\"liveMode\"],\n): LiveModeProps[\"liveMode\"] => {\n    const { liveMode: liveModeFromContext } =\n        useContext<IRefineContext>(RefineContext);\n\n    return liveMode ?? liveModeFromContext;\n};\n","import { useContext, useEffect } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    LiveEvent,\n    MetaDataQuery,\n    Pagination,\n} from \"../../../interfaces\";\n\nexport type UseSubscriptionProps = {\n    /**\n     * Channel name to subscribe.\n     */\n    channel: string;\n    /**\n     * Callback that is run when new events from subscription arrive.\n     */\n    onLiveEvent: (event: LiveEvent) => void;\n    /**\n     * Type of events to subscribe. `\"*\"` means all events.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    types?: LiveEvent[\"type\"][];\n    /**\n     * Determines subscription should subscribe or not.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    enabled?: boolean;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        metaData?: MetaDataQuery;\n        pagination?: Pagination;\n        hasPagination?: boolean;\n        sort?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType?: \"useList\" | \"useOne\" | \"useMany\";\n        resource?: string;\n        [key: string]: any;\n    };\n};\n\nexport const useSubscription = ({\n    params,\n    channel,\n    types = [\"*\"],\n    enabled = true,\n    onLiveEvent,\n}: UseSubscriptionProps): void => {\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n\n    useEffect(() => {\n        let subscription: any;\n\n        if (enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params,\n                types,\n                callback: onLiveEvent,\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import { useContext } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport { ILiveContext } from \"../../../interfaces\";\n\nexport const usePublish: () => NonNullable<ILiveContext>[\"publish\"] = () => {\n    const liveContext = useContext<ILiveContext>(LiveContext);\n\n    return liveContext?.publish;\n};\n","import { useContext } from \"react\";\n\nimport { ResourceContext } from \"@contexts/resource\";\nimport {\n    BaseKey,\n    IResourceItem,\n    ResourceRouterParams,\n    RouteAction,\n} from \"../../../interfaces\";\nimport { useRouterContext, useResourceWithRoute } from \"@hooks\";\n\nexport type UseResourcePropsType = {\n    /**\n     * Determines which resource to use for redirection\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    resourceName?: string;\n    /**\n     * Determines which resource to use for redirection\n     * @default Resource name that it reads from route\n     */\n    resourceNameOrRouteName?: string;\n    /**\n     * Adds id to the end of the URL\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    recordItemId?: BaseKey;\n};\n\ntype UseResourceReturnType = {\n    resources: IResourceItem[];\n    resource: IResourceItem;\n    resourceName: string;\n    id?: BaseKey;\n    action: RouteAction;\n};\n\n/**\n * `useResource` is used to get `resources` that are defined as property of the `<Refine>` component.\n *\n * @see {@link https://refine.dev/docs/core/hooks/resource/useResource} for more details.\n */\nexport const useResource = ({\n    resourceName: propResourceName,\n    resourceNameOrRouteName,\n    recordItemId,\n}: UseResourcePropsType = {}): UseResourceReturnType => {\n    const { resources } = useContext(ResourceContext);\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const { useParams } = useRouterContext();\n\n    const params = useParams<ResourceRouterParams>();\n\n    const resource = resourceWithRoute(\n        resourceNameOrRouteName ?? params.resource,\n    );\n\n    const resourceName = propResourceName ?? resource.name;\n\n    const id = recordItemId ?? params.id;\n\n    return { resources, resource, resourceName, id, action: params.action };\n};\n","import React, { ReactNode } from \"react\";\n\nimport { IResourceContext } from \"./IResourceContext\";\n\nexport {\n    IResourceItem,\n    IResourceComponents,\n    IResourceComponentsProps,\n    IResourceContext,\n} from \"./IResourceContext\";\n\nexport const ResourceContext = React.createContext<IResourceContext>({\n    resources: [],\n});\n\nexport const ResourceContextProvider: React.FC<\n    IResourceContext & { children: ReactNode }\n> = ({ resources, children }) => {\n    return (\n        <ResourceContext.Provider value={{ resources }}>\n            {children}\n        </ResourceContext.Provider>\n    );\n};\n","import { useContext, useCallback } from \"react\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { IResourceItem } from \"../../../interfaces\";\n\nexport type UseResourceWithRouteReturnType = (route: string) => IResourceItem;\n\nexport const useResourceWithRoute = (): UseResourceWithRouteReturnType => {\n    const { resources } = useContext(ResourceContext);\n\n    const resourceWithRoute = useCallback(\n        (route: string) => {\n            const resource = resources.find((p) => p.route === route);\n\n            if (!resource) {\n                const resourceWithName = resources.find(\n                    (p) => p.name === route,\n                );\n                return (\n                    resourceWithName ??\n                    ({ name: route, route: route } as IResourceItem)\n                );\n            }\n            return resource;\n        },\n        [resources],\n    );\n\n    return resourceWithRoute;\n};\n","import { useContext } from \"react\";\n\nimport { UndoableQueueContext } from \"@contexts/undoableQueue\";\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../../interfaces\";\n\nexport type UseCancelNotificationType = () => {\n    notifications: IUndoableQueue[];\n    notificationDispatch: React.Dispatch<any>;\n};\n\nexport const useCancelNotification: UseCancelNotificationType = () => {\n    const { notifications, notificationDispatch } =\n        useContext<IUndoableQueueContext>(UndoableQueueContext);\n\n    return { notifications, notificationDispatch };\n};\n","import { useContext } from \"react\";\n\nimport { NotificationContext } from \"@contexts/notification\";\nimport { INotificationContext } from \"../../../interfaces\";\n\nexport const useNotification = (): INotificationContext => {\n    const { open, close } = useContext(NotificationContext);\n\n    return { open, close };\n};\n","import React, { createContext } from \"react\";\n\nimport { INotificationContext } from \"./INotificationContext\";\n\n/** @deprecated default value for notification context has no use and is an empty object.  */\nexport const defaultNotificationProvider: INotificationContext = {};\n\nexport const NotificationContext = createContext<INotificationContext>({});\n\nexport const NotificationContextProvider: React.FC<\n    INotificationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ open, close, children }) => {\n    return (\n        <NotificationContext.Provider value={{ open, close }}>\n            {children}\n        </NotificationContext.Provider>\n    );\n};\n","import { useCallback } from \"react\";\n\nimport { OpenNotificationParams } from \"../../../interfaces\";\nimport { useNotification } from \"@hooks\";\n\nexport const useHandleNotification = (): typeof handleNotification => {\n    const { open } = useNotification();\n\n    const handleNotification = useCallback(\n        (\n            notification: OpenNotificationParams | false | undefined,\n            fallbackNotification?: OpenNotificationParams,\n        ) => {\n            if (notification !== false) {\n                if (notification) {\n                    open?.(notification);\n                } else if (fallbackNotification) {\n                    open?.(fallbackNotification);\n                }\n            }\n        },\n        [],\n    );\n\n    return handleNotification;\n};\n","import { useCallback, useContext } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to change the locale at runtime, refine provides the `useSetLocale` hook.\n * It returns the changeLocale method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useSetLocale} for more details.\n */\nexport const useSetLocale = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback((lang: string) => i18nProvider?.changeLocale(lang), []);\n};\n","import React from \"react\";\n\nimport { ITranslationContext } from \"../../interfaces\";\n\n/** @deprecated default value for translation context has no use and is an empty object.  */\nexport const defaultProvider: ITranslationContext = {};\n\nexport const TranslationContext = React.createContext<ITranslationContext>({});\n\nexport const TranslationContextProvider: React.FC<\n    ITranslationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, i18nProvider }) => {\n    return (\n        <TranslationContext.Provider\n            value={{\n                i18nProvider: i18nProvider,\n            }}\n        >\n            {children}\n        </TranslationContext.Provider>\n    );\n};\n","import { useContext, useMemo } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to translate the texts in your own components, refine provides the `useTranslate` hook.\n * It returns the translate method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useTranslate} for more details.\n */\nexport const useTranslate = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    const fn = useMemo(() => {\n        function translate(\n            key: string,\n            options?: any,\n            defaultMessage?: string,\n        ): string;\n        function translate(key: string, defaultMessage?: string): string;\n\n        function translate(\n            key: string,\n            options?: string | any,\n            defaultMessage?: string,\n        ) {\n            return (\n                i18nProvider?.translate(key, options, defaultMessage) ??\n                defaultMessage ??\n                (typeof options === \"string\" &&\n                typeof defaultMessage === \"undefined\"\n                    ? options\n                    : key)\n            );\n        }\n\n        return translate;\n    }, [i18nProvider]);\n\n    return fn;\n};\n","import { useContext, useCallback } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\nexport type UseGetLocaleType = () => () => string | undefined;\n\n/**\n * If you need to know the current locale, refine provides the `useGetLocale` hook.\n * It returns the `getLocale` method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useGetLocale} for more details.\n */\nexport const useGetLocale: UseGetLocaleType = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback(() => i18nProvider?.getLocale(), []);\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseMutationModeType = () => {\n    mutationMode: IRefineContextOptions[\"mutationMode\"];\n    undoableTimeout: IRefineContextOptions[\"undoableTimeout\"];\n};\n\n/**\n * Mutation mode determines which mode the mutation runs with.\n * Mutations can run under three different modes: `pessimistic`, `optimistic` and `undoable`.\n * Each mode corresponds to a different type of user experience.\n *\n * @see {@link https://refine.dev/docs/guides-and-concepts/mutation-mode} for more details.\n */\nexport const useMutationMode: UseMutationModeType = () => {\n    const { mutationMode, undoableTimeout } = useContext(RefineContext);\n\n    return { mutationMode, undoableTimeout };\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { UnsavedWarnContext } from \"@contexts/unsavedWarn\";\nimport {\n    IRefineContextOptions,\n    IUnsavedWarnContext,\n} from \"../../../interfaces\";\n\ntype UseWarnAboutChangeType = () => {\n    warnWhenUnsavedChanges: IRefineContextOptions[\"warnWhenUnsavedChanges\"];\n    warnWhen: NonNullable<IUnsavedWarnContext[\"warnWhen\"]>;\n    setWarnWhen: NonNullable<IUnsavedWarnContext[\"setWarnWhen\"]>;\n};\n\n/**\n * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n * To activate this feature, set the `warnWhenUnsavedChanges` to `true`.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#warnwhenunsavedchanges} for more details.\n */\nexport const useWarnAboutChange: UseWarnAboutChangeType = () => {\n    const { warnWhenUnsavedChanges } = useContext(RefineContext);\n\n    const { warnWhen, setWarnWhen } = useContext(UnsavedWarnContext);\n\n    return {\n        warnWhenUnsavedChanges,\n        warnWhen: Boolean(warnWhen),\n        setWarnWhen: setWarnWhen ?? (() => undefined),\n    };\n};\n","import React, { ReactNode, useState } from \"react\";\n\nimport { IUnsavedWarnContext } from \"./IUnsavedWarnContext\";\n\nexport const UnsavedWarnContext = React.createContext<IUnsavedWarnContext>({});\n\nexport const UnsavedWarnContextProvider: React.FC<{ children: ReactNode }> = ({\n    children,\n}) => {\n    const [warnWhen, setWarnWhen] = useState(false);\n\n    return (\n        <UnsavedWarnContext.Provider value={{ warnWhen, setWarnWhen }}>\n            {children}\n        </UnsavedWarnContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseSyncWithLocationType = () => {\n    syncWithLocation: IRefineContextOptions[\"syncWithLocation\"];\n};\n\n/**\n * List query parameter values can be edited manually by typing directly in the URL.\n * To activate this feature `syncWithLocation` needs to be set to `true`.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#syncwithlocation} for more details.\n */\nexport const useSyncWithLocation: UseSyncWithLocationType = () => {\n    const { syncWithLocation } = useContext(RefineContext);\n\n    return { syncWithLocation };\n};\n","import { useContext } from \"react\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { TitleProps } from \"../../interfaces\";\n\n/**\n * `useTitle` returns a component that calls the `<Title>` passed to the `<Refine>`.\n * In this way, it becomes easier for us to access this component in various parts of the application.\n *\n * @see {@link https://refine.dev/docs/core/hooks/refine/useTitle} for more details.\n */\nexport const useTitle: () => React.FC<TitleProps> | undefined = () => {\n    const { Title } = useContext(RefineContext);\n\n    return Title;\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useRefineContext = () => {\n    const {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    } = useContext(RefineContext);\n\n    return {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    };\n};\n","import { useState } from \"react\";\nimport {\n    useResource,\n    useResourceWithRoute,\n    useRouterContext,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    MapDataFn,\n    CrudSorting,\n    CrudFilters,\n    MetaDataQuery,\n} from \"../../interfaces\";\nimport { userFriendlyResourceName, pickDataProvider } from \"@definitions\";\nimport { ExportToCsv, Options } from \"export-to-csv-fix-source-map\";\n\ntype UseExportOptionsType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resourceName?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents\n     */\n    mapData?: MapDataFn<TData, TVariables>;\n    /**\n     *  Sorts records\n     */\n    sorter?: CrudSorting;\n    /**\n     *  Filters records\n     */\n    filters?: CrudFilters;\n    maxItemCount?: number;\n    /**\n     *  Requests to fetch data are made as batches by page size. By default, it is 20. Used for `getList` method of `DataProvider`\n     */\n    pageSize?: number;\n    /**\n     *  Used for exporting options\n     *  @type [Options](https://github.com/alexcaza/export-to-csv)\n     */\n    exportOptions?: Options;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     *  Callback to handle error events of this hook\n     */\n    onError?: (error: any) => void;\n};\n\ntype UseExportReturnType = {\n    isLoading: boolean;\n    triggerExport: () => Promise<void>;\n};\n\n/**\n * `useExport` hook allows you to make your resources exportable.\n *\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useExport} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TVariables - Values for params.\n *\n */\nexport const useExport = <\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n>({\n    resourceName,\n    sorter,\n    filters,\n    maxItemCount,\n    pageSize = 20,\n    mapData = (item) => item as any,\n    exportOptions,\n    metaData,\n    dataProviderName,\n    onError,\n}: UseExportOptionsType<TData, TVariables> = {}): UseExportReturnType => {\n    const [isLoading, setIsLoading] = useState(false);\n\n    const { resources } = useResource();\n\n    const resourceWithRoute = useResourceWithRoute();\n    const dataProvider = useDataProvider();\n\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n    let { name: resource } = resourceWithRoute(routeResourceName);\n\n    if (resourceName) {\n        resource = resourceName;\n    }\n\n    const filename = `${userFriendlyResourceName(\n        resource,\n        \"plural\",\n    )}-${new Date().toLocaleString()}`;\n\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const triggerExport = async () => {\n        setIsLoading(true);\n\n        let rawData: BaseRecord[] = [];\n\n        let current = 1;\n        let preparingData = true;\n        while (preparingData) {\n            try {\n                const { data, total } = await getList<TData>({\n                    resource,\n                    filters,\n                    sort: sorter,\n                    pagination: {\n                        current,\n                        pageSize,\n                    },\n                    metaData,\n                });\n\n                current++;\n\n                rawData.push(...data);\n\n                if (maxItemCount && rawData.length >= maxItemCount) {\n                    rawData = rawData.slice(0, maxItemCount);\n                    preparingData = false;\n                }\n\n                if (total === rawData.length) {\n                    preparingData = false;\n                }\n            } catch (error) {\n                setIsLoading(false);\n                preparingData = false;\n\n                onError?.(error);\n\n                return;\n            }\n        }\n\n        const csvExporter = new ExportToCsv({\n            filename,\n            useKeysAsHeaders: true,\n            ...exportOptions,\n        });\n\n        csvExporter.generateCsv(rawData.map(mapData as any));\n\n        setIsLoading(false);\n    };\n\n    return {\n        isLoading,\n        triggerExport,\n    };\n};\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\n\nimport {\n    useResourceWithRoute,\n    useRouterContext,\n    useWarnAboutChange,\n    useCreate,\n    useUpdate,\n    useRedirectionAfterSubmission,\n    useMutationMode,\n    useOne,\n    useRefineContext,\n} from \"@hooks\";\n\nimport {\n    BaseRecord,\n    CreateResponse,\n    GetOneResponse,\n    HttpError,\n    LiveModeProps,\n    ResourceRouterParams,\n    RedirectAction,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    UpdateResponse,\n    MutationMode,\n    BaseKey,\n    IQueryKeys,\n    FormAction,\n} from \"../../interfaces\";\nimport {\n    UpdateParams,\n    UseUpdateProps,\n    UseUpdateReturnType,\n} from \"../data/useUpdate\";\nimport { UseCreateProps, UseCreateReturnType } from \"../data/useCreate\";\nimport { redirectPage } from \"@definitions/helpers\";\n\nexport type ActionParams = {\n    /**\n     * Type of the form mode\n     * @default Action that it reads from route otherwise \"create\" is used\n     */\n    action?: FormAction;\n};\n\ntype ActionFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Record id for fetching\n     * @default Id that it reads from the URL\n     */\n    id?: BaseKey;\n    /**\n     * Page to redirect after a succesfull mutation\n     * @type `\"show\" | \"edit\" | \"list\" | \"create\" | false`\n     * @default `\"list\"`\n     */\n    redirect?: RedirectAction;\n    /**\n     * Metadata query for dataProvider\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     * @default `\"pessimistic\"*`\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Called when a mutation is successful\n     */\n    onMutationSuccess?: (\n        data: CreateResponse<TData> | UpdateResponse<TData>,\n        variables: TVariables,\n        context: any,\n    ) => void;\n    /**\n     * Called when a mutation encounters an error\n     */\n    onMutationError?: (\n        error: TError,\n        variables: TVariables,\n        context: any,\n    ) => void;\n    /**\n     * Duration to wait before executing mutations when `mutationMode = \"undoable\"`\n     * @default `5000*`\n     */\n    undoableTimeout?: number;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     * @type  `all`, `resourceAll`, `list`, `many`, `detail`, `false`\n     * @default `[\"list\", \"many\", \"detail\"]`\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options of useOne hook used while in edit mode.\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, HttpError>;\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useCreate hook used while submitting in create and clone modes.\n     */\n    createMutationOptions?: UseCreateProps<\n        TData,\n        TError,\n        TVariables\n    >[\"mutationOptions\"];\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useUpdate hook used while submitting in edit mode.\n     */\n    updateMutationOptions?: UseUpdateProps<\n        TData,\n        TError,\n        TVariables\n    >[\"mutationOptions\"];\n} & SuccessErrorNotification &\n    ActionParams &\n    LiveModeProps;\n\nexport type UseFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = ActionFormProps<TData, TError, TVariables> & ActionParams & LiveModeProps;\n\nexport type UseFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    id?: BaseKey;\n    setId: Dispatch<SetStateAction<BaseKey | undefined>>;\n\n    queryResult?: QueryObserverResult<GetOneResponse<TData>>;\n    mutationResult:\n        | UseUpdateReturnType<TData, TError, TVariables>\n        | UseCreateReturnType<TData, TError, TVariables>;\n    formLoading: boolean;\n    onFinish: (\n        values: TVariables,\n    ) => Promise<CreateResponse<TData> | UpdateResponse<TData> | void>;\n    redirect: (\n        redirect: RedirectAction,\n        idFromFunction?: BaseKey | undefined,\n    ) => void;\n};\n\n/**\n * `useForm` is used to manage forms. It uses Ant Design {@link https://ant.design/components/form/ Form} data scope management under the hood and returns the required props for managing the form actions.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/form/useForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n *\n */\nexport const useForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    resource: resourceFromProps,\n    action: actionFromProps,\n    id: idFromProps,\n    onMutationSuccess,\n    onMutationError,\n    redirect: redirectFromProps,\n    successNotification,\n    errorNotification,\n    metaData,\n    mutationMode: mutationModeProp,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    undoableTimeout,\n    dataProviderName,\n    invalidates,\n    queryOptions,\n    createMutationOptions,\n    updateMutationOptions,\n}: UseFormProps<TData, TError, TVariables> = {}): UseFormReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { options } = useRefineContext();\n    const { useParams } = useRouterContext();\n    const {\n        resource: resourceFromRoute,\n        action: actionFromRoute,\n        id: idFromParams,\n    } = useParams<ResourceRouterParams>();\n\n    const defaultId =\n        !resourceFromProps || resourceFromProps === resourceFromRoute\n            ? idFromProps ?? idFromParams\n            : idFromProps;\n\n    // id state is needed to determine selected record in a context for example useModal\n    const [id, setId] = React.useState<BaseKey | undefined>(defaultId);\n\n    React.useEffect(() => {\n        if (defaultId !== id) {\n            setId(idFromProps);\n        }\n    }, [idFromProps]);\n\n    const resourceName = resourceFromProps ?? resourceFromRoute;\n    const action =\n        actionFromProps ??\n        (actionFromRoute === \"show\" ? \"create\" : actionFromRoute) ??\n        \"create\";\n\n    const resourceWithRoute = useResourceWithRoute();\n    const resource = resourceWithRoute(resourceName);\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const isCreate = action === \"create\";\n    const isEdit = action === \"edit\";\n    const isClone = action === \"clone\";\n\n    const redirect = redirectPage({\n        redirectFromProps,\n        action,\n        redirectOptions: options.redirect,\n    });\n\n    const enableQuery = id !== undefined && (isEdit || isClone);\n\n    const queryResult = useOne<TData>({\n        resource: resource.name,\n        id: id ?? \"\",\n        queryOptions: {\n            enabled: enableQuery,\n            ...queryOptions,\n        },\n        liveMode,\n        onLiveEvent,\n        liveParams,\n        metaData,\n        dataProviderName,\n    });\n\n    const { isFetching: isFetchingQuery } = queryResult;\n\n    const mutationResultCreate = useCreate<TData, TError, TVariables>({\n        mutationOptions: createMutationOptions,\n    });\n    const { mutate: mutateCreate, isLoading: isLoadingCreate } =\n        mutationResultCreate;\n\n    const mutationResultUpdate = useUpdate<TData, TError, TVariables>({\n        mutationOptions: updateMutationOptions,\n    });\n    const { mutate: mutateUpdate, isLoading: isLoadingUpdate } =\n        mutationResultUpdate;\n\n    const { setWarnWhen } = useWarnAboutChange();\n\n    const handleSubmitWithRedirect = useRedirectionAfterSubmission();\n\n    const onFinishCreate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        const onSuccess = (id?: BaseKey) => {\n            handleSubmitWithRedirect({\n                redirect,\n                resource,\n                id,\n            });\n        };\n\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        return new Promise<CreateResponse<TData> | void>((resolve, reject) => {\n            if (mutationMode !== \"pessimistic\") {\n                resolve();\n            }\n            return mutateCreate(\n                {\n                    values,\n                    resource: resource.name,\n                    successNotification,\n                    errorNotification,\n                    metaData,\n                    dataProviderName,\n                    invalidates,\n                },\n                {\n                    onSuccess: (data, _, context) => {\n                        if (onMutationSuccess) {\n                            onMutationSuccess(data, values, context);\n                        }\n\n                        const responseId = data?.data?.id;\n\n                        onSuccess(responseId);\n\n                        resolve(data);\n                    },\n                    onError: (error: TError, _, context) => {\n                        if (onMutationError) {\n                            return onMutationError(error, values, context);\n                        }\n                        reject();\n                    },\n                },\n            );\n        });\n    };\n\n    const onFinishUpdate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        const variables: UpdateParams<TVariables> = {\n            id: id ?? \"\",\n            values,\n            resource: resource.name,\n            mutationMode,\n            undoableTimeout,\n            successNotification,\n            errorNotification,\n            metaData,\n            dataProviderName,\n            invalidates,\n        };\n\n        const onSuccess = () => {\n            // If it is in modal mode set it to undefined. Otherwise set it to current id from route.\n            setId(defaultId);\n            handleSubmitWithRedirect({\n                redirect,\n                resource,\n                id,\n            });\n        };\n\n        // setWarnWhen is set to \"false\" at the start of the mutation. With the help of setTimeout we guarantee that the value false is set.\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        // setTimeout is required to make onSuccess e.g. callbacks to work if component unmounts i.e. on route change\n        return new Promise<UpdateResponse<TData> | void>((resolve, reject) => {\n            if (mutationMode !== \"pessimistic\") {\n                resolve();\n            }\n            return setTimeout(() => {\n                mutateUpdate(variables, {\n                    onSuccess: (data, _, context) => {\n                        if (onMutationSuccess) {\n                            onMutationSuccess(data, values, context);\n                        }\n\n                        if (mutationMode === \"pessimistic\") {\n                            onSuccess();\n                        }\n\n                        resolve(data);\n                    },\n                    onError: (error: TError, _, context) => {\n                        if (onMutationError) {\n                            return onMutationError(error, values, context);\n                        }\n                        reject();\n                    },\n                });\n            });\n        });\n    };\n\n    const createResult = {\n        formLoading: isFetchingQuery || isLoadingCreate,\n        mutationResult: mutationResultCreate,\n        onFinish: onFinishCreate,\n    };\n\n    const editResult = {\n        formLoading: isFetchingQuery || isLoadingUpdate,\n        mutationResult: mutationResultUpdate,\n        onFinish: onFinishUpdate,\n    };\n\n    const result = isCreate || isClone ? createResult : editResult;\n\n    return {\n        ...result,\n        queryResult,\n        id,\n        setId,\n        redirect: (redirect, idFromFunction?: BaseKey | undefined) => {\n            handleSubmitWithRedirect({\n                redirect:\n                    redirect !== undefined\n                        ? redirect\n                        : isEdit\n                        ? \"list\"\n                        : \"edit\",\n                resource,\n                id: idFromFunction ?? id,\n            });\n        },\n    };\n};\n","import { useCallback } from \"react\";\n\nimport { BaseKey, IResourceItem, RedirectAction } from \"../../interfaces\";\nimport { useNavigation } from \"@hooks\";\n\nexport type UseRedirectionAfterSubmissionType = () => (options: {\n    redirect: RedirectAction;\n    resource: IResourceItem;\n    id?: BaseKey;\n}) => void;\n\nexport const useRedirectionAfterSubmission: UseRedirectionAfterSubmissionType =\n    () => {\n        const { show, edit, list, create } = useNavigation();\n\n        const handleSubmitWithRedirect = useCallback(\n            ({\n                redirect,\n                resource,\n                id,\n            }: {\n                redirect: RedirectAction;\n                resource: IResourceItem;\n                id?: BaseKey;\n            }) => {\n                if (redirect && resource.route) {\n                    if (resource.canShow && redirect === \"show\" && id) {\n                        return show(resource.route, id);\n                    }\n\n                    if (resource.canEdit && redirect === \"edit\" && id) {\n                        return edit(resource.route, id);\n                    }\n\n                    if (resource.canCreate && redirect === \"create\") {\n                        return create(resource.route);\n                    }\n\n                    return list(resource.route, \"push\");\n                } else {\n                    return;\n                }\n            },\n            [],\n        );\n\n        return handleSubmitWithRedirect;\n    };\n","import { useResourceWithRoute, useRouterContext } from \"@hooks\";\nimport { BaseKey } from \"../../interfaces\";\n\nexport type HistoryType = \"push\" | \"replace\";\n\n/**\n * `refine` uses {@link https://reactrouter.com/web/api/Hooks `React Router`} and comes with all redirects out of the box.\n * It allows you to manage your routing operations in refine.\n * Using this hook, you can manage all the routing operations of your application very easily.\n *\n * @see {@link https://refine.dev/docs/core/hooks/navigation/useNavigation} for more details.\n */\nexport const useNavigation = () => {\n    const { useHistory } = useRouterContext();\n    const history = useHistory();\n    const resourceWithRoute = useResourceWithRoute();\n\n    const handleUrl = (url: string, type: HistoryType = \"push\") => {\n        type === \"push\" ? history.push(url) : history.replace(url);\n    };\n\n    const createUrl = (resource: string) => {\n        const resourceName = resourceWithRoute(resource);\n        return `/${resourceName.route}/create`;\n    };\n\n    const editUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n\n        return `/${resourceName.route}/edit/${encodedId}`;\n    };\n\n    const cloneUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n        return `/${resourceName.route}/clone/${encodedId}`;\n    };\n\n    const showUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n        return `/${resourceName.route}/show/${encodedId}`;\n    };\n\n    const listUrl = (resource: string) => {\n        const resourceName = resourceWithRoute(resource);\n        return `/${resourceName.route}`;\n    };\n\n    const create = (resource: string, type: HistoryType = \"push\") => {\n        handleUrl(createUrl(resource), type);\n    };\n\n    const edit = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(editUrl(resource, id), type);\n    };\n\n    const clone = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(cloneUrl(resource, id), type);\n    };\n\n    const show = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(showUrl(resource, id), type);\n    };\n\n    const list = (resource: string, type: HistoryType = \"push\") => {\n        handleUrl(listUrl(resource), type);\n    };\n\n    const push = (path: string, ...rest: unknown[]) => {\n        history.push(path, ...rest);\n    };\n\n    const replace = (path: string, ...rest: unknown[]) => {\n        history.replace(path, ...rest);\n    };\n\n    const goBack = () => {\n        history.goBack();\n    };\n\n    return {\n        create,\n        createUrl,\n        edit,\n        editUrl,\n        clone,\n        cloneUrl,\n        show,\n        showUrl,\n        list,\n        listUrl,\n        push,\n        replace,\n        goBack,\n    };\n};\n","import React, { useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\n\nimport { useOne, useResourceWithRoute, useRouterContext } from \"@hooks\";\n\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    GetOneResponse,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    LiveModeProps,\n    BaseKey,\n    HttpError,\n} from \"../../interfaces\";\n\nexport type useShowReturnType<TData extends BaseRecord = BaseRecord> = {\n    queryResult: QueryObserverResult<GetOneResponse<TData>>;\n    showId?: BaseKey;\n    setShowId: React.Dispatch<React.SetStateAction<BaseKey | undefined>>;\n};\n\nexport type useShowProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Reads `:resource` from the URL\n     */\n    resource?: string;\n    /**\n     * Data item ID for API data interactions\n     * @default Reads `:id` from the URL\n     */\n    id?: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, HttpError>;\n    /**\n     * Additional meta data to pass to the data provider's `getOne`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * Target data provider name for API call to be made\n     * @default `\"default\"`\n     */\n    dataProviderName?: string;\n} & LiveModeProps &\n    SuccessErrorNotification;\n\n/**\n * `useShow` hook allows you to fetch the desired record.\n * It uses `getOne` method as query function from the dataProvider that is\n * passed to {@link https://refine.dev/docs/api-references/components/refine-config `<Refine>`}.\n *\n * @see {@link https://refine.dev/docs/core/hooks/show/useShow} for more details.\n */\nexport const useShow = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource: resourceFromProp,\n    id,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    dataProviderName,\n    queryOptions,\n}: useShowProps<TData, TError> = {}): useShowReturnType<TData> => {\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName, id: idFromRoute } =\n        useParams<ResourceRouterParams>();\n\n    const defaultId =\n        !resourceFromProp || resourceFromProp === routeResourceName\n            ? id ?? idFromRoute\n            : id;\n\n    const [showId, setShowId] = useState<BaseKey | undefined>(defaultId);\n\n    React.useEffect(() => {\n        if (defaultId !== showId) {\n            setShowId(defaultId);\n        }\n    }, [defaultId]);\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\n\n    const queryResult = useOne<TData>({\n        resource: resource.name,\n        id: showId ?? \"\",\n        queryOptions: {\n            enabled: showId !== undefined,\n            ...queryOptions,\n        },\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    return {\n        queryResult,\n        showId,\n        setShowId,\n    };\n};\n","import { useEffect, useState } from \"react\";\nimport { parse, ParseConfig } from \"papaparse\";\nimport chunk from \"lodash-es/chunk\";\n\nimport {\n    useCreate,\n    useCreateMany,\n    useResourceWithRoute,\n    useRouterContext,\n} from \"@hooks\";\nimport {\n    MapDataFn,\n    BaseRecord,\n    HttpError,\n    ResourceRouterParams,\n    MetaDataQuery,\n} from \"../../interfaces\";\nimport { importCSVMapper, sequentialPromises } from \"@definitions\";\nimport { UseCreateReturnType } from \"../../hooks/data/useCreate\";\nimport { UseCreateManyReturnType } from \"../../hooks/data/useCreateMany\";\n\nexport type ImportSuccessResult<TVariables, TData> = {\n    request: TVariables[];\n    type: \"success\";\n    response: TData[];\n};\n\nexport type ImportErrorResult<TVariables> = {\n    request: TVariables[];\n    type: \"error\";\n    response: HttpError[];\n};\n\nexport type OnFinishParams<TVariables, TData> = {\n    succeeded: ImportSuccessResult<TVariables, TData>[];\n    errored: ImportErrorResult<TVariables>[];\n};\n\nexport type OnProgressParams = {\n    totalAmount: number;\n    processedAmount: number;\n};\n\nexport type ImportOptions<\n    TItem,\n    TVariables = any,\n    TData extends BaseRecord = BaseRecord,\n> = {\n    /**\n     * Resource name for API data interactions.\n     * @default Resource name that it reads from route\n     */\n    resourceName?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents.\n     */\n    mapData?: MapDataFn<TItem, TVariables>;\n    /**\n     * Custom Papa Parse options.\n     * @type [`ParseConfig`](https://www.papaparse.com/docs)\n     */\n    paparseOptions?: ParseConfig;\n    /**\n     * Requests batch size. If it is 1, all records are sent one by one. By default, it is [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) to send all records in one batch. If it is more than 1, `createMany` should be implemented on DataProvider.\n     */\n    batchSize?: number;\n    /**\n     * Called with errors and successful responses when all requests are sent.\n     */\n    onFinish?: (results: OnFinishParams<TVariables, TData>) => void;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     *  A callback function that returns a current state of uploading process.\n     *\n     *  Ex: `percentage = onProgressParams.processedAmount / onProgressParams.totalAmount * 100`\n     */\n    onProgress?: (onProgressParams: OnProgressParams) => void;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n};\n\nexport type CreatedValuesType<TVariables, TData> =\n    | ImportSuccessResult<TVariables, TData>\n    | ImportErrorResult<TVariables>;\n\nexport type HandleChangeType<TVariables, TData> = (onChangeParams: {\n    file: Partial<File>;\n}) => Promise<CreatedValuesType<TVariables, TData>[]>;\n\nexport type UseImportInputPropsType = {\n    type: \"file\";\n    accept: string;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport type UseImportReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = {},\n    TError extends HttpError = HttpError,\n> = {\n    inputProps: UseImportInputPropsType;\n    mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n    isLoading: boolean;\n    handleChange: HandleChangeType<TVariables, TData>;\n};\n\n/**\n * `useImport` hook allows you to handle your csv import logic easily.\n *\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useImport} for more details.\n *\n * @typeParam TItem - Interface of parsed csv data\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useImport = <\n    TItem = any,\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = any,\n>({\n    resourceName,\n    mapData = (item) => item as unknown as TVariables,\n    paparseOptions,\n    batchSize = Number.MAX_SAFE_INTEGER,\n    onFinish,\n    metaData,\n    onProgress,\n    dataProviderName,\n}: ImportOptions<TItem, TVariables, TData> = {}): UseImportReturnType<\n    TData,\n    TVariables,\n    TError\n> => {\n    const [processedAmount, setProcessedAmount] = useState<number>(0);\n    const [totalAmount, setTotalAmount] = useState<number>(0);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const resourceWithRoute = useResourceWithRoute();\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n    const { name: resource } = resourceWithRoute(\n        resourceName ?? routeResourceName,\n    );\n\n    const createMany = useCreateMany<TData, TError, TVariables>();\n    const create = useCreate<TData, TError, TVariables>();\n\n    let mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n\n    if (batchSize === 1) {\n        mutationResult = create;\n    } else {\n        mutationResult = createMany;\n    }\n\n    const handleCleanup = () => {\n        setTotalAmount(0);\n        setProcessedAmount(0);\n        setIsLoading(false);\n    };\n\n    const handleFinish = (\n        createdValues: CreatedValuesType<TVariables, TData>[],\n    ) => {\n        const result = {\n            succeeded: createdValues.filter(\n                (item) => item.type === \"success\",\n            ) as unknown as ImportSuccessResult<TVariables, TData>[],\n            errored: createdValues.filter(\n                (item) => item.type === \"error\",\n            ) as unknown as ImportErrorResult<TVariables>[],\n        };\n\n        onFinish?.(result);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        onProgress?.({ totalAmount, processedAmount });\n    }, [totalAmount, processedAmount]);\n\n    const handleChange: HandleChangeType<TVariables, TData> = ({ file }) => {\n        handleCleanup();\n        return new Promise<CreatedValuesType<TVariables, TData>[]>(\n            (resolve) => {\n                setIsLoading(true);\n                parse(file as any, {\n                    complete: async ({ data }: { data: unknown[][] }) => {\n                        const values = importCSVMapper(data, mapData);\n\n                        setTotalAmount(values.length);\n\n                        if (batchSize === 1) {\n                            // Create Processor Functions\n                            const valueFns = values.map((value) => {\n                                const fn = async () => {\n                                    const response = await create.mutateAsync({\n                                        resource,\n                                        values: value,\n                                        successNotification: false,\n                                        errorNotification: false,\n                                        dataProviderName,\n                                        metaData,\n                                    });\n\n                                    return { response, value };\n                                };\n                                return fn;\n                            });\n                            // Sequentially run processor functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                valueFns,\n                                ({ response, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return currentAmount + 1;\n                                    });\n\n                                    return {\n                                        response: [response.data],\n                                        type: \"success\",\n                                        request: [value],\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: [values[index]],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // Resolve with created values\n                            resolve(createdValues);\n                        } else {\n                            // Create Chunks\n                            const chunks = chunk(values, batchSize);\n                            // Create Chunk Processor Functions\n                            const chunkedFns = chunks.map((chunkedValues) => {\n                                const fn = async () => {\n                                    const response =\n                                        await createMany.mutateAsync({\n                                            resource,\n                                            values: chunkedValues,\n                                            successNotification: false,\n                                            errorNotification: false,\n                                            dataProviderName,\n                                            metaData,\n                                        });\n\n                                    return {\n                                        response,\n                                        value: chunkedValues,\n                                        currentBatchLength:\n                                            chunkedValues.length,\n                                    };\n                                };\n\n                                return fn;\n                            });\n                            // Sequentially run chunked functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                chunkedFns,\n                                ({ response, currentBatchLength, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return (\n                                            currentAmount + currentBatchLength\n                                        );\n                                    });\n\n                                    return {\n                                        response: response.data,\n                                        type: \"success\",\n                                        request: value,\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: chunks[index],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // resolve with all created values\n                            resolve(createdValues);\n                        }\n                    },\n\n                    ...paparseOptions,\n                });\n            },\n        ).then((createdValues) => {\n            handleFinish(createdValues);\n            return createdValues;\n        });\n    };\n\n    return {\n        inputProps: {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.files && event.target.files.length > 0) {\n                    handleChange({ file: event.target.files[0] });\n                }\n            },\n        },\n        mutationResult,\n        isLoading,\n        handleChange,\n    };\n};\n","import { useCallback, useState } from \"react\";\n\nexport type useModalReturnType = {\n    visible: boolean;\n    show: () => void;\n    close: () => void;\n};\n\nexport type useModalProps = {\n    /**\n     * Initial state of the modal\n     */\n    defaultVisible?: boolean;\n};\n\nexport const useModal = ({\n    defaultVisible = false,\n}: useModalProps = {}): useModalReturnType => {\n    const [visible, setVisible] = useState(defaultVisible);\n\n    const show = useCallback(() => setVisible(true), [visible]);\n    const close = useCallback(() => setVisible(false), [visible]);\n\n    return {\n        visible,\n        show,\n        close,\n    };\n};\n","import { useContext } from \"react\";\nimport { RouterContext } from \"@contexts/router\";\n\nexport const useRouterContext = () => {\n    const { useHistory, useLocation, useParams, Prompt, Link, routes } =\n        useContext(RouterContext);\n\n    return {\n        useHistory,\n        useLocation,\n        useParams,\n        Prompt,\n        Link,\n        routes,\n    };\n};\n","import React from \"react\";\n\nimport { IRouterContext } from \"../../interfaces\";\n\nexport const defaultProvider: IRouterContext = {\n    useHistory: () => false,\n    useLocation: () => false,\n    useParams: () => ({} as any),\n    Prompt: () => null,\n    Link: () => null,\n};\n\nexport const RouterContext =\n    React.createContext<IRouterContext>(defaultProvider);\n\nexport const RouterContextProvider: React.FC<\n    IRouterContext & {\n        children?: React.ReactNode;\n    }\n> = ({\n    children,\n    useHistory,\n    useLocation,\n    useParams,\n    Prompt,\n    Link,\n    routes,\n}) => {\n    return (\n        <RouterContext.Provider\n            value={{\n                useHistory,\n                useLocation,\n                useParams,\n                Prompt,\n                Link,\n                routes,\n            }}\n        >\n            {children}\n        </RouterContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { CanParams, CanReturnType } from \"../../../interfaces\";\n\nexport type UseCanProps = CanParams & {\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<CanReturnType>;\n};\n\n/**\n * `useCan` uses the `can` as the query function for `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`}. It takes the parameters that `can` takes. It can also be configured with `queryOptions` for `useQuery`. Returns the result of `useQuery`.\n * @see {@link https://refine.dev/docs/core/hooks/accessControl/useCan} for more details.\n *\n * @typeParam CanParams {@link https://refine.dev/docs/core/interfaceReferences#canparams}\n * @typeParam CanReturnType {@link https://refine.dev/docs/core/interfaceReferences#canreturntype}\n *\n */\nexport const useCan = ({\n    action,\n    resource,\n    params,\n    queryOptions,\n}: UseCanProps): UseQueryResult<CanReturnType> => {\n    const { can } = useContext(AccessControlContext);\n\n    /**\n     * Since `react-query` stringifies the query keys, it will throw an error for a circular dependency if we include `React.ReactNode` elements inside the keys.\n     * The feature in #2220(https://github.com/refinedev/refine/issues/2220) includes such change and to fix this, we need to remove `icon` property in the `resource`\n     */\n    const { resource: _resource, ...paramsRest } = params ?? {};\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n        icon: _icon,\n        list: _list,\n        edit: _edit,\n        create: _create,\n        show: _show,\n        children: _children,\n        ...restResource\n    } = _resource ?? {};\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n    const queryResponse = useQuery<CanReturnType>(\n        [\n            \"useCan\",\n            {\n                action,\n                resource,\n                params: { ...paramsRest, resource: restResource },\n                enabled: queryOptions?.enabled,\n            },\n        ],\n        // Enabled check for `can` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        () =>\n            can?.({ action, resource, params }) ??\n            Promise.resolve({ can: true }),\n        {\n            enabled: typeof can !== \"undefined\",\n            ...queryOptions,\n            retry: false,\n        },\n    );\n\n    return typeof can === \"undefined\"\n        ? ({ data: { can: true } } as typeof queryResponse)\n        : queryResponse;\n};\n","import React from \"react\";\n\nimport { IAccessControlContext } from \"./IAccessControlContext\";\n\n/** @deprecated default value for access control context has no use and is an empty object. */\nexport const defaultAccessControlContext: IAccessControlContext = {};\n\nexport const AccessControlContext = React.createContext<IAccessControlContext>(\n    {},\n);\n\nexport const AccessControlContextProvider: React.FC<\n    IAccessControlContext & {\n        children?: React.ReactNode;\n    }\n> = ({ can, children }) => {\n    return (\n        <AccessControlContext.Provider value={{ can }}>\n            {children}\n        </AccessControlContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { IAccessControlContext } from \"../../interfaces\";\n\nexport const useCanWithoutCache = (): IAccessControlContext => {\n    const { can } = useContext(AccessControlContext);\n\n    return { can };\n};\n","import { useCallback, useMemo, useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport uniqBy from \"lodash/uniqBy\";\nimport debounce from \"lodash/debounce\";\nimport get from \"lodash/get\";\n\nimport { useList, useMany } from \"@hooks\";\nimport {\n    CrudSorting,\n    Option,\n    BaseRecord,\n    GetManyResponse,\n    GetListResponse,\n    CrudFilters,\n    SuccessErrorNotification,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n    BaseKey,\n    Pagination,\n} from \"../../interfaces\";\n\nexport type UseSelectProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Set the option's value\n     * @default `\"title\"`\n     */\n    optionLabel?: string;\n    /**\n     * Set the option's label value\n     * @default `\"id\"`\n     */\n    optionValue?: string;\n    /**\n     * Allow us to sort the options\n     */\n    sort?: CrudSorting;\n    /**\n     * Resource name for API data interactions\n     */\n    filters?: CrudFilters;\n    /**\n     * Adds extra `options`\n     */\n    defaultValue?: BaseKey | BaseKey[];\n    /**\n     * The number of milliseconds to delay\n     * @default `300`\n     */\n    debounce?: number;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     * Pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type {  current?: number; pageSize?: number;}\n     * @default `undefined`\n     */\n    pagination?: Pagination;\n    /**\n     * Disabling pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type boolean\n     * @default `undefined`\n     */\n    hasPagination?: boolean;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    defaultValueQueryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\n    /**\n     * If defined, this callback allows us to override all filters for every search request.\n     * @default `undefined`\n     */\n    onSearch?: (value: string) => CrudFilters;\n    /**\n     * Metadata query for `dataProvider`\n     * @default `{}`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `default`\n     */\n    dataProviderName?: string;\n    /**\n     * Amount of records to fetch in select box list.\n     * @deprecated use [`pagination`](https://refine.dev/docs/api-reference/core/interfaceReferences/#pagination) instead\n     * @default `undefined`\n     */\n    fetchSize?: number;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\nexport type UseSelectReturnType<TData extends BaseRecord = BaseRecord> = {\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\n    defaultValueQueryResult: QueryObserverResult<GetManyResponse<TData>>;\n    onSearch: (value: string) => void;\n    options: Option[];\n};\n\nexport const useSelect = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props: UseSelectProps<TData, TError>,\n): UseSelectReturnType<TData> => {\n    const [search, setSearch] = useState<CrudFilters>([]);\n    const [options, setOptions] = useState<Option[]>([]);\n    const [selectedOptions, setSelectedOptions] = useState<Option[]>([]);\n\n    const {\n        resource,\n        sort,\n        filters = [],\n        optionLabel = \"title\",\n        optionValue = \"id\",\n        debounce: debounceValue = 300,\n        successNotification,\n        errorNotification,\n        defaultValueQueryOptions: defaultValueQueryOptionsFromProps,\n        queryOptions,\n        fetchSize,\n        pagination,\n        hasPagination,\n        liveMode,\n        defaultValue = [],\n        onLiveEvent,\n        onSearch: onSearchFromProp,\n        liveParams,\n        metaData,\n        dataProviderName,\n    } = props;\n\n    const defaultValues = Array.isArray(defaultValue)\n        ? defaultValue\n        : [defaultValue];\n\n    const defaultValueQueryOnSuccess = useCallback(\n        (data: GetManyResponse<TData>) => {\n            setSelectedOptions(\n                data.data.map((item) => ({\n                    label: get(item, optionLabel),\n                    value: get(item, optionValue),\n                })),\n            );\n        },\n        [optionLabel, optionValue],\n    );\n\n    const defaultValueQueryOptions =\n        defaultValueQueryOptionsFromProps ?? (queryOptions as any);\n\n    const defaultValueQueryResult = useMany<TData, TError>({\n        resource,\n        ids: defaultValues,\n        queryOptions: {\n            ...defaultValueQueryOptions,\n            enabled:\n                defaultValues.length > 0 &&\n                (defaultValueQueryOptionsFromProps?.enabled ?? true),\n            onSuccess: (data) => {\n                defaultValueQueryOnSuccess(data);\n                defaultValueQueryOptions?.onSuccess?.(data);\n            },\n        },\n        metaData,\n        liveMode: \"off\",\n        dataProviderName,\n    });\n\n    const defaultQueryOnSuccess = useCallback(\n        (data: GetListResponse<TData>) => {\n            {\n                setOptions(\n                    data.data.map((item) => ({\n                        label: get(item, optionLabel),\n                        value: get(item, optionValue),\n                    })),\n                );\n            }\n        },\n        [optionLabel, optionValue],\n    );\n\n    const queryResult = useList<TData, TError>({\n        resource,\n        config: {\n            sort,\n            filters: filters.concat(search),\n            pagination: {\n                current: pagination?.current,\n                pageSize: pagination?.pageSize ?? fetchSize,\n            },\n            hasPagination,\n        },\n        queryOptions: {\n            ...queryOptions,\n            onSuccess: (data) => {\n                defaultQueryOnSuccess(data);\n                queryOptions?.onSuccess?.(data);\n            },\n        },\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const onSearch = (value: string) => {\n        if (onSearchFromProp) {\n            setSearch(onSearchFromProp(value));\n            return;\n        }\n\n        if (!value) {\n            setSearch([]);\n            return;\n        } else {\n            setSearch([\n                {\n                    field: optionLabel,\n                    operator: \"contains\",\n                    value,\n                },\n            ]);\n        }\n    };\n\n    return {\n        queryResult,\n        defaultValueQueryResult,\n        options: useMemo(\n            () => uniqBy([...options, ...selectedOptions], \"value\"),\n            [options, selectedOptions],\n        ),\n        onSearch: debounce(onSearch, debounceValue),\n    };\n};\n","import React, { useMemo, useState, useEffect } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport qs from \"qs\";\nimport differenceWith from \"lodash/differenceWith\";\nimport isEqual from \"lodash/isEqual\";\n\nimport {\n    useRouterContext,\n    useSyncWithLocation,\n    useNavigation,\n    useResourceWithRoute,\n    useList,\n    useLiveMode,\n} from \"@hooks\";\nimport {\n    stringifyTableParams,\n    parseTableParams,\n    unionFilters,\n    setInitialFilters,\n    setInitialSorters,\n    unionSorters,\n} from \"@definitions/table\";\n\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    GetListResponse,\n    SuccessErrorNotification,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n} from \"../../interfaces\";\n\ntype SetFilterBehavior = \"merge\" | \"replace\";\n\nexport type useTableProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Initial page index\n     * @default 1\n     */\n    initialCurrent?: number;\n    /**\n     * Initial number of items per page\n     * @default 10\n     */\n    initialPageSize?: number;\n    /**\n     * Initial sorter state\n     */\n    initialSorter?: CrudSorting;\n    /**\n     * Default and unchangeable sorter state\n     *  @default `[]`\n     */\n    permanentSorter?: CrudSorting;\n    /**\n     * Initial filter state\n     */\n    initialFilter?: CrudFilters;\n    /**\n     * WDefault and unchangeable filter state\n     * @default `[]`\n     */\n    permanentFilter?: CrudFilters;\n    /**\n     *Default behavior of the `setFilters` function\n     * @default `\"merge\"`\n     */\n    defaultSetFilterBehavior?: SetFilterBehavior;\n    /**\n     * Whether to use server side pagination or not.\n     * @default `true`\n     */\n    hasPagination?: boolean;\n    /**\n     * Sortings, filters, page index and records shown per page are tracked by browser history\n     * @default Value set in [Refine](/docs/api-reference/core/components/refine-config/#syncwithlocation). If a custom resource is given, it will be `false`\n     */\n    syncWithLocation?: boolean;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     * Metadata query for dataProvider\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\ntype ReactSetState<T> = React.Dispatch<React.SetStateAction<T>>;\n\ntype SyncWithLocationParams = {\n    pagination: { current?: number; pageSize?: number };\n    sorter: CrudSorting;\n    filters: CrudFilters;\n};\n\nexport type useTablePaginationKeys =\n    | \"current\"\n    | \"setCurrent\"\n    | \"pageSize\"\n    | \"setPageSize\"\n    | \"pageCount\";\n\nexport type useTableReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = {\n    tableQueryResult: QueryObserverResult<GetListResponse<TData>, TError>;\n    sorter: CrudSorting;\n    setSorter: (sorter: CrudSorting) => void;\n    filters: CrudFilters;\n    setFilters: ((filters: CrudFilters, behavior?: SetFilterBehavior) => void) &\n        ((setter: (prevFilters: CrudFilters) => CrudFilters) => void);\n    createLinkForSyncWithLocation: (params: SyncWithLocationParams) => string;\n    current: number;\n    setCurrent: ReactSetState<useTableReturnType[\"current\"]>;\n    pageSize: number;\n    setPageSize: ReactSetState<useTableReturnType[\"pageSize\"]>;\n    pageCount: number;\n};\n\nexport type useTableNoPaginationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = Omit<useTableReturnType<TData, TError>, useTablePaginationKeys> &\n    Record<useTablePaginationKeys, undefined>;\n\n/**\n * By using useTable, you are able to get properties that are compatible with\n * Ant Design {@link https://ant.design/components/table/ `<Table>`} component.\n * All features such as sorting, filtering and pagination comes as out of box.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/table/useTable} for more details.\n */\n\nconst defaultPermanentFilter: CrudFilters = [];\nconst defaultPermanentSorter: CrudSorting = [];\n\n// overload with pagination\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props?: useTableProps<TData, TError> & {\n        hasPagination?: true;\n    },\n): useTableReturnType<TData, TError>;\n// overload without pagination\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props?: useTableProps<TData, TError> & {\n        hasPagination: false;\n    },\n): useTableNoPaginationReturnType<TData, TError>;\n// implementation\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    initialCurrent = 1,\n    initialPageSize = 10,\n    hasPagination = true,\n    initialSorter,\n    permanentSorter = defaultPermanentSorter,\n    defaultSetFilterBehavior = \"merge\",\n    initialFilter,\n    permanentFilter = defaultPermanentFilter,\n    syncWithLocation: syncWithLocationProp,\n    resource: resourceFromProp,\n    successNotification,\n    errorNotification,\n    queryOptions,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n    liveParams,\n    metaData,\n    dataProviderName,\n}: useTableProps<TData, TError> = {}):\n    | useTableReturnType<TData, TError>\n    | useTableNoPaginationReturnType<TData, TError> {\n    const { syncWithLocation: syncWithLocationContext } = useSyncWithLocation();\n\n    const syncWithLocation = syncWithLocationProp ?? syncWithLocationContext;\n\n    const { useLocation, useParams } = useRouterContext();\n    const { search, pathname } = useLocation();\n    const liveMode = useLiveMode(liveModeFromProp);\n\n    // We want to always parse the query string even when syncWithLocation is\n    // deactivated, for hotlinking to work properly\n    const { parsedCurrent, parsedPageSize, parsedSorter, parsedFilters } =\n        parseTableParams(search);\n\n    const defaultCurrent = parsedCurrent || initialCurrent;\n    const defaultPageSize = parsedPageSize || initialPageSize;\n    const defaultSorter = parsedSorter.length ? parsedSorter : initialSorter;\n    const defaultFilter = parsedFilters.length ? parsedFilters : initialFilter;\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n\n    const { replace } = useNavigation();\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\n\n    const [sorter, setSorter] = useState<CrudSorting>(\n        setInitialSorters(permanentSorter, defaultSorter ?? []),\n    );\n    const [filters, setFilters] = useState<CrudFilters>(\n        setInitialFilters(permanentFilter, defaultFilter ?? []),\n    );\n    const [current, setCurrent] = useState<number>(defaultCurrent);\n    const [pageSize, setPageSize] = useState<number>(defaultPageSize);\n\n    const createLinkForSyncWithLocation = ({\n        pagination: { current, pageSize },\n        sorter,\n        filters,\n    }: SyncWithLocationParams) => {\n        const currentQueryParams = qs.parse(search?.substring(1)); // remove first ? character\n\n        const stringifyParams = stringifyTableParams({\n            pagination: {\n                pageSize,\n                current,\n            },\n            sorter,\n            filters,\n            ...currentQueryParams,\n        });\n        return `${pathname}?${stringifyParams}`;\n    };\n\n    useEffect(() => {\n        if (search === \"\") {\n            setCurrent(defaultCurrent);\n            setPageSize(defaultPageSize);\n            setSorter(setInitialSorters(permanentSorter, defaultSorter ?? []));\n            setFilters(setInitialFilters(permanentFilter, defaultFilter ?? []));\n        }\n    }, [search]);\n\n    const currentQueryParams = (): object => {\n        // We get QueryString parameters that are uncontrolled by refine.\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { sorter, filters, pageSize, current, ...rest } = qs.parse(\n            search,\n            {\n                ignoreQueryPrefix: true,\n            },\n        );\n\n        return rest;\n    };\n\n    useEffect(() => {\n        if (syncWithLocation) {\n            const queryParams = currentQueryParams();\n            const stringifyParams = stringifyTableParams({\n                ...(hasPagination\n                    ? {\n                          pagination: {\n                              pageSize,\n                              current,\n                          },\n                      }\n                    : {}),\n                sorter: differenceWith(sorter, permanentSorter, isEqual),\n                filters: differenceWith(filters, permanentFilter, isEqual),\n                ...queryParams,\n            });\n\n            // Careful! This triggers render\n            return replace(`${pathname}?${stringifyParams}`, undefined, {\n                shallow: true,\n            });\n        }\n    }, [syncWithLocation, current, pageSize, sorter, filters]);\n\n    const queryResult = useList<TData, TError>({\n        resource: resource.name,\n        config: {\n            hasPagination,\n            pagination: { current, pageSize },\n            filters: unionFilters(permanentFilter, filters),\n            sort: unionSorters(permanentSorter, sorter),\n        },\n        queryOptions,\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const setFiltersAsMerge = (newFilters: CrudFilters) => {\n        setFilters((prevFilters) =>\n            unionFilters(permanentFilter, newFilters, prevFilters),\n        );\n    };\n\n    const setFiltersAsReplace = (newFilters: CrudFilters) => {\n        setFilters(unionFilters(permanentFilter, newFilters));\n    };\n\n    const setFiltersWithSetter = (\n        setter: (prevFilters: CrudFilters) => CrudFilters,\n    ) => {\n        setFilters((prev) => unionFilters(permanentFilter, setter(prev)));\n    };\n\n    const setFiltersFn: useTableReturnType<TData>[\"setFilters\"] = (\n        setterOrFilters,\n        behavior: SetFilterBehavior = defaultSetFilterBehavior,\n    ) => {\n        if (typeof setterOrFilters === \"function\") {\n            setFiltersWithSetter(setterOrFilters);\n        } else {\n            if (behavior === \"replace\") {\n                setFiltersAsReplace(setterOrFilters);\n            } else {\n                setFiltersAsMerge(setterOrFilters);\n            }\n        }\n    };\n\n    const setSortWithUnion = (newSorter: CrudSorting) => {\n        setSorter(() => unionSorters(permanentSorter, newSorter));\n    };\n\n    const paginationValues = useMemo(() => {\n        if (hasPagination) {\n            return {\n                current,\n                setCurrent,\n                pageSize,\n                setPageSize,\n                pageCount: pageSize\n                    ? Math.ceil((queryResult.data?.total ?? 0) / pageSize)\n                    : 1,\n            };\n        }\n\n        return {\n            current: undefined,\n            setCurrent: undefined,\n            pageSize: undefined,\n            setPageSize: undefined,\n            pageCount: undefined,\n        };\n    }, [hasPagination, current, pageSize, queryResult.data?.total]);\n\n    return {\n        tableQueryResult: queryResult,\n        sorter,\n        setSorter: setSortWithUnion,\n        filters,\n        setFilters: setFiltersFn,\n        ...paginationValues,\n        createLinkForSyncWithLocation,\n    };\n}\n","import { useContext } from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { useGetIdentity } from \"@hooks/auth\";\nimport { BaseKey, LogParams } from \"../../../interfaces\";\nimport { hasPermission, queryKeys } from \"@definitions/helpers\";\n\ntype LogRenameData =\n    | {\n          resource?: string;\n      }\n    | undefined;\n\nexport type UseLogReturnType<TLogData, TLogRenameData> = {\n    log: UseMutationResult<TLogData, Error, LogParams>;\n    rename: UseMutationResult<\n        TLogRenameData,\n        Error,\n        {\n            id: BaseKey;\n            name: string;\n        }\n    >;\n};\n\nexport type UseLogMutationProps<\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n> = {\n    logMutationOptions?: Omit<\n        UseMutationOptions<TLogData, Error, LogParams, unknown>,\n        \"mutationFn\"\n    >;\n    renameMutationOptions?: Omit<\n        UseMutationOptions<\n            TLogRenameData,\n            Error,\n            { id: BaseKey; name: string },\n            unknown\n        >,\n        \"mutationFn\" | \"onSuccess\"\n    >;\n};\n\n/**\n * useLog is used to `create` a new and `rename` the existing audit log.\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLog} for more details.\n */\n\nexport const useLog = <\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n>({\n    logMutationOptions,\n    renameMutationOptions,\n}: UseLogMutationProps<TLogData, TLogRenameData> = {}): UseLogReturnType<\n    TLogData,\n    TLogRenameData\n> => {\n    const queryClient = useQueryClient();\n    const auditLogContext = useContext(AuditLogContext);\n\n    const { resources } = useContext(ResourceContext);\n    const {\n        data: identityData,\n        refetch,\n        isLoading,\n    } = useGetIdentity({\n        queryOptions: {\n            enabled: !!auditLogContext,\n        },\n    });\n\n    const log = useMutation<TLogData, Error, LogParams, unknown>(\n        async (params) => {\n            const resource = resources.find((p) => p.name === params.resource);\n            const logPermissions = resource?.options?.auditLog?.permissions;\n\n            if (logPermissions) {\n                if (!hasPermission(logPermissions, params.action)) {\n                    return;\n                }\n            }\n\n            let authorData;\n            if (isLoading) {\n                authorData = await refetch();\n            }\n\n            return await auditLogContext.create?.({\n                ...params,\n                author: identityData ?? authorData?.data,\n            });\n        },\n        logMutationOptions,\n    );\n\n    const rename = useMutation<\n        TLogRenameData,\n        Error,\n        { id: BaseKey; name: string },\n        unknown\n    >(\n        async (params) => {\n            return await auditLogContext.update?.(params);\n        },\n        {\n            onSuccess: (data) => {\n                if (data?.resource) {\n                    const queryKey = queryKeys(data?.resource);\n                    queryClient.invalidateQueries(queryKey.logList());\n                }\n            },\n            ...renameMutationOptions,\n        },\n    );\n\n    return { log, rename };\n};\n","import React from \"react\";\n\nimport { IAuditLogContext } from \"./IAuditLogContext\";\n\nexport const AuditLogContext = React.createContext<IAuditLogContext>({});\n\nexport const AuditLogContextProvider: React.FC<\n    IAuditLogContext & {\n        children: React.ReactNode;\n    }\n> = ({ create, get, update, children }) => {\n    return (\n        <AuditLogContext.Provider value={{ create, get, update }}>\n            {children}\n        </AuditLogContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { queryKeys } from \"@definitions/helpers\";\nimport { HttpError, MetaDataQuery } from \"../../../interfaces\";\n\nexport type UseLogProps<TData, TError> = {\n    resource: string;\n    action?: string;\n    meta?: Record<number | string, any>;\n    author?: Record<number | string, any>;\n    queryOptions?: UseQueryOptions<TData, TError>;\n    metaData?: MetaDataQuery;\n};\n\n/**\n * useLogList is used to get and filter audit logs.\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLogList} for more details.\n */\nexport const useLogList = <TData = any, TError extends HttpError = HttpError>({\n    resource,\n    action,\n    meta,\n    author,\n    metaData,\n    queryOptions,\n}: UseLogProps<TData, TError>): UseQueryResult<TData> => {\n    const { get } = useContext(AuditLogContext);\n\n    const queryKey = queryKeys(resource, undefined, metaData);\n\n    const queryResponse = useQuery<TData, TError>(\n        queryKey.logList(meta),\n        () =>\n            get?.({\n                resource,\n                action,\n                author,\n                meta,\n                metaData,\n            }) ?? Promise.resolve([]),\n        {\n            enabled: typeof get !== \"undefined\",\n            ...queryOptions,\n            retry: false,\n        },\n    );\n\n    return queryResponse;\n};\n","import { useCallback } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nimport { useResource } from \"@hooks/resource\";\nimport { queryKeys, pickDataProvider } from \"@definitions\";\nimport { BaseKey, IQueryKeys } from \"../../interfaces\";\n\nexport type UseInvalidateProp = {\n    resource?: string;\n    id?: BaseKey;\n    dataProviderName?: string;\n    invalidates: Array<keyof IQueryKeys> | false;\n};\n\nexport const useInvalidate = (): ((props: UseInvalidateProp) => void) => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const invalidate = useCallback(\n        ({\n            resource,\n            dataProviderName,\n            invalidates,\n            id,\n        }: UseInvalidateProp) => {\n            if (invalidates === false) {\n                return;\n            }\n            const queryKey = queryKeys(\n                resource,\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            invalidates.forEach((key) => {\n                switch (key) {\n                    case \"all\":\n                        queryClient.invalidateQueries(queryKey.all);\n                        break;\n                    case \"list\":\n                        queryClient.invalidateQueries(queryKey.list());\n                        break;\n                    case \"many\":\n                        queryClient.invalidateQueries(queryKey.many());\n                        break;\n                    case \"resourceAll\":\n                        queryClient.invalidateQueries(queryKey.resourceAll);\n                        break;\n                    case \"detail\":\n                        queryClient.invalidateQueries(\n                            queryKey.detail(id || \"\"),\n                        );\n                        break;\n                    default:\n                        break;\n                }\n            });\n        },\n        [],\n    );\n\n    return invalidate;\n};\n","import React, { useContext } from \"react\";\nimport warnOnce from \"warn-once\";\n\nimport { useResource, useRouterContext, useTranslate } from \"@hooks\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { humanizeString } from \"@definitions\";\n\nimport { ResourceRouterParams } from \"../../interfaces\";\n\nexport type BreadcrumbsType = {\n    label: string;\n    href?: string;\n    icon?: React.ReactNode;\n};\n\ntype UseBreadcrumbReturnType = {\n    breadcrumbs: BreadcrumbsType[];\n};\n\nexport const useBreadcrumb = (): UseBreadcrumbReturnType => {\n    const { useParams } = useRouterContext();\n    const { i18nProvider } = useContext(TranslationContext);\n\n    const translate = useTranslate();\n\n    const { resources, resource } = useResource();\n\n    const { action } = useParams<ResourceRouterParams>();\n\n    const breadcrumbs: BreadcrumbsType[] = [];\n\n    if (!resource?.name) {\n        return { breadcrumbs };\n    }\n\n    const addBreadcrumb = (parentName: string) => {\n        const parentResource = resources.find(\n            (resource) => resource.name === parentName,\n        );\n\n        if (parentResource) {\n            if (parentResource.parentName) {\n                addBreadcrumb(parentResource.parentName);\n            }\n            breadcrumbs.push({\n                label:\n                    parentResource.label ??\n                    translate(\n                        `${parentResource.name}.${parentResource.name}`,\n                        humanizeString(parentResource.name),\n                    ),\n\n                href: !!parentResource.list\n                    ? `/${parentResource.route}`\n                    : undefined,\n                icon: parentResource.icon,\n            });\n        }\n    };\n\n    if (resource.parentName) {\n        addBreadcrumb(resource.parentName);\n    }\n\n    breadcrumbs.push({\n        label:\n            resource.label ??\n            translate(\n                `${resource.name}.${resource.name}`,\n                humanizeString(resource.name),\n            ),\n        href: !!resource.list ? `/${resource.route}` : undefined,\n        icon: resource.icon,\n    });\n\n    if (action) {\n        const key = `actions.${action}`;\n        const actionLabel = translate(key);\n        if (typeof i18nProvider !== \"undefined\" && actionLabel === key) {\n            warnOnce(\n                true,\n                `[useBreadcrumb]: Breadcrumb missing translate key for the \"${action}\" action. Please add \"actions.${action}\" key to your translation file.\\nFor more information, see https://refine.dev/docs/core/hooks/useBreadcrumb/#i18n-support`,\n            );\n            breadcrumbs.push({\n                label: translate(`buttons.${action}`, humanizeString(action)),\n            });\n        } else {\n            breadcrumbs.push({\n                label: translate(key, humanizeString(action)),\n            });\n        }\n    }\n\n    return {\n        breadcrumbs,\n    };\n};\n","import React from \"react\";\nimport {\n    useRefineContext,\n    useTranslate,\n    useResource,\n    useRouterContext,\n} from \"..\";\nimport { IMenuItem, ITreeMenu } from \"../../interfaces\";\nimport { userFriendlyResourceName, createTreeView } from \"@definitions\";\n\ntype useMenuReturnType = {\n    defaultOpenKeys: string[];\n    selectedKey: string;\n    menuItems: ITreeMenu[];\n};\n\n/**\n * `useMenu` is used to get menu items of the default sidebar.\n * These items include a link to dashboard page (if it exists) and links to the user defined resources\n * (passed as children to {@link https://refine.dev/docs/core/components/refine-config `<Refine>`}).\n * This hook can also be used to build custom menus, which is also used by default sidebar to show menu items.\n *\n * @see {@link https://refine.dev/docs/core/hooks/ui/useMenu} for more details.\n */\nexport const useMenu: () => useMenuReturnType = () => {\n    const { resources } = useResource();\n    const translate = useTranslate();\n\n    const { useLocation, useParams } = useRouterContext();\n    const location = useLocation();\n    const params = useParams<{ resource: string }>();\n\n    const { hasDashboard } = useRefineContext();\n\n    const selectedKey = React.useMemo(() => {\n        let selectedResource = resources.find(\n            (el) => location?.pathname === `/${el.route}`,\n        );\n\n        if (!selectedResource) {\n            selectedResource = resources.find(\n                (el) => params?.resource === (el.route as string),\n            );\n        }\n\n        let _selectedKey: string;\n        if (selectedResource?.route) {\n            _selectedKey = `/${selectedResource?.route}`;\n        } else if (location.pathname === \"/\") {\n            _selectedKey = \"/\";\n        } else {\n            _selectedKey = location?.pathname;\n        }\n        return _selectedKey;\n    }, [resources, location, params]);\n\n    const treeMenuItems: IMenuItem[] = React.useMemo(\n        () =>\n            resources.map((resource) => {\n                const route = `/${resource.route}`;\n\n                return {\n                    ...resource,\n                    icon: resource.icon,\n                    route: route,\n                    key: resource.key ?? route,\n                    label:\n                        resource.label ??\n                        translate(\n                            `${resource.name}.${resource.name}`,\n                            userFriendlyResourceName(resource.name, \"plural\"),\n                        ),\n                };\n            }),\n        [resources, hasDashboard, translate],\n    );\n    const menuItems: ITreeMenu[] = React.useMemo(\n        () => createTreeView(treeMenuItems),\n        [treeMenuItems],\n    );\n\n    const crawlNestedKeys = React.useCallback(\n        (\n            currentKey: string,\n            currentResources: typeof resources,\n            isParent = false,\n        ): string[] => {\n            const currentElement = currentResources.find((el) =>\n                isParent ? el.name === currentKey : el.route === currentKey,\n            );\n\n            if (currentElement) {\n                const keysArray: string[] = [];\n\n                if (isParent && currentElement.route) {\n                    keysArray.unshift(...[currentElement.route]);\n                }\n\n                if (currentElement.parentName) {\n                    keysArray.unshift(\n                        ...crawlNestedKeys(\n                            currentElement.parentName,\n                            currentResources,\n                            true,\n                        ),\n                    );\n                }\n                return keysArray;\n            }\n\n            return [];\n        },\n        [],\n    );\n\n    const defaultOpenKeys = React.useMemo(\n        () => crawlNestedKeys(selectedKey, treeMenuItems),\n        [selectedKey, treeMenuItems],\n    );\n\n    const values = React.useMemo(() => {\n        const filterMenuItemsByListViewAndHideOption = (\n            menus: ITreeMenu[],\n        ): ITreeMenu[] => {\n            return menus.reduce((menuItem: ITreeMenu[], obj) => {\n                if (obj.children.length > 0 && obj.options?.hide !== true)\n                    return [\n                        ...menuItem,\n                        {\n                            ...obj,\n                            children: filterMenuItemsByListViewAndHideOption(\n                                obj.children,\n                            ),\n                        },\n                    ];\n                else if (\n                    typeof obj.list !== \"undefined\" &&\n                    obj.options?.hide !== true\n                )\n                    return [...menuItem, obj];\n\n                return menuItem;\n            }, []);\n        };\n\n        return {\n            defaultOpenKeys,\n            selectedKey,\n            menuItems: filterMenuItemsByListViewAndHideOption(menuItems),\n        };\n    }, [defaultOpenKeys, selectedKey, menuItems]);\n\n    return values;\n};\n","import React, { useState } from \"react\";\n\nimport { useLogin, useTranslate } from \"@hooks\";\nexport interface ILoginForm {\n    username: string;\n    password: string;\n}\n\n/**\n * @deprecated LoginPage is deprecated. Use AuthPage instead. @see {@link https://refine.dev/docs/core/components/auth-page} for more details.\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#loginpage} for more details.\n */\nexport const LoginPage: React.FC = () => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const { mutate: login } = useLogin<ILoginForm>();\n\n    return (\n        <>\n            <h1>{translate(\"pages.login.title\", \"Sign in your account\")}</h1>\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    login({ username, password });\n                }}\n            >\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.username\",\n                                    undefined,\n                                    \"username\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"text\"\n                                    size={20}\n                                    autoCorrect=\"off\"\n                                    spellCheck={false}\n                                    autoCapitalize=\"off\"\n                                    autoFocus\n                                    required\n                                    value={username}\n                                    onChange={(e) =>\n                                        setUsername(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.password\",\n                                    undefined,\n                                    \"password\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"password\"\n                                    required\n                                    size={20}\n                                    value={password}\n                                    onChange={(e) =>\n                                        setPassword(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <br />\n                <input type=\"submit\" value=\"login\" />\n            </form>\n        </>\n    );\n};\n","import React, {\n    DetailedHTMLProps,\n    HTMLAttributes,\n    FormHTMLAttributes,\n} from \"react\";\n\nimport {\n    LoginPage,\n    RegisterPage,\n    ForgotPasswordPage,\n    UpdatePasswordPage,\n} from \"./components\";\n\nimport { AuthPageProps } from \"../../../interfaces\";\n\nexport type DivPropsType = DetailedHTMLProps<\n    HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n>;\nexport type FormPropsType = DetailedHTMLProps<\n    FormHTMLAttributes<HTMLFormElement>,\n    HTMLFormElement\n>;\n\nexport type AuthProps = AuthPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\n/**\n * **refine** has a default auth page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#authpage} for more details.\n */\nexport const AuthPage: React.FC<AuthProps> = (props) => {\n    const { type } = props;\n    const renderView = () => {\n        switch (type) {\n            case \"register\":\n                return <RegisterPage {...props} />;\n            case \"forgotPassword\":\n                return <ForgotPasswordPage {...props} />;\n            case \"updatePassword\":\n                return <UpdatePasswordPage {...props} />;\n            default:\n                return <LoginPage {...props} />;\n        }\n    };\n\n    return <>{renderView()}</>;\n};\n","import React, { useState } from \"react\";\nimport { LoginPageProps, LoginFormTypes } from \"../../../../../interfaces\";\n\nimport { useRouterContext, useLogin } from \"@hooks\";\nimport { useTranslate } from \"@hooks/translate\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype LoginProps = LoginPageProps<DivPropsType, DivPropsType, FormPropsType>;\n\nexport const LoginPage: React.FC<LoginProps> = ({\n    providers,\n    registerLink,\n    forgotPasswordLink,\n    rememberMe,\n    contentProps,\n    wrapperProps,\n    renderContent,\n    formProps,\n}) => {\n    const { Link } = useRouterContext();\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [remember, setRemember] = useState(false);\n\n    const translate = useTranslate();\n\n    const { mutate: login } = useLogin<LoginFormTypes>();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            login({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.login.title\", \"Sign in to your account\")}\n            </h1>\n            {renderProviders()}\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    login({ email, password, remember });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\"pages.login.fields.email\", \"Email\")}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"text\"\n                        size={20}\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <label>\n                        {translate(\"pages.login.fields.password\", \"Password\")}\n                    </label>\n                    <input\n                        type=\"password\"\n                        name=\"password\"\n                        required\n                        size={20}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    {rememberMe ?? (\n                        <>\n                            <label>\n                                {translate(\n                                    \"pages.login.buttons.rememberMe\",\n                                    \"Remember me\",\n                                )}\n                                <input\n                                    name=\"remember\"\n                                    type=\"checkbox\"\n                                    size={20}\n                                    checked={remember}\n                                    value={remember.toString()}\n                                    onChange={() => {\n                                        setRemember(!remember);\n                                    }}\n                                />\n                            </label>\n                        </>\n                    )}\n                    <br />\n                    {forgotPasswordLink ??\n                        renderLink(\n                            \"/forgot-password\",\n                            translate(\n                                \"pages.login.buttons.forgotPassword\",\n                                \"Forgot password?\",\n                            ),\n                        )}\n                    <input\n                        type=\"submit\"\n                        value={translate(\"pages.login.signin\", \"Sign in\")}\n                    />\n                    {registerLink ?? (\n                        <span>\n                            {translate(\n                                \"pages.login.buttons.noAccount\",\n                                \"Don’t have an account?\",\n                            )}{\" \"}\n                            {renderLink(\n                                \"/register\",\n                                translate(\"pages.login.register\", \"Sign up\"),\n                            )}\n                        </span>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { RegisterPageProps } from \"../../../../../interfaces\";\n\nimport { useTranslate, useRouterContext, useRegister } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype RegisterProps = RegisterPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const RegisterPage: React.FC<RegisterProps> = ({\n    providers,\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const { Link } = useRouterContext();\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const { mutate: register, isLoading } = useRegister();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            register({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.register.title\", \"Sign up for your account\")}\n            </h1>\n            {renderProviders()}\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    register({ email, password });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\"pages.register.fields.email\", \"Email\")}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"email\"\n                        size={20}\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <label>\n                        {translate(\n                            \"pages.register.fields.password\",\n                            \"Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        value={translate(\n                            \"pages.register.buttons.submit\",\n                            \"Sign up\",\n                        )}\n                        disabled={isLoading}\n                    />\n                    {loginLink ?? (\n                        <>\n                            <span>\n                                {translate(\n                                    \"pages.login.buttons.haveAccount\",\n                                    \"Have an account?\",\n                                )}{\" \"}\n                                {renderLink(\n                                    \"login\",\n                                    translate(\"pages.login.signin\", \"Sign in\"),\n                                )}\n                            </span>\n                        </>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\n\nimport { useTranslate, useRouterContext, useForgotPassword } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport {\n    ForgotPasswordFormTypes,\n    ForgotPasswordPageProps,\n} from \"../../../../../interfaces\";\n\ntype ForgotPasswordProps = ForgotPasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const ForgotPasswordPage: React.FC<ForgotPasswordProps> = ({\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const translate = useTranslate();\n    const { Link } = useRouterContext();\n\n    const [email, setEmail] = useState(\"\");\n\n    const { mutate: forgotPassword, isLoading } =\n        useForgotPassword<ForgotPasswordFormTypes>();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\n                    \"pages.forgotPassword.title\",\n                    \"Forgot your password?\",\n                )}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    forgotPassword({ email });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\n                            \"pages.forgotPassword.fields.email\",\n                            \"Email\",\n                        )}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"mail\"\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.forgotPassword.buttons.submit\",\n                            \"Send reset instructions\",\n                        )}\n                    />\n                    <br />\n                    {loginLink ?? (\n                        <span>\n                            {translate(\n                                \"pages.register.buttons.haveAccount\",\n                                \"Have an account? \",\n                            )}{\" \"}\n                            {renderLink(\n                                \"/login\",\n                                translate(\"pages.login.signin\", \"Sign in\"),\n                            )}\n                        </span>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    UpdatePasswordFormTypes,\n    UpdatePasswordPageProps,\n} from \"../../../../../interfaces\";\n\nimport { useTranslate, useUpdatePassword } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype UpdatePasswordProps = UpdatePasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const UpdatePasswordPage: React.FC<UpdatePasswordProps> = ({\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const translate = useTranslate();\n\n    const { mutate: updatePassword, isLoading } =\n        useUpdatePassword<UpdatePasswordFormTypes>();\n\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.updatePassword.title\", \"Update Password\")}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    updatePassword({\n                        password: newPassword,\n                        confirmPassword,\n                    });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\n                            \"pages.updatePassword.fields.password\",\n                            \"New Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={newPassword}\n                        onChange={(e) => setNewPassword(e.target.value)}\n                    />\n                    <label>\n                        {translate(\n                            \"pages.updatePassword.fields.confirmPassword\",\n                            \"Confirm New Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.updatePassword.buttons.submit\",\n                            \"Update\",\n                        )}\n                    />\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n * **refine** shows a default ready page on root route when no `resources` is passed to the `<Refine>` component as a property.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#readypage} for more details.\n */\nexport const ReadyPage: React.FC = () => {\n    return (\n        <>\n            <h1>Welcome on board</h1>\n            <p>Your configuration is completed.</p>\n            <p>\n                Now you can get started by adding your resources to the{\" \"}\n                <code>`resources`</code> property of <code>{\"`<Refine>`\"}</code>\n            </p>\n            <div style={{ display: \"flex\", gap: 8 }}>\n                <a href=\"https://refine.dev\" target=\"_blank\" rel=\"noreferrer\">\n                    <button>Documentation</button>\n                </a>\n                <a\n                    href=\"https://refine.dev/examples\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Examples</button>\n                </a>\n                <a\n                    href=\"https://discord.gg/refine\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Community</button>\n                </a>\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport {\n    QueryClientProvider,\n    QueryClient,\n    QueryCache,\n    MutationCache,\n    DefaultOptions,\n} from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\nimport { AuthContextProvider } from \"@contexts/auth\";\nimport { DataContextProvider } from \"@contexts/data\";\nimport { LiveContextProvider } from \"@contexts/live\";\nimport { TranslationContextProvider } from \"@contexts/translation\";\nimport { ResourceContextProvider, IResourceItem } from \"@contexts/resource\";\nimport { RefineContextProvider } from \"@contexts/refine\";\nimport { UndoableQueueContextProvider } from \"@contexts/undoableQueue\";\nimport { UnsavedWarnContextProvider } from \"@contexts/unsavedWarn\";\nimport { RouterContextProvider } from \"@contexts/router\";\nimport { AccessControlContextProvider } from \"@contexts/accessControl\";\nimport { NotificationContextProvider } from \"@contexts/notification\";\nimport { AuditLogContextProvider } from \"@contexts/auditLog\";\nimport { ReadyPage as DefaultReadyPage, RouteChangeHandler } from \"@components\";\nimport { handleRefineOptions, routeGenerator } from \"@definitions\";\nimport { Telemetry } from \"@components/telemetry\";\nimport { useDeepMemo } from \"@hooks/deepMemo\";\n\nimport {\n    MutationMode,\n    IDataContextProvider,\n    I18nProvider,\n    LayoutProps,\n    TitleProps,\n    IRouterProvider,\n    ResourceProps,\n    ILiveContext,\n    LiveModeProps,\n    IDataMultipleContextProvider,\n    AuthProvider,\n    NotificationProvider,\n    AccessControlProvider,\n    AuditLogProvider,\n    DashboardPageProps,\n    IRefineOptions,\n    INotificationContext,\n} from \"../../../interfaces\";\n\ninterface QueryClientConfig {\n    queryCache?: QueryCache;\n    mutationCache?: MutationCache;\n    defaultOptions?: DefaultOptions;\n}\nexport interface RefineProps {\n    children?: React.ReactNode;\n    /**\n     * `resources` is the main building block of a refine app. A resource represents an entity in an endpoint in the API.\n     * @type [`ResourceProps[]`](/docs/api-reference/core/components/refine-config/#resources)\n     */\n    resources?: ResourceProps[];\n    /**\n     * **refine** needs some router functions to create resource pages, handle navigation, etc. This provider allows you to use the router library you want\n     * @type [`IRouterProvider`](/docs/api-reference/core/providers/router-provider/)\n     */\n    routerProvider: IRouterProvider;\n    /**\n     * A `dataProvider` is the place where a refine app communicates with an API. Data providers also act as adapters for refine, making it possible for it to consume different API's and data services.\n     * @type [`IDataContextProvider` | `IDataMultipleContextProvider`](/docs/api-reference/core/providers/data-provider/)\n     */\n    dataProvider: IDataContextProvider | IDataMultipleContextProvider;\n    /**\n     * `authProvider` handles authentication logic like login, logout flow and checking user credentials. It is an object with methods that refine uses when necessary.\n     * @type [`AuthProvider`](/docs/api-reference/core/providers/auth-provider/)\n     */\n    authProvider?: AuthProvider;\n    /**\n     * **refine** lets you add Realtime support to your app via `liveProvider`. It can be used to update and show data in Realtime throughout your app.\n     * @type [`ILiveContext`](/docs/api-reference/core/providers/live-provider/)\n     */\n    liveProvider?: ILiveContext;\n    /**\n     * `notificationProvider` handles notification logics. It is an object with methods that refine uses when necessary.\n     * @type [`NotificationProvider` | `(() => NotificationProvider)`](/docs/api-reference/core/providers/notification-provider/)\n     */\n    notificationProvider?: NotificationProvider | (() => NotificationProvider);\n    /**\n     * `accessControlProvider` is the entry point for implementing access control for refine apps.\n     * @type [`AccessControlProvider`](/docs/api-reference/core/providers/accessControl-provider/)\n     */\n    accessControlProvider?: AccessControlProvider;\n    /**\n     * **refine** allows you to track changes in your data and keep track of who made the changes.\n     * @type [`AuditLogProvider`](/docs/api-reference/core/providers/audit-log-provider#overview)\n     */\n    auditLogProvider?: AuditLogProvider;\n    /**\n     * `i18nProvider` property lets you add i18n support to your app. Making you able to use any i18n framework.\n     * @type [`i18nProvider`](/docs/api-reference/core/providers/i18n-provider/)\n     */\n    i18nProvider?: I18nProvider;\n    /**\n     * A custom error component.\n     * @type [`ReactNode`](/docs/api-reference/core/components/refine-config/#catchall)\n     */\n    catchAll?: React.ReactNode;\n    /**\n     * Custom login component can be passed to the `LoginPage` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#loginpage)\n     */\n    LoginPage?: React.FC;\n    /**\n     * A custom dashboard page can be passed to the `DashboardPage` prop which is accessible on root route.\n     * @type [`React.FC<DashboardPageProps>`](/docs/api-reference/core/components/refine-config/#dashboardpage)\n     */\n    DashboardPage?: React.FC<DashboardPageProps>;\n    /**\n     * Custom ready page component can be set by passing to `ReadyPage` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#readypage)\n     */\n    ReadyPage?: React.FC;\n    /**\n     * Default layout can be customized by passing the `Layout` property.\n     * @type [`React.FC<LayoutProps>`](/docs/api-reference/core/components/refine-config/#layout)\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * The default sidebar can be customized by using refine hooks and passing custom components to `Sider` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#sider)\n     */\n    Sider?: React.FC;\n    /**\n     * The default app header can be customized by passing the `Header` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#header)\n     */\n    Header?: React.FC;\n    /**\n     *The default app footer can be customized by passing the `Footer` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#footer)\n     */\n    Footer?: React.FC;\n    /**\n     * The component wanted to be placed out of app layout structure can be set by passing to `OffLayoutArea` prop.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#offlayoutarea)\n     */\n    OffLayoutArea?: React.FC;\n    /**\n     * TThe app title can be set by passing the `Title` property.\n     * @type [`React.FC<TitleProps>`](/docs/api-reference/core/components/refine-config/#title)\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * Callback to handle all live events.\n     * @type [`(event: LiveEvent) => void`](/docs/api-reference/core/providers/live-provider/#onliveevent)\n     */\n    onLiveEvent?: LiveModeProps[\"onLiveEvent\"];\n    /**\n     * `options` is used to configure the app.\n     * @type [`IRefineOptions`](/docs/api-reference/core/components/refine-config/#options-1)\n     * */\n    options?: IRefineOptions;\n    /**\n     * **refine** implements a simple and transparent telemetry module for collecting usage statistics defined in a very limited scope. This telemetry module is used to improve the refine experience.\n     * @deprecated  `disableTelemetry`  property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n     * @type [`boolean`](/docs/api-reference/core/components/refine-config/#disabletelemetry)\n     */\n    disableTelemetry?: boolean;\n    /** \n     *  Config for React Query client that refine uses.\n        @deprecated `reactQueryClientConfig` property is deprecated. Use `clientConfig` in `reactQuery` in [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n        @example  `options={{ reactQuery: { clientConfig: { queryCache: new QueryCache() } } }}`\n        @see https://refine.dev/docs/core/components/refine-config/#clientconfig\n          @type [`QueryClientConfig` | `false`](/docs/api-reference/core/components/refine-config/#reactquery)\n     */\n    reactQueryClientConfig?: QueryClientConfig;\n    /** \n           *  Config for customize React Query Devtools.\n              @deprecated `reactQueryDevtoolConfig` property is deprecated. Use `devtoolConfig` in `reactQuery` in [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n              @example  `options={{ reactQuery: { devtoolConfig: false } }}`\n              @see https://refine.dev/docs/core/components/refine-config/#devtoolConfig\n              @type [`ReactQueryDevtools` | `false`](/docs/api-reference/core/components/refine-config/#devtoolconfig)\n           */\n    reactQueryDevtoolConfig?:\n        | React.ComponentProps<typeof ReactQueryDevtools>\n        | false;\n\n    /** \n           *  Whether to update data automatically (auto) or not (manual) if a related live event is received. The off value is used to avoid creating a subscription.\n              @deprecated `liveMode` property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n              @example  `options={{ liveMode: \"auto\" }}`\n              @see https://refine.dev/docs/core/components/refine-config/#livemode\n              @type [`LiveModeProps[\"liveMode\"]`](/docs/api-reference/core/components/refine-config/#livemode)\n           */\n    liveMode?: LiveModeProps[\"liveMode\"];\n    /** \n        @deprecated `disableTelemetry` property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n        @example  `options={{ disableTelemetry: true }}`\n     */\n    /**\n     * `mutationMode` determines which mode the mutations run with. (e.g. useUpdate, useDelete).\n     * @deprecated `mutationMode` property is deprecated at this level. Use it from within `options` instead.\n     * @type [`MutationMode`](/docs/api-reference/core/components/refine-config/#mutationmode)\n     * @default \"pessimistic\"\n     */\n    mutationMode?: MutationMode;\n    /** \n       * List query parameter values can be edited manually by typing directly in the URL. To activate this feature syncWithLocation needs to be set to true.\n          @deprecated `syncWithLocation` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ syncWithLocation: true }}`\n          @see https://refine.dev/docs/core/components/refine-config/#syncwithlocation\n       *  @type [`boolean`](/docs/api-reference/core/components/refine-config/#syncwithlocation)\n       */\n    syncWithLocation?: boolean;\n    /** \n       *  When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n          @deprecated `warnwhenunsavedchanges` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ warnwhenunsavedchanges: true }}`\n          @see https://refine.dev/docs/core/components/refine-config/#warnwhenunsavedchanges\n      *   @type [`boolean`](/docs/api-reference/core/components/refine-config/#warnwhenunsavedchanges)\n       */\n    warnWhenUnsavedChanges?: boolean;\n    /** \n       *  The duration of the timeout period in undoable mode, shown in milliseconds. Mutations can be cancelled during this period.\n          @deprecated `undoableTimeout` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ undoableTimeout: 5000 }}`\n          @see https://refine.dev/docs/core/components/refine-config/#undoabletimeout\n      *   @type [`number`](/docs/api-reference/core/components/refine-config/#undoabletimeout)\n       */\n    undoableTimeout?: number;\n}\n\n/**\n * {@link https://refine.dev/docs/api-references/components/refine-config `<Refine> component`} is the entry point of a refine app.\n * It is where the highest level of configuration of the app occurs.\n * Only a dataProvider is required to bootstrap the app. After adding a dataProvider, resources can be added as property.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config} for more details.\n */\nexport const Refine: React.FC<RefineProps> = ({\n    authProvider,\n    dataProvider,\n    routerProvider,\n    notificationProvider,\n    accessControlProvider,\n    auditLogProvider,\n    resources: resourcesFromProps,\n    DashboardPage,\n    ReadyPage,\n    LoginPage,\n    catchAll,\n    children,\n    liveProvider,\n    i18nProvider,\n    mutationMode,\n    syncWithLocation,\n    warnWhenUnsavedChanges,\n    undoableTimeout,\n    Title,\n    Layout,\n    Sider,\n    Header,\n    Footer,\n    OffLayoutArea,\n    reactQueryClientConfig,\n    reactQueryDevtoolConfig,\n    liveMode,\n    onLiveEvent,\n    disableTelemetry,\n    options,\n}) => {\n    const {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    } = handleRefineOptions({\n        options,\n        disableTelemetry,\n        liveMode,\n        mutationMode,\n        reactQueryClientConfig,\n        reactQueryDevtoolConfig,\n        syncWithLocation,\n        warnWhenUnsavedChanges,\n        undoableTimeout,\n    });\n\n    const queryClient = useDeepMemo(() => {\n        if (reactQueryWithDefaults.clientConfig instanceof QueryClient) {\n            return reactQueryWithDefaults.clientConfig;\n        }\n\n        return new QueryClient({\n            ...reactQueryWithDefaults.clientConfig,\n            defaultOptions: {\n                ...reactQueryWithDefaults.clientConfig.defaultOptions,\n                queries: {\n                    refetchOnWindowFocus: false,\n                    keepPreviousData: true,\n                    ...reactQueryWithDefaults.clientConfig.defaultOptions\n                        ?.queries,\n                },\n            },\n        });\n    }, [reactQueryWithDefaults.clientConfig]);\n\n    const useNotificationProviderValues = React.useMemo(() => {\n        return typeof notificationProvider === \"function\"\n            ? notificationProvider\n            : () => notificationProvider ?? ({} as INotificationContext);\n    }, [notificationProvider]);\n\n    const notificationProviderContextValues = useNotificationProviderValues();\n\n    const resources: IResourceItem[] = useDeepMemo(() => {\n        const _resources: IResourceItem[] = [];\n\n        resourcesFromProps?.forEach((resource) => {\n            _resources.push({\n                key: resource.key,\n                name: resource.name,\n                label: resource.options?.label,\n                icon: resource.icon,\n                route: routeGenerator(resource, resourcesFromProps),\n                canCreate: !!resource.create,\n                canEdit: !!resource.edit,\n                canShow: !!resource.show,\n                canDelete: resource.canDelete,\n                create: resource.create,\n                show: resource.show,\n                list: resource.list,\n                edit: resource.edit,\n                options: resource.options,\n                parentName: resource.parentName,\n            });\n        });\n\n        return _resources;\n    }, [resourcesFromProps]);\n\n    if (resources.length === 0) {\n        return ReadyPage ? <ReadyPage /> : <DefaultReadyPage />;\n    }\n\n    const { RouterComponent = React.Fragment } = routerProvider;\n\n    return (\n        <QueryClientProvider client={queryClient}>\n            <NotificationContextProvider {...notificationProviderContextValues}>\n                <AuthContextProvider\n                    {...(authProvider ?? {})}\n                    isProvided={Boolean(authProvider)}\n                >\n                    <DataContextProvider {...dataProvider}>\n                        <LiveContextProvider liveProvider={liveProvider}>\n                            <RouterContextProvider {...routerProvider}>\n                                <ResourceContextProvider resources={resources}>\n                                    <TranslationContextProvider\n                                        i18nProvider={i18nProvider}\n                                    >\n                                        <AccessControlContextProvider\n                                            {...(accessControlProvider ?? {})}\n                                        >\n                                            <AuditLogContextProvider\n                                                {...(auditLogProvider ?? {})}\n                                            >\n                                                <UndoableQueueContextProvider>\n                                                    <RefineContextProvider\n                                                        mutationMode={\n                                                            optionsWithDefaults.mutationMode\n                                                        }\n                                                        warnWhenUnsavedChanges={\n                                                            optionsWithDefaults.warnWhenUnsavedChanges\n                                                        }\n                                                        syncWithLocation={\n                                                            optionsWithDefaults.syncWithLocation\n                                                        }\n                                                        Title={Title}\n                                                        undoableTimeout={\n                                                            optionsWithDefaults.undoableTimeout\n                                                        }\n                                                        catchAll={catchAll}\n                                                        DashboardPage={\n                                                            DashboardPage\n                                                        }\n                                                        LoginPage={LoginPage}\n                                                        Layout={Layout}\n                                                        Sider={Sider}\n                                                        Footer={Footer}\n                                                        Header={Header}\n                                                        OffLayoutArea={\n                                                            OffLayoutArea\n                                                        }\n                                                        hasDashboard={\n                                                            !!DashboardPage\n                                                        }\n                                                        liveMode={\n                                                            optionsWithDefaults.liveMode\n                                                        }\n                                                        onLiveEvent={\n                                                            onLiveEvent\n                                                        }\n                                                        options={\n                                                            optionsWithDefaults\n                                                        }\n                                                    >\n                                                        <UnsavedWarnContextProvider>\n                                                            <RouterComponent>\n                                                                {children}\n                                                                {!disableTelemetryWithDefault && (\n                                                                    <Telemetry />\n                                                                )}\n                                                                <RouteChangeHandler />\n                                                            </RouterComponent>\n                                                        </UnsavedWarnContextProvider>\n                                                    </RefineContextProvider>\n                                                </UndoableQueueContextProvider>\n                                            </AuditLogContextProvider>\n                                        </AccessControlContextProvider>\n                                    </TranslationContextProvider>\n                                </ResourceContextProvider>\n                            </RouterContextProvider>\n                        </LiveContextProvider>\n                    </DataContextProvider>\n                </AuthContextProvider>\n            </NotificationContextProvider>\n            {reactQueryWithDefaults.devtoolConfig === false ? null : (\n                <ReactQueryDevtools\n                    initialIsOpen={false}\n                    position=\"bottom-right\"\n                    {...reactQueryWithDefaults.devtoolConfig}\n                />\n            )}\n        </QueryClientProvider>\n    );\n};\n","import { useEffect } from \"react\";\n\nimport { useTelemetryData } from \"@hooks/useTelemetryData\";\n\nimport { ITelemetryData } from \"../../interfaces/telementry\";\n\nconst encode = (payload: ITelemetryData): string => {\n    const stringifyedPayload = JSON.stringify(payload || {});\n\n    if (typeof btoa !== \"undefined\") {\n        return btoa(stringifyedPayload);\n    }\n\n    return Buffer.from(stringifyedPayload).toString(\"base64\");\n};\n\nexport const Telemetry: React.FC<{}> = () => {\n    const payload = useTelemetryData();\n\n    useEffect(() => {\n        if (typeof window === \"undefined\" && !Image) {\n            return;\n        }\n\n        const img = new Image();\n        img.src = `https://telemetry.refine.dev/telemetry?payload=${encode(\n            payload,\n        )}`;\n    }, []);\n\n    return null;\n};\n","import { useContext } from \"react\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { LiveContext } from \"@contexts/live\";\nimport { RouterContext } from \"@contexts/router\";\nimport { DataContext } from \"@contexts/data\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { NotificationContext } from \"@contexts/notification\";\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { useResource } from \"@hooks/resource\";\n\nimport { ITelemetryData } from \"../../interfaces/telementry\";\n\n// It reads and updates from package.json during build. ref: tsup.config.ts\nconst REFINE_VERSION = \"3.101.0\";\n\nexport const useTelemetryData = (): ITelemetryData => {\n    const authContext = useContext(AuthContext);\n    const auditLogContext = useContext(AuditLogContext);\n    const liveContext = useContext(LiveContext);\n    const routerContext = useContext(RouterContext);\n    const dataContext = useContext(DataContext);\n    const { i18nProvider } = useContext(TranslationContext);\n    const notificationContext = useContext(NotificationContext);\n    const accessControlContext = useContext(AccessControlContext);\n    const { resources } = useResource();\n\n    const auth = authContext.isProvided;\n\n    const auditLog =\n        !!auditLogContext.create ||\n        !!auditLogContext.get ||\n        !!auditLogContext.update;\n\n    const live =\n        !!liveContext?.publish ||\n        !!liveContext?.subscribe ||\n        !!liveContext?.unsubscribe;\n\n    const router =\n        !!routerContext.useHistory ||\n        !!routerContext.Link ||\n        !!routerContext.Prompt ||\n        !!routerContext.useLocation ||\n        !!routerContext.useParams;\n\n    const data = !!dataContext;\n\n    const i18n =\n        !!i18nProvider?.changeLocale ||\n        !!i18nProvider?.getLocale ||\n        !!i18nProvider?.translate;\n\n    const notification =\n        !!notificationContext.close || !!notificationContext.open;\n\n    const accessControl = !!accessControlContext.can;\n\n    return {\n        providers: {\n            auth,\n            auditLog,\n            live,\n            router,\n            data,\n            i18n,\n            notification,\n            accessControl,\n        },\n        version: REFINE_VERSION,\n        resourceCount: resources.length,\n    };\n};\n","import React, { useMemo } from \"react\";\nimport { useMemoized } from \"@hooks/memoized\";\n\n/**\n * Hook that memoizes the given dependency array and checks the consecutive calls with deep equality and returns the same value as the first call if dependencies are not changed.\n * @internal\n */\nexport const useDeepMemo = <T,>(\n    fn: () => T,\n    dependencies: React.DependencyList,\n): T => {\n    const memoizedDependencies = useMemoized(dependencies);\n\n    const value = useMemo(fn, memoizedDependencies);\n\n    return value;\n};\n","import { useRef } from \"react\";\nimport isEqual from \"lodash-es/isEqual\";\n\n/**\n * Hook that memoizes the given value with deep equality.\n * @internal\n */\nexport const useMemoized = <T = unknown,>(value: T): T => {\n    const ref = useRef(value);\n\n    if (!isEqual(ref.current, value)) {\n        ref.current = value;\n    }\n\n    return ref.current;\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport { useCancelNotification, useNotification, useTranslate } from \"@hooks\";\nimport { IUndoableQueue } from \"../../interfaces\";\n\nimport { userFriendlySecond } from \"@definitions/helpers\";\n\nexport const UndoableQueue: React.FC<{\n    notification: IUndoableQueue;\n}> = ({ notification }) => {\n    const translate = useTranslate();\n\n    const { notificationDispatch } = useCancelNotification();\n    const { open } = useNotification();\n\n    const [timeoutId, setTimeoutId] = useState<number | undefined>();\n\n    const cancelNotification = () => {\n        if (notification.isRunning === true) {\n            if (notification.seconds === 0) {\n                notification.doMutation();\n            }\n            if (!notification.isSilent) {\n                open?.({\n                    key: `${notification.id}-${notification.resource}-notification`,\n                    type: \"progress\",\n                    message: translate(\n                        \"notifications.undoable\",\n                        {\n                            seconds: userFriendlySecond(notification.seconds),\n                        },\n                        `You have ${userFriendlySecond(\n                            notification.seconds,\n                        )} seconds to undo`,\n                    ),\n                    cancelMutation: notification.cancelMutation,\n                    undoableTimeout: userFriendlySecond(notification.seconds),\n                });\n            }\n\n            if (notification.seconds > 0) {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n\n                const newTimeoutId = setTimeout(() => {\n                    notificationDispatch({\n                        type: ActionTypes.DECREASE_NOTIFICATION_SECOND,\n                        payload: {\n                            id: notification.id,\n                            seconds: notification.seconds,\n                            resource: notification.resource,\n                        },\n                    });\n                }, 1000) as unknown as number;\n\n                setTimeoutId(newTimeoutId);\n            }\n        }\n    };\n\n    useEffect(() => {\n        cancelNotification();\n    }, [notification]);\n\n    return null;\n};\n","import React, { useEffect } from \"react\";\n\nimport {\n    useRefineContext,\n    useRouterContext,\n    useTranslate,\n    useWarnAboutChange,\n} from \"@hooks\";\nimport { LayoutProps, TitleProps } from \"../../interfaces\";\n\nexport interface LayoutWrapperProps {\n    /**\n     * Outer component that renders other components\n     * @default *\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * [Custom sider to use](/api-reference/core/components/refine-config.md#sider)\n     * @default *\n     */\n    Sider?: React.FC;\n    /**\n     * [Custom header to use](/api-reference/core/components/refine-config.md#header)\n     * @default *\n     */\n    Header?: React.FC;\n    /**\n     * [Custom title to use](/api-reference/core/components/refine-config.md#title)\n     * @default *\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * [Custom footer to use](/api-reference/core/components/refine-config.md#footer)\n     * @default *\n     */\n    Footer?: React.FC;\n    /**\n     * [Custom off layout area to use](/api-reference/core/components/refine-config.md#offlayoutarea)\n     * @default *\n     */\n    OffLayoutArea?: React.FC;\n    children: React.ReactNode;\n}\n\n/**\n * `<LayoutWrapper>` wraps its contents in **refine's** layout with all customizations made in {@link https://refine.dev/docs/core/components/refine-config `<Refine>`} component.\n * It is the default layout used in resource pages.\n * It can be used in custom pages to use global layout.\n *\n * @see {@link https://refine.dev/docs/core/components/layout-wrapper} for more details.\n */\nexport const LayoutWrapper: React.FC<LayoutWrapperProps> = ({\n    children,\n    Layout: LayoutFromProps,\n    Sider: SiderFromProps,\n    Header: HeaderFromProps,\n    Title: TitleFromProps,\n    Footer: FooterFromProps,\n    OffLayoutArea: OffLayoutAreaFromProps,\n}) => {\n    const { Layout, Footer, Header, Sider, Title, OffLayoutArea } =\n        useRefineContext();\n\n    const LayoutToRender = LayoutFromProps ?? Layout;\n\n    return (\n        <LayoutToRender\n            Sider={SiderFromProps ?? Sider}\n            Header={HeaderFromProps ?? Header}\n            Footer={FooterFromProps ?? Footer}\n            Title={TitleFromProps ?? Title}\n            OffLayoutArea={OffLayoutAreaFromProps ?? OffLayoutArea}\n        >\n            {children}\n            <UnsavedPrompt />\n        </LayoutToRender>\n    );\n};\n\nconst UnsavedPrompt: React.FC = () => {\n    const { Prompt } = useRouterContext();\n\n    const translate = useTranslate();\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n    const warnWhenListener = (e: {\n        preventDefault: () => void;\n        returnValue: string;\n    }) => {\n        e.preventDefault();\n\n        e.returnValue = translate(\n            \"warnWhenUnsavedChanges\",\n            \"Are you sure you want to leave? You have unsaved changes.\",\n        );\n\n        return e.returnValue;\n    };\n\n    useEffect(() => {\n        if (warnWhen) {\n            window.addEventListener(\"beforeunload\", warnWhenListener);\n        }\n\n        return window.removeEventListener(\"beforeunload\", warnWhenListener);\n    }, [warnWhen]);\n\n    return (\n        <Prompt\n            when={warnWhen}\n            message={translate(\n                \"warnWhenUnsavedChanges\",\n                \"Are you sure you want to leave? You have unsaved changes.\",\n            )}\n            setWarnWhen={setWarnWhen}\n        />\n    );\n};\n","import React from \"react\";\n\nimport { useAuthenticated, useNavigation, useRouterContext } from \"@hooks\";\n\nexport type AuthenticatedProps = {\n    /**\n     * Content to show if user is not logged in. If undefined, routes to `/`\n     */\n    fallback?: React.ReactNode;\n    /**\n     * Content to show while checking whether user is logged in\n     */\n    loading?: React.ReactNode;\n    children: React.ReactNode;\n};\n\n/**\n * `<Authenticated>` is the component form of {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated `useAuthenticated`}. It internally uses `useAuthenticated` to provide it's functionality.\n *\n * @see {@link https://refine.dev/docs/core/components/auth/authenticated `<Authenticated>`} component for more details.\n */\nexport const Authenticated: React.FC<AuthenticatedProps> = ({\n    children,\n    fallback,\n    loading,\n}) => {\n    const { isSuccess, isLoading, isError } = useAuthenticated();\n\n    const { replace } = useNavigation();\n    const { useLocation } = useRouterContext();\n    const { pathname, search } = useLocation();\n\n    if (isLoading) {\n        return <>{loading}</> || null;\n    }\n    if (isError) {\n        if (!fallback) {\n            const toURL = `${pathname}${search}`;\n            if (!pathname.includes(\"/login\")) {\n                replace(`/login?to=${encodeURIComponent(toURL)}`);\n            }\n            return null;\n        }\n\n        return <>{fallback}</>;\n    }\n\n    if (isSuccess) {\n        return <>{children}</>;\n    }\n\n    return null;\n};\n","import { useContext, useEffect } from \"react\";\nimport { AuthContext } from \"@contexts/auth\";\nimport { useRouterContext } from \"@hooks\";\n\nimport { IAuthContext } from \"../../interfaces\";\n\nexport const RouteChangeHandler: React.FC = () => {\n    const { useLocation } = useRouterContext();\n\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\n    const location = useLocation();\n\n    useEffect(() => {\n        checkAuth?.().catch(() => false);\n    }, [location?.pathname]);\n\n    return null;\n};\n","import React from \"react\";\n\nimport { useCan } from \"@hooks\";\nimport { CanParams } from \"../../interfaces\";\n\nexport type CanAccessProps = CanParams & {\n    /**\n     * Content to show if access control returns `false`\n     */\n    fallback?: React.ReactNode;\n    children: React.ReactNode;\n};\n\nexport const CanAccess: React.FC<CanAccessProps> = ({\n    resource,\n    action,\n    params,\n    fallback,\n    children,\n    ...rest\n}) => {\n    const { data } = useCan({\n        resource,\n        action,\n        params,\n    });\n\n    if (data?.can) {\n        if (React.isValidElement(children)) {\n            const Children = React.cloneElement(children, rest);\n            return Children;\n        }\n\n        return <>{children}</>;\n    }\n\n    if (data?.can === false) {\n        return <>{fallback ?? null}</>;\n    }\n\n    return null;\n};\n","import React, { useEffect } from \"react\";\nimport { CSSRules } from \"./styles\";\n\nexport const GitHubBanner = () => {\n    useEffect(() => {\n        const styleTag = document.createElement(\"style\");\n        document.head.appendChild(styleTag);\n        CSSRules.forEach((rule) =>\n            styleTag.sheet?.insertRule(rule, styleTag.sheet.cssRules.length),\n        );\n    }, []);\n\n    return (\n        <div\n            className=\"banner\"\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                position: \"relative\",\n                padding: \"8px 16px\",\n                backgroundColor: \"#0d0d0d\",\n                borderBottom: \"1px solid rgba(255, 255, 255, 0.15)\",\n            }}\n        >\n            <a\n                href=\"https://github.com/refinedev/refine?ref=gh-banner\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                style={{ all: \"unset\" }}\n            >\n                <div\n                    className=\"content\"\n                    style={{\n                        position: \"relative\",\n                        zIndex: 2,\n                        color: \"#fff\",\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        gap: \"8px\",\n                    }}\n                >\n                    <span\n                        className=\"wizard\"\n                        style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                            width: \"32px\",\n                            height: \"32px\",\n                            fontSize: \"32px\",\n                            lineHeight: \"32px\",\n                        }}\n                    >\n                        🧙‍♂️\n                    </span>\n                    <span\n                        className=\"text\"\n                        style={{\n                            padding: \"4px 0\",\n                            fontSize: \"16px\",\n                            lineHeight: \"24px\",\n                            textShadow: \"0px 0px 4px rgba(255, 255, 255, 0.5)\",\n                        }}\n                    >\n                        Refine grants your wishes! Please give us a ⭐️ on\n                        GitHub to keep the magic going.\n                    </span>\n                </div>\n            </a>\n        </div>\n    );\n};\n","export const CSSRules = [\n    `\n    .banner::before,\n    .banner::after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n    `,\n    `\n    .banner::before {\n        background-image: linear-gradient(\n            270deg,\n            rgba(255, 76, 77, 0.35) 0%,\n            rgba(255, 153, 51, 0.35) 12.5%,\n            rgba(255, 191, 0, 0.35) 25%,\n            rgba(38, 217, 127, 0.35) 37.5%,\n            rgba(71, 235, 235, 0.35) 50%,\n            rgba(0, 128, 255, 0.35) 62.5%,\n            rgba(51, 51, 255, 0.35) 75%,\n            rgba(128, 0, 255, 0.35) 87.5%,\n            rgba(237, 94, 201, 0.35) 100%\n        );\n        background-position: 0 0;\n        background-size: 200% 100%;\n        background-repeat: repeat-x;\n        animation: bgpos 4s linear infinite;\n      }\n    `,\n    `\n    .banner::after {\n        background: linear-gradient(\n          180deg,\n          rgba(13, 13, 13, 0.85) 0%,\n          rgba(13, 13, 13, 0) 100%\n        );\n    }\n    `,\n    `\n    @keyframes bgpos {\n        0% {\n            background-position: 0 0;\n        }\n\n        100% {\n            background-position: -200% 0;\n        }\n    }\n    `,\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}