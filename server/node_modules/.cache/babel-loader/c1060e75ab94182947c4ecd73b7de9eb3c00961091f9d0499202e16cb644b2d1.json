{"ast":null,"code":"var _jsxFileName = \"/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/src/contexts/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { ThemeProvider } from \"@pankod/refine-mui\";\nimport { DarkTheme, LightTheme } from \"@pankod/refine-mui\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ColorModeContext = /*#__PURE__*/createContext({});\nexport const ColorModeContextProvider = _ref => {\n  _s();\n  var _window;\n  let {\n    children\n  } = _ref;\n  const colorModeFromLocalStorage = localStorage.getItem(\"colorMode\");\n  const isSystemPreferenceDark = (_window = window) === null || _window === void 0 ? void 0 : _window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  const systemPreference = isSystemPreferenceDark ? \"dark\" : \"light\";\n  const [mode, setMode] = useState(colorModeFromLocalStorage || systemPreference);\n  useEffect(() => {\n    window.localStorage.setItem(\"colorMode\", mode);\n  }, [mode]);\n  const setColorMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n    } else {\n      setMode(\"light\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ColorModeContext.Provider, {\n    value: {\n      setMode: setColorMode,\n      mode\n    },\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: mode === \"light\" ? LightTheme : DarkTheme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(ColorModeContextProvider, \"4p/dOUajVKxJGIGUlqtrslN2ZMs=\");\n_c = ColorModeContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ColorModeContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","ThemeProvider","DarkTheme","LightTheme","jsxDEV","_jsxDEV","ColorModeContext","ColorModeContextProvider","_ref","_s","_window","children","colorModeFromLocalStorage","localStorage","getItem","isSystemPreferenceDark","window","matchMedia","matches","systemPreference","mode","setMode","setItem","setColorMode","Provider","value","theme","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bigo/Desktop/mentellhealth/mentellhealth/mentellhealth/src/contexts/index.tsx"],"sourcesContent":["import React, {\n    PropsWithChildren,\n    createContext,\n    useEffect,\n    useState,\n} from \"react\";\nimport { ThemeProvider } from \"@pankod/refine-mui\";\nimport { DarkTheme, LightTheme } from \"@pankod/refine-mui\";\n\ntype ColorModeContextType = {\n    mode: string;\n    setMode: () => void;\n};\n\nexport const ColorModeContext = createContext<ColorModeContextType>(\n    {} as ColorModeContextType,\n);\n\nexport const ColorModeContextProvider: React.FC<PropsWithChildren> = ({\n    children,\n}) => {\n    const colorModeFromLocalStorage = localStorage.getItem(\"colorMode\");\n    const isSystemPreferenceDark = window?.matchMedia(\n        \"(prefers-color-scheme: dark)\",\n    ).matches;\n\n    const systemPreference = isSystemPreferenceDark ? \"dark\" : \"light\";\n    const [mode, setMode] = useState(\n        colorModeFromLocalStorage || systemPreference,\n    );\n\n    useEffect(() => {\n        window.localStorage.setItem(\"colorMode\", mode);\n    }, [mode]);\n\n    const setColorMode = () => {\n        if (mode === \"light\") {\n            setMode(\"dark\");\n        } else {\n            setMode(\"light\");\n        }\n    };\n\n    return (\n        <ColorModeContext.Provider\n            value={{\n                setMode: setColorMode,\n                mode,\n            }}\n        >\n            <ThemeProvider theme={mode === \"light\" ? LightTheme : DarkTheme}>\n                {children}\n            </ThemeProvider>\n        </ColorModeContext.Provider>\n    );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAERC,aAAa,EACbC,SAAS,EACTC,QAAQ,QACL,OAAO;AACd,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,SAAS,EAAEC,UAAU,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO3D,OAAO,MAAMC,gBAAgB,gBAAGR,aAAa,CACzC,CAAC,CAAC,CACL;AAED,OAAO,MAAMS,wBAAqD,GAAGC,IAAA,IAE/D;EAAAC,EAAA;EAAA,IAAAC,OAAA;EAAA,IAFgE;IAClEC;EACJ,CAAC,GAAAH,IAAA;EACG,MAAMI,yBAAyB,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACnE,MAAMC,sBAAsB,IAAAL,OAAA,GAAGM,MAAM,cAAAN,OAAA,uBAANA,OAAA,CAAQO,UAAU,CAC7C,8BAA8B,CACjC,CAACC,OAAO;EAET,MAAMC,gBAAgB,GAAGJ,sBAAsB,GAAG,MAAM,GAAG,OAAO;EAClE,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAC5BY,yBAAyB,IAAIO,gBAAgB,CAChD;EAEDpB,SAAS,CAAC,MAAM;IACZiB,MAAM,CAACH,YAAY,CAACS,OAAO,CAAC,WAAW,EAAEF,IAAI,CAAC;EAClD,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACvB,IAAIH,IAAI,KAAK,OAAO,EAAE;MAClBC,OAAO,CAAC,MAAM,CAAC;IACnB,CAAC,MAAM;MACHA,OAAO,CAAC,OAAO,CAAC;IACpB;EACJ,CAAC;EAED,oBACIhB,OAAA,CAACC,gBAAgB,CAACkB,QAAQ;IACtBC,KAAK,EAAE;MACHJ,OAAO,EAAEE,YAAY;MACrBH;IACJ,CAAE;IAAAT,QAAA,eAEFN,OAAA,CAACJ,aAAa;MAACyB,KAAK,EAAEN,IAAI,KAAK,OAAO,GAAGjB,UAAU,GAAGD,SAAU;MAAAS,QAAA,EAC3DA;IAAQ;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACQ;AAEpC,CAAC;AAACrB,EAAA,CArCWF,wBAAqD;AAAAwB,EAAA,GAArDxB,wBAAqD;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}